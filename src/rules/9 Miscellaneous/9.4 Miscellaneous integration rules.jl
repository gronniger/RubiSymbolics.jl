int_rules_9_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 9.4*Miscellaneous*integration*rules =#
    @apply_utils Antiderivative((~(a') + ~(b') * (~F)((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~(n') / (~(A') + ~(B') * ~x + ~(C') * (~x) ^ 2), ~x) => ((2 * ~e * ~g) / (~C * (~e * ~f - ~d * ~g))) * Subst(Antiderivative((~a + ~b * (~F)(~c * ~x)) ^ ~n / ~x, ~x), ~x, sqrt(~d + ~e * ~x) / sqrt(~f + ~g * ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~B, ~C, ~F], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~B * ~e * ~g - ~C * (~e * ~f + ~d * ~g), 0) && IGtQ(~n, 0)))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F)((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~(n') / (~(A') + ~(C') * (~x) ^ 2), ~x) => ((2 * ~e * ~g) / (~C * (~e * ~f - ~d * ~g))) * Subst(Antiderivative((~a + ~b * (~F)(~c * ~x)) ^ ~n / ~x, ~x), ~x, sqrt(~d + ~e * ~x) / sqrt(~f + ~g * ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~C, ~F], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~e * ~f + ~d * ~g, 0) && IGtQ(~n, 0)))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F)((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~n / (~(A') + ~(B') * ~x + ~(C') * (~x) ^ 2), ~x) => Unintegrable((~a + ~b * (~F)((~c * sqrt(~d + ~e * ~x)) / sqrt(~f + ~g * ~x))) ^ ~n / (~A + ~B * ~x + ~C * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~B, ~C, ~F, ~n], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~B * ~e * ~g - ~C * (~e * ~f + ~d * ~g), 0) && Not(IGtQ(~n, 0))))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F)((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~n / (~A + ~(C') * (~x) ^ 2), ~x) => Unintegrable((~a + ~b * (~F)((~c * sqrt(~d + ~e * ~x)) / sqrt(~f + ~g * ~x))) ^ ~n / (~A + ~C * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~C, ~F, ~n], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~e * ~f + ~d * ~g, 0) && Not(IGtQ(~n, 0))))
    @apply_utils Antiderivative(~u / ~y, ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * log(RemoveContent(~y, ~x)) <-- Not(FalseQ(q)))
    @apply_utils Antiderivative(~u / (~y * ~w), ~x) => With([q = DerivativeDivides(~y * ~w, ~u, ~x)], q * log(RemoveContent(~y * ~w, ~x)) <-- Not(FalseQ(q)))
    @apply_utils Antiderivative(~u * (~y) ^ ~(m'), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], (q * (~y) ^ (~m + 1)) / (~m + 1) <-- Not(FalseQ(q))) <-- FreeQ(~m, ~x) && NeQ(~m, -1)
    @apply_utils Antiderivative(~u * (~y) ^ ~(m') * (~z) ^ ~(n'), ~x) => With([q = DerivativeDivides(~y * ~z, ~u * (~z) ^ (~n - ~m), ~x)], (q * (~y) ^ (~m + 1) * (~z) ^ (~m + 1)) / (~m + 1) <-- Not(FalseQ(q))) <-- FreeQ([~m, ~n], ~x) && NeQ(~m, -1)
    @apply_utils Antiderivative(~u, ~x) => With([v = SimplifyIntegrand(~u, ~x)], Antiderivative(v, ~x) <-- SimplerIntegrandQ(v, ~u, ~x))
    @apply_utils Antiderivative(~(u') * (~(e') * sqrt(~(a') + ~(b') * (~x) ^ ~(n')) + ~(f') * sqrt(~(c') + ~(d') * (~x) ^ ~(n'))) ^ ~m, ~x) => (~a * (~e) ^ 2 - ~c * (~f) ^ 2) ^ ~m * Antiderivative(ExpandIntegrand(~u * (~e * sqrt(~a + ~b * (~x) ^ ~n) - ~f * sqrt(~c + ~d * (~x) ^ ~n)) ^ -(~m), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (ILtQ(~m, 0) && EqQ(~b * (~e) ^ 2 - ~d * (~f) ^ 2, 0))
    @apply_utils Antiderivative(~(u') * (~(e') * sqrt(~(a') + ~(b') * (~x) ^ ~(n')) + ~(f') * sqrt(~(c') + ~(d') * (~x) ^ ~(n'))) ^ ~m, ~x) => (~b * (~e) ^ 2 - ~d * (~f) ^ 2) ^ ~m * Antiderivative(ExpandIntegrand(~u * (~x) ^ (~m * ~n) * (~e * sqrt(~a + ~b * (~x) ^ ~n) - ~f * sqrt(~c + ~d * (~x) ^ ~n)) ^ -(~m), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (ILtQ(~m, 0) && EqQ(~a * (~e) ^ 2 - ~c * (~f) ^ 2, 0))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~(a') * (~u) ^ ~n + ~v) ^ ~(p') * ~w, ~x) => Antiderivative((~u) ^ (~m + ~n * ~p) * (~a + (~u) ^ -(~n) * ~v) ^ ~p * ~w, ~x) <-- FreeQ([~a, ~m, ~n], ~x) && (IntegerQ(~p) && (Not(GtQ(~n, 0)) && Not(FreeQ(~v, ~x))))
    @apply_utils Antiderivative(~u * (~(a') + ~(b') * ~y) ^ ~(m') * (~(c') + ~(d') * ~v) ^ ~(n'), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~a + ~b * ~x) ^ ~m * (~c + ~d * ~x) ^ ~n, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && EqQ(~v, ~y)
    @apply_utils Antiderivative(~u * (~(a') + ~(b') * ~y) ^ ~(m') * (~(c') + ~(d') * ~v) ^ ~(n') * (~(e') + ~(f') * ~w) ^ ~(p'), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~a + ~b * ~x) ^ ~m * (~c + ~d * ~x) ^ ~n * (~e + ~f * ~x) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p], ~x) && (EqQ(~v, ~y) && EqQ(~w, ~y))
    @apply_utils Antiderivative(~u * (~(a') + ~(b') * ~y) ^ ~(m') * (~(c') + ~(d') * ~v) ^ ~(n') * (~(e') + ~(f') * ~w) ^ ~(p') * (~(g') + ~(h') * ~z) ^ ~(q'), ~x) => With([r = DerivativeDivides(~y, ~u, ~x)], r * Subst(Antiderivative((~a + ~b * ~x) ^ ~m * (~c + ~d * ~x) ^ ~n * (~e + ~f * ~x) ^ ~p * (~g + ~h * ~x) ^ ~q, ~x), ~x, ~y) <-- Not(FalseQ(r))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n, ~p, ~q], ~x) && (EqQ(~v, ~y) && (EqQ(~w, ~y) && EqQ(~z, ~y)))
    @apply_utils Antiderivative(~(u') * (~a + ~(b') * (~y) ^ ~n), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], ~a * Antiderivative(~u, ~x) + ~b * q * Subst(Antiderivative((~x) ^ ~n, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~n], ~x)
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~y) ^ ~n) ^ ~p, ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~a + ~b * (~x) ^ ~n) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~n, ~p], ~x)
    @apply_utils Antiderivative(~(u') * (~v) ^ ~(m') * (~(a') + ~(b') * (~y) ^ ~n) ^ ~(p'), ~x) => Module([q, r], q * r * Subst(Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(r = Divides((~y) ^ ~m, (~v) ^ ~m, ~x))) && Not(FalseQ(q = DerivativeDivides(~y, ~u, ~x)))) <-- FreeQ([~a, ~b, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~y) ^ ~n + ~(c') * (~v) ^ ~(n2')) ^ ~p, ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(~v, ~y))
    @apply_utils Antiderivative(~(u') * (~A + ~(B') * (~y) ^ ~n) * (~(a') + ~(b') * (~v) ^ ~n + ~(c') * (~w) ^ ~(n2')) ^ ~(p'), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~A + ~B * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~v, ~y) && EqQ(~w, ~y)))
    @apply_utils Antiderivative(~(u') * (~A + ~(B') * (~y) ^ ~n) * (~(a') + ~(c') * (~w) ^ ~(n2')) ^ ~(p'), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~A + ~B * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~c, ~A, ~B, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(~w, ~y))
    @apply_utils Antiderivative(~(u') * (~v) ^ ~(m') * (~(a') + ~(b') * (~y) ^ ~n + ~(c') * (~w) ^ ~(n2')) ^ ~(p'), ~x) => Module([q, r], q * r * Subst(Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(r = Divides((~y) ^ ~m, (~v) ^ ~m, ~x))) && Not(FalseQ(q = DerivativeDivides(~y, ~u, ~x)))) <-- FreeQ([~a, ~b, ~c, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(~w, ~y))
    @apply_utils Antiderivative(~(u') * (~z) ^ ~(m') * (~A + ~(B') * (~y) ^ ~n) * (~(a') + ~(b') * (~v) ^ ~n + ~(c') * (~w) ^ ~(n2')) ^ ~(p'), ~x) => Module([q, r], q * r * Subst(Antiderivative((~x) ^ ~m * (~A + ~B * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(r = Divides((~y) ^ ~m, (~z) ^ ~m, ~x))) && Not(FalseQ(q = DerivativeDivides(~y, ~u, ~x)))) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~v, ~y) && EqQ(~w, ~y)))
    @apply_utils Antiderivative(~(u') * (~z) ^ ~(m') * (~A + ~(B') * (~y) ^ ~n) * (~(a') + ~(c') * (~w) ^ ~(n2')) ^ ~(p'), ~x) => Module([q, r], q * r * Subst(Antiderivative((~x) ^ ~m * (~A + ~B * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(r = Divides((~y) ^ ~m, (~z) ^ ~m, ~x))) && Not(FalseQ(q = DerivativeDivides(~y, ~u, ~x)))) <-- FreeQ([~a, ~c, ~A, ~B, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(~w, ~y))
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~y) ^ ~n) ^ ~(m') * (~(c') + ~(d') * (~v) ^ ~n) ^ ~(p'), ~x) => With([q = DerivativeDivides(~y, ~u, ~x)], q * Subst(Antiderivative((~a + ~b * (~x) ^ ~n) ^ ~m * (~c + ~d * (~x) ^ ~n) ^ ~p, ~x), ~x, ~y) <-- Not(FalseQ(q))) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && EqQ(~v, ~y)
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~y) ^ ~n) ^ ~(m') * (~(c') + ~(d') * (~v) ^ ~n) ^ ~(p') * (~(e') + ~(f') * (~w) ^ ~n) ^ ~(q'), ~x) => With([r = DerivativeDivides(~y, ~u, ~x)], r * Subst(Antiderivative((~a + ~b * (~x) ^ ~n) ^ ~m * (~c + ~d * (~x) ^ ~n) ^ ~p * (~e + ~f * (~x) ^ ~n) ^ ~q, ~x), ~x, ~y) <-- Not(FalseQ(r))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~v, ~y) && EqQ(~w, ~y))
    @apply_utils Antiderivative(~u * (~F) ^ ~v, ~x) => With([q = DerivativeDivides(~v, ~u, ~x)], (q * (~F) ^ ~v) / log(~F) <-- Not(FalseQ(q))) <-- FreeQ(~F, ~x)
    @apply_utils Antiderivative(~u * (~w) ^ ~(m') * (~F) ^ ~v, ~x) => With([q = DerivativeDivides(~v, ~u, ~x)], q * Subst(Antiderivative((~x) ^ ~m * (~F) ^ ~x, ~x), ~x, ~v) <-- Not(FalseQ(q))) <-- FreeQ([~F, ~m], ~x) && EqQ(~w, ~v)
    @apply_utils Antiderivative(~u * (~a + ~(b') * (~v) ^ ~(p') * (~w) ^ ~(p')) ^ ~(m'), ~x) => With([c = Simplify(~u / (~w * D(~v, ~x) + ~v * D(~w, ~x)))], c * Subst(Antiderivative((~a + ~b * (~x) ^ ~p) ^ ~m, ~x), ~x, ~v * ~w) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p], ~x) && IntegerQ(~p)
    @apply_utils Antiderivative(~u * (~a + ~(b') * (~v) ^ ~(p') * (~w) ^ ~(q')) ^ ~(m') * (~v) ^ ~(r'), ~x) => With([c = Simplify(~u / (~p * ~w * D(~v, ~x) + ~q * ~v * D(~w, ~x)))], ((c * ~p) / (~r + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ (~p / (~r + 1))) ^ ~m, ~x), ~x, (~v) ^ (~r + 1) * ~w) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p, ~q, ~r], ~x) && (EqQ(~p, ~q * (~r + 1)) && (NeQ(~r, -1) && IntegerQ(~p / (~r + 1))))
    @apply_utils Antiderivative(~u * (~a + ~(b') * (~v) ^ ~(p') * (~w) ^ ~(q')) ^ ~(m') * (~v) ^ ~(r') * (~w) ^ ~(s'), ~x) => With([c = Simplify(~u / (~p * ~w * D(~v, ~x) + ~q * ~v * D(~w, ~x)))], ((c * ~p) / (~r + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ (~p / (~r + 1))) ^ ~m, ~x), ~x, (~v) ^ (~r + 1) * (~w) ^ (~s + 1)) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p, ~q, ~r, ~s], ~x) && (EqQ(~p * (~s + 1), ~q * (~r + 1)) && (NeQ(~r, -1) && IntegerQ(~p / (~r + 1))))
    @apply_utils Antiderivative(~u * (~(a') * (~v) ^ ~(p') + ~(b') * (~w) ^ ~(q')) ^ ~(m'), ~x) => With([c = Simplify(~u / (~p * ~w * D(~v, ~x) - ~q * ~v * D(~w, ~x)))], c * ~p * Subst(Antiderivative((~b + ~a * (~x) ^ ~p) ^ ~m, ~x), ~x, ~v * (~w) ^ (~m * ~q + 1)) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p, ~q], ~x) && (EqQ(~p + ~q * (~m * ~p + 1), 0) && (IntegerQ(~p) && IntegerQ(~m)))
    #= Antiderivative((~u)*((~a')*(~v)^(~p')+(~b')*(~w)^(~q'))^(~m'),~x) :=  With([c=Simplify(u/(p*w*D(v,x)-q*v*D(w,x)))], -c*q*Subst(Antiderivative((a+b*x^q)^m,x),x,v^(m*p+1)*w) <-- FreeQ(c,x)) <--  FreeQ([a,b,m,p,q],x) && EqQ(p+q*(m*p+1),0) && IntegerQ(q) &&  IntegerQ(m) =#
    @apply_utils Antiderivative(~u * (~(a') * (~v) ^ ~(p') + ~(b') * (~w) ^ ~(q')) ^ ~(m') * (~v) ^ ~(r'), ~x) => With([c = Simplify(~u / (~p * ~w * D(~v, ~x) - ~q * ~v * D(~w, ~x)))], -c * ~q * Subst(Antiderivative((~a + ~b * (~x) ^ ~q) ^ ~m, ~x), ~x, (~v) ^ (~m * ~p + ~r + 1) * ~w) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p, ~q, ~r], ~x) && (EqQ(~p + ~q * (~m * ~p + ~r + 1), 0) && (IntegerQ(~q) && IntegerQ(~m)))
    @apply_utils Antiderivative(~u * (~(a') * (~v) ^ ~(p') + ~(b') * (~w) ^ ~(q')) ^ ~(m') * (~w) ^ ~(s'), ~x) => With([c = Simplify(~u / (~p * ~w * D(~v, ~x) - ~q * ~v * D(~w, ~x)))], ((-c * ~q) / (~s + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ (~q / (~s + 1))) ^ ~m, ~x), ~x, (~v) ^ (~m * ~p + 1) * (~w) ^ (~s + 1)) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p, ~q, ~s], ~x) && (EqQ(~p * (~s + 1) + ~q * (~m * ~p + 1), 0) && (NeQ(~s, -1) && (IntegerQ(~q / (~s + 1)) && IntegerQ(~m))))
    @apply_utils Antiderivative(~u * (~(a') * (~v) ^ ~(p') + ~(b') * (~w) ^ ~(q')) ^ ~(m') * (~v) ^ ~(r') * (~w) ^ ~(s'), ~x) => With([c = Simplify(~u / (~p * ~w * D(~v, ~x) - ~q * ~v * D(~w, ~x)))], ((-c * ~q) / (~s + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ (~q / (~s + 1))) ^ ~m, ~x), ~x, (~v) ^ (~m * ~p + ~r + 1) * (~w) ^ (~s + 1)) <-- FreeQ(c, ~x)) <-- FreeQ([~a, ~b, ~m, ~p, ~q, ~r, ~s], ~x) && (EqQ(~p * (~s + 1) + ~q * (~m * ~p + ~r + 1), 0) && (NeQ(~s, -1) && (IntegerQ(~q / (~s + 1)) && IntegerQ(~m))))
    @apply_utils Antiderivative(~u * (~x) ^ ~(m'), ~x) => (1 / (~m + 1)) * Subst(Antiderivative(SubstFor((~x) ^ (~m + 1), ~u, ~x), ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ(~m, ~x) && (NeQ(~m, -1) && FunctionOfQ((~x) ^ (~m + 1), ~u, ~x))
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = SubstForFractionalPowerOfLinear(u, x)], ShowStep("", "Antiderivative(F((a+b*x)^(1/n),x),x)", "n/b*Subst(Antiderivative(x^(n-1)*F(x,-a/b+x^n/b),x),x,(a+b*x)^(1/n))", Hold( lst((2))*lst((4))* Subst(Antiderivative(lst((1)), x), x, lst((3))^(1/lst((2)))))) <-- Not(FalseQ(lst)) && SubstForFractionalPowerQ(u, lst((3)), x)) <-- SimplifyFlag, Antiderivative((~u), ~x) := With([lst = SubstForFractionalPowerOfLinear(u, x)], lst((2))*lst((4))* Subst(Antiderivative(lst((1)), x), x, lst((3))^(1/lst((2)))) <-- Not(FalseQ(lst)) && SubstForFractionalPowerQ(u, lst((3)), x)))
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = SubstForFractionalPowerOfQuotientOfLinears(u, x)], ShowStep("", "Antiderivative(F(((a+b*x)/(c+d*x))^(1/n),x),x)", "n*(b*c-a*d)*Subst(Antiderivative(x^(n-1)*F(x,(-a+c*x^n)/(b-d*x^n))/(b-d*x^ n)^2,x),x,((a+b*x)/(c+d*x))^(1/n))", Hold( lst((2))*lst((4))* Subst(Antiderivative(lst((1)), x), x, lst((3))^(1/lst((2)))))) <-- Not(FalseQ(lst))) <-- SimplifyFlag, Antiderivative((~u), ~x) := With([lst = SubstForFractionalPowerOfQuotientOfLinears(u, x)], lst((2))*lst((4))* Subst(Antiderivative(lst((1)), x), x, lst((3))^(1/lst((2)))) <-- Not(FalseQ(lst))))
    @apply_utils Antiderivative(~(u') * (~(a') * (~v) ^ ~(m') * (~w) ^ ~(n') * (~z) ^ ~(q')) ^ ~p, ~x) => (((~a) ^ IntPart(~p) * (~a * (~v) ^ ~m * (~w) ^ ~n * (~z) ^ ~q) ^ FracPart(~p)) / ((~v) ^ (~m * FracPart(~p)) * (~w) ^ (~n * FracPart(~p)) * (~z) ^ (~q * FracPart(~p)))) * Antiderivative(~u * (~v) ^ (~m * ~p) * (~w) ^ (~n * ~p) * (~z) ^ (~p * ~q), ~x) <-- FreeQ([~a, ~m, ~n, ~p, ~q], ~x) && (Not(IntegerQ(~p)) && (Not(FreeQ(~v, ~x)) && (Not(FreeQ(~w, ~x)) && Not(FreeQ(~z, ~x)))))
    @apply_utils Antiderivative(~(u') * (~(a') * (~v) ^ ~(m') * (~w) ^ ~(n')) ^ ~p, ~x) => (((~a) ^ IntPart(~p) * (~a * (~v) ^ ~m * (~w) ^ ~n) ^ FracPart(~p)) / ((~v) ^ (~m * FracPart(~p)) * (~w) ^ (~n * FracPart(~p)))) * Antiderivative(~u * (~v) ^ (~m * ~p) * (~w) ^ (~n * ~p), ~x) <-- FreeQ([~a, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (Not(FreeQ(~v, ~x)) && Not(FreeQ(~w, ~x))))
    @apply_utils Antiderivative(~(u') * (~(a') * (~v) ^ ~(m')) ^ ~p, ~x) => (((~a) ^ IntPart(~p) * (~a * (~v) ^ ~m) ^ FracPart(~p)) / (~v) ^ (~m * FracPart(~p))) * Antiderivative(~u * (~v) ^ (~m * ~p), ~x) <-- FreeQ([~a, ~m, ~p], ~x) && (Not(IntegerQ(~p)) && (Not(FreeQ(~v, ~x)) && (Not(EqQ(~a, 1) && EqQ(~m, 1)) && Not(EqQ(~v, ~x) && EqQ(~m, 1)))))
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((~b) ^ IntPart(~p) * (~a + ~b * (~x) ^ ~n) ^ FracPart(~p)) / ((~x) ^ (~n * FracPart(~p)) * (1 + (~a * (~x) ^ -(~n)) / ~b) ^ FracPart(~p))) * Antiderivative(~u * (~x) ^ (~n * ~p) * (1 + (~a * (~x) ^ -(~n)) / ~b) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (Not(IntegerQ(~p)) && (ILtQ(~n, 0) && (Not(RationalFunctionQ(~u, ~x)) && IntegerQ(~p + 1 / 2))))
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~v) ^ ~n) ^ ~p, ~x) => ((~a + ~b * (~v) ^ ~n) ^ FracPart(~p) / ((~v) ^ (~n * FracPart(~p)) * (~b + ~a * (~v) ^ -(~n)) ^ FracPart(~p))) * Antiderivative(~u * (~v) ^ (~n * ~p) * (~b + ~a * (~v) ^ -(~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (Not(IntegerQ(~p)) && (ILtQ(~n, 0) && (BinomialQ(~v, ~x) && Not(LinearQ(~v, ~x)))))
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~x) ^ ~(m') * (~v) ^ ~n) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~m * (~v) ^ ~n) ^ FracPart(~p) / ((~v) ^ (~n * FracPart(~p)) * (~b * (~x) ^ ~m + ~a * (~v) ^ -(~n)) ^ FracPart(~p))) * Antiderivative(~u * (~v) ^ (~n * ~p) * (~b * (~x) ^ ~m + ~a * (~v) ^ -(~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~m, ~p], ~x) && (Not(IntegerQ(~p)) && (ILtQ(~n, 0) && BinomialQ(~v, ~x)))
    @apply_utils Antiderivative(~(u') * (~(a') * (~x) ^ ~(r') + ~(b') * (~x) ^ ~(s')) ^ ~m, ~x) => With([v = (~a * (~x) ^ ~r + ~b * (~x) ^ ~s) ^ FracPart(~m) / ((~x) ^ (~r * FracPart(~m)) * (~a + ~b * (~x) ^ (~s - ~r)) ^ FracPart(~m))], v * Antiderivative(~u * (~x) ^ (~m * ~r) * (~a + ~b * (~x) ^ (~s - ~r)) ^ ~m, ~x) <-- NeQ(Simplify(v), 1)) <-- FreeQ([~a, ~b, ~m, ~r, ~s], ~x) && (Not(IntegerQ(~m)) && PosQ(~s - ~r))
    @apply_utils Antiderivative(~u / (~a + ~(b') * (~x) ^ ~n), ~x) => With([v = RationalFunctionExpand(~u / (~a + ~b * (~x) ^ ~n), ~x)], Antiderivative(v, ~x) <-- SumQ(v)) <-- FreeQ([~a, ~b], ~x) && IGtQ(~n, 0)
    @apply_utils Antiderivative(~u * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(~u * (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~p) && Not(AlgebraicFunctionQ(~u, ~x)))))
    @apply_utils Antiderivative(~u * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(~u * (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (Not(IntegerQ(~p)) && Not(AlgebraicFunctionQ(~u, ~x)))))
    @apply_utils Antiderivative(~u / (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')), ~x) => With([v = RationalFunctionExpand(~u / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x)], Antiderivative(v, ~x) <-- SumQ(v)) <-- FreeQ([~a, ~b, ~c], ~x) && (EqQ(~n2, 2 * ~n) && IGtQ(~n, 0))
    @apply_utils Antiderivative(~(u') / (~(a') * (~x) ^ ~(m') + ~(b') * sqrt(~(c') * (~x) ^ ~n)), ~x) => Antiderivative((~u * (~a * (~x) ^ ~m - ~b * sqrt(~c * (~x) ^ ~n))) / ((~a) ^ 2 * (~x) ^ (2 * ~m) - (~b) ^ 2 * ~c * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~m, ~n], ~x)
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = FunctionOfLinear(u, x)], ShowStep("", "Antiderivative(F(a+b*x),x)", "Subst(Antiderivative(F(x),x),x,a+b*x)/b", Hold( Dist(1/lst((3)), Subst(Antiderivative(lst((1)), x), x, lst((2)) + lst((3))*x), x))) <-- Not(FalseQ(lst))) <-- SimplifyFlag, Antiderivative((~u), ~x) := With([lst = FunctionOfLinear(u, x)], Dist(1/lst((3)), Subst(Antiderivative(lst((1)), x), x, lst((2)) + lst((3))*x), x) <-- Not(FalseQ(lst))))
    If(TrueQ($LoadShowSteps), Antiderivative((~u)/(~x), ~x) := With([lst = PowerVariableExpn(u, 0, x)], ShowStep("", "Antiderivative(F((c*x)^n)/x,x)", "Subst(Antiderivative(F(x)/x,x),x,(c*x)^n)/n", Hold( 1/lst((2))* Subst(Antiderivative(NormalizeIntegrand(Simplify(lst((1))/x), x), x), x, (lst((3))*x)^lst((2))))) <-- Not(FalseQ(lst)) && NeQ(lst((2)), 0)) <-- SimplifyFlag && NonsumQ(u) && Not(RationalFunctionQ(u, x)), Antiderivative((~u)/(~x), ~x) := With([lst = PowerVariableExpn(u, 0, x)], 1/lst((2))* Subst(Antiderivative(NormalizeIntegrand(Simplify(lst((1))/x), x), x), x, (lst((3))*x)^lst((2))) <-- Not(FalseQ(lst)) && NeQ(lst((2)), 0)) <-- NonsumQ(u) && Not(RationalFunctionQ(u, x)))
    If(TrueQ($LoadShowSteps), Antiderivative((~u)*(~x)^(~m'), ~x) := With([lst = PowerVariableExpn(u, m + 1, x)], ShowStep("If*g=GCD(m+1,n)>1,", "Antiderivative(x^m*F(x^n),x)", "1/g*Subst(Antiderivative(x^((m+1)/g-1)*F(x^(n/g)),x),x,x^g)", Hold( 1/lst((2))* Subst(Antiderivative(NormalizeIntegrand(Simplify(lst((1))/x), x), x), x, (lst((3))*x)^lst((2))))) <-- Not(FalseQ(lst)) && NeQ(lst((2)), m + 1)) <-- SimplifyFlag && IntegerQ(m) && NeQ(m, -1) && NonsumQ(u) && (GtQ(m, 0) || Not(AlgebraicFunctionQ(u, x))), Antiderivative((~u)*(~x)^(~m'), ~x) := With([lst = PowerVariableExpn(u, m + 1, x)], 1/lst((2))* Subst(Antiderivative(NormalizeIntegrand(Simplify(lst((1))/x), x), x), x, (lst((3))*x)^lst((2))) <-- Not(FalseQ(lst)) && NeQ(lst((2)), m + 1)) <-- IntegerQ(m) && NeQ(m, -1) && NonsumQ(u) && (GtQ(m, 0) || Not(AlgebraicFunctionQ(u, x))))
    @apply_utils Antiderivative((~x) ^ ~m * ~u, ~x) => With([k = Denominator(~m)], k * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * ReplaceAll(~u, (~x->begin
                                            #= none:1 =#
                                            #= none:3 =#
                                            (~x) ^ k
                                        end)), ~x), ~x, (~x) ^ (1 / k))) <-- FractionQ(~m)
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = FunctionOfSquareRootOfQuadratic(u, x)], ShowStep("", "Antiderivative(F(sqrt(a+b*x+c*x^2),x),x)", "2*Subst(Antiderivative(F((c*sqrt(a)-b*x+sqrt(a)*x^2)/(c-x^2),(-b+2* sqrt(a)*x)/(c-x^2))* (c*sqrt(a)-b*x+sqrt(a)*x^2)/(c-x^2)^2,x),x,(-sqrt(a)+sqrt(a+ b*x+c*x^2))/x)", Hold(2*Subst(Antiderivative(lst((1)), x), x, lst((2))))) <-- Not(FalseQ(lst)) && EqQ(lst((3)), 1)) <-- SimplifyFlag && EulerIntegrandQ(u, x), Antiderivative((~u), ~x) := With([lst = FunctionOfSquareRootOfQuadratic(u, x)], 2*Subst(Antiderivative(lst((1)), x), x, lst((2))) <-- Not(FalseQ(lst)) && EqQ(lst((3)), 1)) <-- EulerIntegrandQ(u, x))
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = FunctionOfSquareRootOfQuadratic(u, x)], ShowStep("", "Antiderivative(F(sqrt(a+b*x+c*x^2),x),x)", "2*Subst(Antiderivative(F((a*sqrt(c)+b*x+sqrt(c)*x^2)/(b+2*sqrt(c)*x),(- a+x^2)/(b+2*sqrt(c)*x))* (a*sqrt(c)+b*x+sqrt(c)*x^2)/(b+2*sqrt(c)*x)^2,x),x,sqrt(c)* x+sqrt(a+b*x+c*x^2))", Hold(2*Subst(Antiderivative(lst((1)), x), x, lst((2))))) <-- Not(FalseQ(lst)) && EqQ(lst((3)), 2)) <-- SimplifyFlag && EulerIntegrandQ(u, x), Antiderivative((~u), ~x) := With([lst = FunctionOfSquareRootOfQuadratic(u, x)], 2*Subst(Antiderivative(lst((1)), x), x, lst((2))) <-- Not(FalseQ(lst)) && EqQ(lst((3)), 2)) <-- EulerIntegrandQ(u, x))
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = FunctionOfSquareRootOfQuadratic(u, x)], ShowStep("", "Antiderivative(F(sqrt(a+b*x+c*x^2),x),x)", "-2*sqrt(b^2-4*a*c)*Subst(Antiderivative(F(-sqrt(b^2-4*a*c)*x/(c-x^2), (b*c+c*sqrt(b^2-4*a*c)+(-b+sqrt(b^2-4*a*c))*x^2)/(-2*c*(c- x^2)))*x/(c-x^2)^2,x), x,2*c*sqrt(a+b*x+c*x^2)/(b-sqrt(b^2-4*a*c)+2*c*x))", Hold(2*Subst(Antiderivative(lst((1)), x), x, lst((2))))) <-- Not(FalseQ(lst)) && EqQ(lst((3)), 3)) <-- SimplifyFlag && EulerIntegrandQ(u, x), Antiderivative((~u), ~x) := With([lst = FunctionOfSquareRootOfQuadratic(u, x)], 2*Subst(Antiderivative(lst((1)), x), x, lst((2))) <-- Not(FalseQ(lst)) && EqQ(lst((3)), 3)) <-- EulerIntegrandQ(u, x))
    @apply_utils Antiderivative(1 / (~a + ~(b') * (~v) ^ 2), ~x) => (1 / (2 * ~a)) * Antiderivative(Together(1 / (1 - ~v / Rt(-(~a) / ~b, 2))), ~x) + (1 / (2 * ~a)) * Antiderivative(Together(1 / (1 + ~v / Rt(-(~a) / ~b, 2))), ~x) <-- FreeQ([~a, ~b], ~x)
    @apply_utils Antiderivative(1 / (~a + ~(b') * (~v) ^ ~n), ~x) => Dist(2 / (~a * ~n), Sum(Antiderivative(Together(1 / (1 - (~v) ^ 2 / ((-1) ^ ((4k) / ~n) * Rt(-(~a) / ~b, ~n / 2)))), ~x), [k, 1, ~n / 2]), ~x) <-- FreeQ([~a, ~b], ~x) && IGtQ(~n / 2, 1)
    @apply_utils Antiderivative(1 / (~a + ~(b') * (~v) ^ ~n), ~x) => Dist(1 / (~a * ~n), Sum(Antiderivative(Together(1 / (1 - ~v / ((-1) ^ ((2k) / ~n) * Rt(-(~a) / ~b, ~n)))), ~x), [k, 1, ~n]), ~x) <-- FreeQ([~a, ~b], ~x) && IGtQ((~n - 1) / 2, 0)
    @apply_utils Antiderivative(~v / (~a + ~(b') * (~u) ^ ~(n')), ~x) => Antiderivative(ReplaceAll(ExpandIntegrand(PolynomialInSubst(~v, ~u, ~x) / (~a + ~b * (~x) ^ ~n), ~x), (~x->begin
                            #= none:1 =#
                            #= none:3 =#
                            ~u
                        end)), ~x) <-- FreeQ([~a, ~b], ~x) && (IGtQ(~n, 0) && PolynomialInQ(~v, ~u, ~x))
    @apply_utils Antiderivative(~u, ~x) => With([v = NormalizeIntegrand(~u, ~x)], Antiderivative(v, ~x) <-- v !== ~u)
    @apply_utils Antiderivative(~u, ~x) => With([v = ExpandIntegrand(~u, ~x)], Antiderivative(v, ~x) <-- SumQ(v))
    @apply_utils Antiderivative(~(u') * (~(a') + ~(b') * (~x) ^ ~(m')) ^ ~(p') * (~(c') + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (((~a + ~b * (~x) ^ ~m) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~x) ^ (~m * ~p)) * Antiderivative(~u * (~x) ^ (~m * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p, ~q], ~x) && (EqQ(~a + ~d, 0) && (EqQ(~b + ~c, 0) && (EqQ(~m + ~n, 0) && EqQ(~p + ~q, 0))))
    @apply_utils Antiderivative(~u * (~a + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (sqrt(~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) / ((4 * ~c) ^ (~p - 1 / 2) * (~b + 2 * ~c * (~x) ^ ~n))) * Antiderivative(~u * (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p - 1 / 2)))
    If(TrueQ($LoadShowSteps), Antiderivative((~u), ~x) := With([lst = SubstForFractionalPowerOfLinear(u, x)], ShowStep("", "Antiderivative(F((a+b*x)^(1/n),x),x)", "n/b*Subst(Antiderivative(x^(n-1)*F(x,-a/b+x^n/b),x),x,(a+b*x)^(1/n))", Hold( lst((2))*lst((4))* Subst(Antiderivative(lst((1)), x), x, lst((3))^(1/lst((2)))))) <-- Not(FalseQ(lst))) <-- SimplifyFlag, Antiderivative((~u), ~x) := With([lst = SubstForFractionalPowerOfLinear(u, x)], lst((2))*lst((4))* Subst(Antiderivative(lst((1)), x), x, lst((3))^(1/lst((2)))) <-- Not(FalseQ(lst))))
    Antiderivative((~u), (~x)) := CannotIntegrate(u, x)
end
