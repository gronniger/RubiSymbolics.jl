int_rules_3_1_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 3.1.4*(f*x)^m*(d+e*x^r)^q*(a+b*log(c*x^n))^p =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') / ~x) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => Antiderivative((~e + ~d * ~x) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~m, ~q) && IntegerQ(~q))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => With([u = IntHide((~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q, ~x)], u * (~a + ~b * log(~c * (~x) ^ ~n)) - ~b * ~n * Antiderivative(SimplifyIntegrand(u / ~x, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~r], ~x) && (IGtQ(~q, 0) && IGtQ(~m, 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => With([u = IntHide((~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q, ~x)], Dist(~a + ~b * log(~c * (~x) ^ ~n), u) - ~b * ~n * Antiderivative(SimplifyIntegrand(u / ~x, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~r], ~x) && (IGtQ(~q, 0) && (IntegerQ(~m) && Not(EqQ(~q, 1) && EqQ(~m, -1))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => ((~f * ~x) ^ (~m + 1) * (~d + ~e * (~x) ^ ~r) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n))) / (~d * ~f * (~m + 1)) - ((~b * ~n) / (~d * (~m + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ (~q + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q, ~r], ~x) && (EqQ(~m + ~r * (~q + 1) + 1, 0) && NeQ(~m, -1))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~r) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~n)) ^ ~(p'), ~x) => ((~f) ^ ~m / ~n) * Subst(Antiderivative((~d + ~e * ~x) ^ ~q * (~a + ~b * log(~c * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q, ~r], ~x) && (EqQ(~m, ~r - 1) && (IGtQ(~p, 0) && ((IntegerQ(~m) || GtQ(~f, 0)) && EqQ(~r, ~n))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p')) / (~d + ~(e') * (~x) ^ ~r), ~x) => ((~f) ^ ~m * log(1 + (~e * (~x) ^ ~r) / ~d) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / (~e * ~r) - ((~b * (~f) ^ ~m * ~n * ~p) / (~e * ~r)) * Antiderivative((log(1 + (~e * (~x) ^ ~r) / ~d) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ (~p - 1)) / ~x, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~r], ~x) && (EqQ(~m, ~r - 1) && (IGtQ(~p, 0) && ((IntegerQ(~m) || GtQ(~f, 0)) && NeQ(~r, ~n))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~r) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => ((~f) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / (~e * ~r * (~q + 1)) - ((~b * (~f) ^ ~m * ~n * ~p) / (~e * ~r * (~q + 1))) * Antiderivative(((~d + ~e * (~x) ^ ~r) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ (~p - 1)) / ~x, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q, ~r], ~x) && (EqQ(~m, ~r - 1) && (IGtQ(~p, 0) && ((IntegerQ(~m) || GtQ(~f, 0)) && (NeQ(~r, ~n) && NeQ(~q, -1)))))
    @apply_utils Antiderivative((~f * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~r) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => ((~f * ~x) ^ ~m / (~x) ^ ~m) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q, ~r], ~x) && (EqQ(~m, ~r - 1) && (IGtQ(~p, 0) && Not(IntegerQ(~m) || GtQ(~f, 0))))
    #= Antiderivative((~x)^(~m')*((~a')+(~b')*log((~c')*(~x)^(~n')))^(~p')/((~d)+(~e')*(~x)^(~r')),~x)  := 1/e*Antiderivative(x^(m-r)*(a+b*log(c*x^n))^p,x) - d/e*Antiderivative((x^(m-r)*(a+b*log(c*x^n))^p)/(d+e*x^r),x) <--  FreeQ([a,b,c,d,e,m,n,r],x) && IGtQ(p,0) && IGtQ(r,0) && IGeQ(m-r,0) =#
    @apply_utils Antiderivative((~(a') + ~(b') * log(~(c') * (~x) ^ ~n)) / (~x * (~d + ~(e') * (~x) ^ ~(r'))), ~x) => (1 / ~n) * Subst(Antiderivative((~a + ~b * log(~c * ~x)) / (~x * (~d + ~e * (~x) ^ (~r / ~n))), ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~r], ~x) && IntegerQ(~r / ~n)
    #= Antiderivative(((~a')+(~b')*log((~c')*(~x)^(~n')))^(~p')/((~x)*((~d)+(~e')*(~x))),~x) :=  1/d*Antiderivative((a+b*log(c*x^n))^p/x,x) -  e/d*Antiderivative((a+b*log(c*x^n))^p/(d+e*x),x) <-- FreeQ([a,b,c,d,e,n],x) &&  IGtQ(p,0) =#
    #= Antiderivative(((~a')+(~b')*log((~c')*(~x)^(~n')))^(~p')/((~x)*((~d)+(~e')*(~x)^(~r'))),~x) :=   (r*log(x)-log(1+(e*x^r)/d))*(a+b*log(c*x^n))^p/(d*r) - b*n*p/d*Antiderivative(log(x)*(a+b*log(c*x^n))^(p-1)/x,x) + b*n*p/(d*r)*Antiderivative(log(1+(e*x^r)/d)*(a+b*log(c*x^n))^(p-1)/x,x) <--  FreeQ([a,b,c,d,e,n,r],x) && IGtQ(p,0) =#
    @apply_utils Antiderivative((~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p') / (~x * (~d + ~(e') * (~x) ^ ~(r'))), ~x) => (-(log(1 + ~d / (~e * (~x) ^ ~r))) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / (~d * ~r) + ((~b * ~n * ~p) / (~d * ~r)) * Antiderivative((log(1 + ~d / (~e * (~x) ^ ~r)) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ (~p - 1)) / ~x, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~r], ~x) && IGtQ(~p, 0)
    @apply_utils Antiderivative(((~x) ^ ~(m') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p')) / (~d + ~(e') * (~x) ^ ~(r')), ~x) => (1 / ~d) * Antiderivative((~x) ^ ~m * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) - (~e / ~d) * Antiderivative(((~x) ^ (~m + ~r) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / (~d + ~e * (~x) ^ ~r), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~r], ~x) && (IGtQ(~p, 0) && (IGtQ(~r, 0) && ILtQ(~m, -1)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * ~x) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => (-((~f * ~x) ^ (~m + 1)) * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / (~d * ~f * (~q + 1)) + ((~b * ~n * ~p) / (~d * (~q + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q], ~x) && (EqQ(~m + ~q + 2, 0) && (IGtQ(~p, 0) && LtQ(~q, -1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * ~x) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => With([u = IntHide((~x) ^ ~m * (~d + ~e * ~x) ^ ~q, ~x)], Dist(~a + ~b * log(~c * (~x) ^ ~n), u, ~x) - ~b * ~n * Antiderivative(SimplifyIntegrand(u / ~x, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (ILtQ(~m + ~q + 2, 0) && IGtQ(~m, 0))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * ~x) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => (-((~f * ~x) ^ (~m + 1)) * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / (~d * ~f * (~q + 1)) + ((~m + ~q + 2) / (~d * (~q + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) + ((~b * ~n * ~p) / (~d * (~q + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (ILtQ(~m + ~q + 2, 0) && (IGtQ(~p, 0) && (LtQ(~q, -1) && GtQ(~m, 0))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * ~x) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => ((~f * ~x) ^ ~m * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n))) / (~e * (~q + 1)) - (~f / (~e * (~q + 1))) * Antiderivative((~f * ~x) ^ (~m - 1) * (~d + ~e * ~x) ^ (~q + 1) * (~a * ~m + ~b * ~n + ~b * ~m * log(~c * (~x) ^ ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (ILtQ(~q, -1) && GtQ(~m, 0))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => (-((~f * ~x) ^ (~m + 1)) * (~d + ~e * (~x) ^ 2) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n))) / (2 * ~d * ~f * (~q + 1)) + (1 / (2 * ~d * (~q + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ 2) ^ (~q + 1) * (~a * (~m + 2 * ~q + 3) + ~b * ~n + ~b * (~m + 2 * ~q + 3) * log(~c * (~x) ^ ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (ILtQ(~q, -1) && ILtQ(~m, 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ 2) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => (((~d) ^ IntPart(~q) * (~d + ~e * (~x) ^ 2) ^ FracPart(~q)) / (1 + (~e / ~d) * (~x) ^ 2) ^ FracPart(~q)) * Antiderivative((~x) ^ ~m * (1 + (~e / ~d) * (~x) ^ 2) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (IntegerQ(~m / 2) && (IntegerQ(~q - 1 / 2) && Not(LtQ(~m + 2 * ~q, -2) || GtQ(~d, 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d1 + ~(e1') * ~x) ^ ~q * (~d2 + ~(e2') * ~x) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => (((~d1 + ~e1 * ~x) ^ ~q * (~d2 + ~e2 * ~x) ^ ~q) / (1 + ((~e1 * ~e2) / (~d1 * ~d2)) * (~x) ^ 2) ^ ~q) * Antiderivative((~x) ^ ~m * (1 + ((~e1 * ~e2) / (~d1 * ~d2)) * (~x) ^ 2) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d1, ~e1, ~d2, ~e2, ~n], ~x) && (EqQ(~d2 * ~e1 + ~d1 * ~e2, 0) && (IntegerQ(~m) && IntegerQ(~q - 1 / 2)))
    @apply_utils Antiderivative(((~d + ~(e') * ~x) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p')) / ~x, ~x) => ~d * Antiderivative(((~d + ~e * ~x) ^ (~q - 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / ~x, ~x) + ~e * Antiderivative((~d + ~e * ~x) ^ (~q - 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (IGtQ(~p, 0) && (GtQ(~q, 0) && IntegerQ(2 * ~q)))
    @apply_utils Antiderivative(((~d + ~(e') * ~x) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p')) / ~x, ~x) => (1 / ~d) * Antiderivative(((~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / ~x, ~x) - (~e / ~d) * Antiderivative((~d + ~e * ~x) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (IGtQ(~p, 0) && (LtQ(~q, -1) && IntegerQ(2 * ~q)))
    @apply_utils Antiderivative(((~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) / ~x, ~x) => With([u = IntHide((~d + ~e * (~x) ^ ~r) ^ ~q / ~x, ~x)], u * (~a + ~b * log(~c * (~x) ^ ~n)) - ~b * ~n * Antiderivative(Dist(1 / ~x, u, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~r], ~x) && IntegerQ(~q - 1 / 2)
    @apply_utils Antiderivative(((~d + ~(e') * (~x) ^ ~(r')) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p')) / ~x, ~x) => (1 / ~d) * Antiderivative(((~d + ~e * (~x) ^ ~r) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / ~x, ~x) - (~e / ~d) * Antiderivative((~x) ^ (~r - 1) * (~d + ~e * (~x) ^ ~r) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~r], ~x) && (IGtQ(~p, 0) && ILtQ(~q, -1))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => With([u = IntHide((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q, ~x)], Dist(~a + ~b * log(~c * (~x) ^ ~n), u, ~x) - ~b * ~n * Antiderivative(SimplifyIntegrand(u / ~x, ~x), ~x) <-- (EqQ(~r, 1) || EqQ(~r, 2)) && (IntegerQ(~m) && IntegerQ(~q - 1 / 2)) || InverseFunctionFreeQ(u, ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q, ~r], ~x) && (IntegerQ(2 * ~q) && (IntegerQ(~m) && IntegerQ(~r) || IGtQ(~q, 0)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))), ~x) => With([u = ExpandIntegrand(~a + ~b * log(~c * (~x) ^ ~n), (~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q, ~x)], Antiderivative(u, ~x) <-- SumQ(u)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q, ~r], ~x) && (IntegerQ(~q) && (GtQ(~q, 0) || IntegerQ(~m) && IntegerQ(~r)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~d + ~e * (~x) ^ (~r / ~n)) ^ ~q * (~a + ~b * log(~c * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~r], ~x) && (IntegerQ(~q) && (IntegerQ(~r / ~n) && (IntegerQ(Simplify((~m + 1) / ~n)) && (GtQ((~m + 1) / ~n, 0) || IGtQ(~p, 0)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => With([u = ExpandIntegrand((~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, (~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q, ~x)], Antiderivative(u, ~x) <-- SumQ(u)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x) && (IntegerQ(~q) && (GtQ(~q, 0) || IGtQ(~p, 0) && (IntegerQ(~m) && IntegerQ(~r))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(r')) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => Unintegrable((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~r) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x)
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~u) ^ ~(q') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~q * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~f, ~m, ~n, ~p, ~q], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~f + ~(g') * ~x) ^ ~(m') * (~d + ~(e') * ~x) ^ ~q * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => ((~f + ~g * ~x) ^ (~m + 1) * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ ~p) / ((~q + 1) * (~e * ~f - ~d * ~g)) - ((~b * ~n * ~p) / ((~q + 1) * (~e * ~f - ~d * ~g))) * Antiderivative(((~f + ~g * ~x) ^ (~m + 1) * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * log(~c * (~x) ^ ~n)) ^ (~p - 1)) / ~x, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~q], ~x) && (NeQ(~e * ~f - ~d * ~g, 0) && (EqQ(~m + ~q + 2, 0) && (IGtQ(~p, 0) && LtQ(~q, -1))))
end
