int_rules_4_3_11 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 4.3.11*(e*x)^m*(a+b*tan(c+d*x^n))^p =#
    @apply_utils Antiderivative((~(a') + ~(b') * tan(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * (~a + ~b * tan(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~p], ~x) && (IGtQ(1 / ~n, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * cot(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * (~a + ~b * cot(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~p], ~x) && (IGtQ(1 / ~n, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * tan(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~a + ~b * tan(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * cot(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~a + ~b * cot(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * tan(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * tan(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (LinearQ(~u, ~x) && NeQ(~u, ~x))
    @apply_utils Antiderivative((~(a') + ~(b') * cot(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * cot(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (LinearQ(~u, ~x) && NeQ(~u, ~x))
    @apply_utils Antiderivative((~(a') + ~(b') * tan(~u)) ^ ~(p'), ~x) => Antiderivative((~a + ~b * tan(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(a') + ~(b') * cot(~u)) ^ ~(p'), ~x) => Antiderivative((~a + ~b * cot(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * tan(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * tan(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (IGtQ(Simplify((~m + 1) / ~n), 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cot(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * cot(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (IGtQ(Simplify((~m + 1) / ~n), 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~x) ^ ~(m') * tan(~(c') + ~(d') * (~x) ^ ~n) ^ 2, ~x) => (((~x) ^ ((~m - ~n) + 1) * tan(~c + ~d * (~x) ^ ~n)) / (~d * ~n) - Antiderivative((~x) ^ ~m, ~x)) - (((~m - ~n) + 1) / (~d * ~n)) * Antiderivative((~x) ^ (~m - ~n) * tan(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~m, ~n], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * cot(~(c') + ~(d') * (~x) ^ ~n) ^ 2, ~x) => ((-((~x) ^ ((~m - ~n) + 1)) * cot(~c + ~d * (~x) ^ ~n)) / (~d * ~n) - Antiderivative((~x) ^ ~m, ~x)) + (((~m - ~n) + 1) / (~d * ~n)) * Antiderivative((~x) ^ (~m - ~n) * cot(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~m, ~n], ~x)
    #= Antiderivative((~x)^(~m')*tan((~a')+(~b')*(~x)^(~n))^(~p),~x) :=  x^(m-n+1)*tan(a+b*x^n)^(p-1)/(b*n*(p-1)) - (m-n+1)/(b*n*(p-1))*Antiderivative(x^(m-n)*tan(a+b*x^n)^(p-1),x) - Antiderivative(x^m*tan(a+b*x^n)^(p-2),x) <-- FreeQ([a,b],x) && LtQ(0,n,m+1) &&  GtQ(p,1) =#
    #= Antiderivative((~x)^(~m')*cot((~a')+(~b')*(~x)^(~n))^(~p),~x) :=  -x^(m-n+1)*cot(a+b*x^n)^(p-1)/(b*n*(p-1)) + (m-n+1)/(b*n*(p-1))*Antiderivative(x^(m-n)*cot(a+b*x^n)^(p-1),x) - Antiderivative(x^m*cot(a+b*x^n)^(p-2),x) <-- FreeQ([a,b],x) && LtQ(0,n,m+1) &&  GtQ(p,1) =#
    #= Antiderivative((~x)^(~m')*tan((~a')+(~b')*(~x)^(~n))^(~p),~x) :=  x^(m-n+1)*tan(a+b*x^n)^(p+1)/(b*n*(p+1)) - (m-n+1)/(b*n*(p+1))*Antiderivative(x^(m-n)*tan(a+b*x^n)^(p+1),x) - Antiderivative(x^m*tan(a+b*x^n)^(p+2),x) <-- FreeQ([a,b],x) && LtQ(0,n,m+1) &&  LtQ(p,-1) =#
    #= Antiderivative((~x)^(~m')*cot((~a')+(~b')*(~x)^(~n))^(~p),~x) :=  -x^(m-n+1)*cot(a+b*x^n)^(p+1)/(b*n*(p+1)) + (m-n+1)/(b*n*(p+1))*Antiderivative(x^(m-n)*cot(a+b*x^n)^(p+1),x) - Antiderivative(x^m*cot(a+b*x^n)^(p+2),x) <-- FreeQ([a,b],x) && LtQ(0,n,m+1) &&  LtQ(p,-1) =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * tan(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~x) ^ ~m * (~a + ~b * tan(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cot(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~x) ^ ~m * (~a + ~b * cot(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * tan(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * tan(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * cot(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * cot(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * tan(~u)) ^ ~(p'), ~x) => Antiderivative((~e * ~x) ^ ~m * (~a + ~b * tan(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * cot(~u)) ^ ~(p'), ~x) => Antiderivative((~e * ~x) ^ ~m * (~a + ~b * cot(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~x) ^ ~(m') * sec(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * tan(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(q'), ~x) => ((~x) ^ ((~m - ~n) + 1) * sec(~a + ~b * (~x) ^ ~n) ^ ~p) / (~b * ~n * ~p) - (((~m - ~n) + 1) / (~b * ~n * ~p)) * Antiderivative((~x) ^ (~m - ~n) * sec(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (IntegerQ(~n) && (GeQ(~m, ~n) && EqQ(~q, 1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * csc(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * cot(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (-((~x) ^ ((~m - ~n) + 1)) * csc(~a + ~b * (~x) ^ ~n) ^ ~p) / (~b * ~n * ~p) + (((~m - ~n) + 1) / (~b * ~n * ~p)) * Antiderivative((~x) ^ (~m - ~n) * csc(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (IntegerQ(~n) && (GeQ(~m, ~n) && EqQ(~q, 1)))
end
