int_rules_4_1_9 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 4.1.9*trig^m*(a+b*sin^n+c*sin^(2*n))^p =#
    @apply_utils Antiderivative((~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative((~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative((~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative((~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative((~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(u * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(u * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative(1 / (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')), ~x) => Module([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], ((2 * ~c) / q) * Antiderivative(1 / ((~b - q) + 2 * ~c * sin(~d + ~e * ~x) ^ ~n), ~x) - ((2 * ~c) / q) * Antiderivative(1 / (~b + q + 2 * ~c * sin(~d + ~e * ~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0))
    @apply_utils Antiderivative(1 / (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')), ~x) => Module([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], ((2 * ~c) / q) * Antiderivative(1 / ((~b - q) + 2 * ~c * cos(~d + ~e * ~x) ^ ~n), ~x) - ((2 * ~c) / q) * Antiderivative(1 / (~b + q + 2 * ~c * cos(~d + ~e * ~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(sin(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(cos(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(sin(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(cos(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~n + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~n2) ^ ~p, ~x) => Module([f = FreeFactors(cot(~d + ~e * ~x), ~x)], (-f / ~e) * Subst(Antiderivative(ExpandToSum(~c + ~b * (1 + (~x) ^ 2) ^ (~n / 2) + ~a * (1 + (~x) ^ 2) ^ ~n, ~x) ^ ~p / (1 + f ^ 2 * (~x) ^ 2) ^ (~m / 2 + ~n * ~p + 1), ~x), ~x, cot(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~n / 2) && IntegerQ(~p)))))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~n + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~n2) ^ ~p, ~x) => Module([f = FreeFactors(tan(~d + ~e * ~x), ~x)], (f / ~e) * Subst(Antiderivative(ExpandToSum(~c + ~b * (1 + (~x) ^ 2) ^ (~n / 2) + ~a * (1 + (~x) ^ 2) ^ ~n, ~x) ^ ~p / (1 + f ^ 2 * (~x) ^ 2) ^ (~m / 2 + ~n * ~p + 1), ~x), ~x, tan(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~n / 2) && IntegerQ(~p)))))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => Antiderivative(ExpandTrig(sin(~d + ~e * ~x) ^ ~m * (~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~m, ~n, ~p)))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => Antiderivative(ExpandTrig(cos(~d + ~e * ~x) ^ ~m * (~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~m, ~n, ~p)))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * (~(f') * sin(~(d') + ~(e') * ~x)) ^ ~(n') + ~(c') * (~(f') * sin(~(d') + ~(e') * ~x)) ^ ~(n2')) ^ ~(p'), ~x) => Module([g = FreeFactors(sin(~d + ~e * ~x), ~x)], (g / ~e) * Subst(Antiderivative((1 - g ^ 2 * (~x) ^ 2) ^ ((~m - 1) / 2) * (~a + ~b * (~f * g * ~x) ^ ~n + ~c * (~f * g * ~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, sin(~d + ~e * ~x) / g)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ((~m - 1) / 2))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * (~(f') * cos(~(d') + ~(e') * ~x)) ^ ~(n') + ~(c') * (~(f') * cos(~(d') + ~(e') * ~x)) ^ ~(n2')) ^ ~(p'), ~x) => Module([g = FreeFactors(cos(~d + ~e * ~x), ~x)], (-g / ~e) * Subst(Antiderivative((1 - g ^ 2 * (~x) ^ 2) ^ ((~m - 1) / 2) * (~a + ~b * (~f * g * ~x) ^ ~n + ~c * (~f * g * ~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, cos(~d + ~e * ~x) / g)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ((~m - 1) / 2))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(cos(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(sin(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(cos(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(sin(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~n + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~n2) ^ ~(p'), ~x) => Module([f = FreeFactors(cot(~d + ~e * ~x), ~x)], (-(f ^ (~m + 1)) / ~e) * Subst(Antiderivative(((~x) ^ ~m * ExpandToSum(~c + ~b * (1 + (~x) ^ 2) ^ (~n / 2) + ~a * (1 + (~x) ^ 2) ^ ~n, ~x) ^ ~p) / (1 + f ^ 2 * (~x) ^ 2) ^ (~m / 2 + ~n * ~p + 1), ~x), ~x, cot(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~n / 2) && IntegerQ(~p)))))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~n + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~n2) ^ ~(p'), ~x) => Module([f = FreeFactors(tan(~d + ~e * ~x), ~x)], (f ^ (~m + 1) / ~e) * Subst(Antiderivative(((~x) ^ ~m * ExpandToSum(~c + ~b * (1 + (~x) ^ 2) ^ (~n / 2) + ~a * (1 + (~x) ^ 2) ^ ~n, ~x) ^ ~p) / (1 + f ^ 2 * (~x) ^ 2) ^ (~m / 2 + ~n * ~p + 1), ~x), ~x, tan(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~n / 2) && IntegerQ(~p)))))
    @apply_utils Antiderivative(cos(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandTrig((1 - sin(~d + ~e * ~x) ^ 2) ^ (~m / 2) * (~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~n, ~p))))
    @apply_utils Antiderivative(sin(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandTrig((1 - cos(~d + ~e * ~x) ^ 2) ^ (~m / 2) * (~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~n, ~p))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~(f') * sin(~(d') + ~(e') * ~x)) ^ ~n + ~(c') * (~(f') * sin(~(d') + ~(e') * ~x)) ^ ~(n2')) ^ ~(p'), ~x) => Module([g = FreeFactors(sin(~d + ~e * ~x), ~x)], (g ^ (~m + 1) / ~e) * Subst(Antiderivative(((~x) ^ ~m * (~a + ~b * (~f * g * ~x) ^ ~n + ~c * (~f * g * ~x) ^ (2 * ~n)) ^ ~p) / (1 - g ^ 2 * (~x) ^ 2) ^ ((~m + 1) / 2), ~x), ~x, sin(~d + ~e * ~x) / g)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IntegerQ((~m - 1) / 2) && IntegerQ(2 * ~p))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~(f') * cos(~(d') + ~(e') * ~x)) ^ ~n + ~(c') * (~(f') * cos(~(d') + ~(e') * ~x)) ^ ~(n2')) ^ ~(p'), ~x) => Module([g = FreeFactors(cos(~d + ~e * ~x), ~x)], (-(g ^ (~m + 1)) / ~e) * Subst(Antiderivative(((~x) ^ ~m * (~a + ~b * (~f * g * ~x) ^ ~n + ~c * (~f * g * ~x) ^ (2 * ~n)) ^ ~p) / (1 - g ^ 2 * (~x) ^ 2) ^ ((~m + 1) / 2), ~x), ~x, cos(~d + ~e * ~x) / g)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IntegerQ((~m - 1) / 2) && IntegerQ(2 * ~p))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(tan(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(cot(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(tan(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(cot(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~n + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~n2) ^ ~(p'), ~x) => Module([f = FreeFactors(tan(~d + ~e * ~x), ~x)], (f ^ (~m + 1) / ~e) * Subst(Antiderivative(((~x) ^ ~m * ExpandToSum(~c * (~x) ^ (2 * ~n) + ~b * (~x) ^ ~n * (1 + (~x) ^ 2) ^ (~n / 2) + ~a * (1 + (~x) ^ 2) ^ ~n, ~x) ^ ~p) / (1 + f ^ 2 * (~x) ^ 2) ^ (~n * ~p + 1), ~x), ~x, tan(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~n / 2) && IntegerQ(~p)))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~n + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~n2) ^ ~(p'), ~x) => Module([f = FreeFactors(cot(~d + ~e * ~x), ~x)], (-(f ^ (~m + 1)) / ~e) * Subst(Antiderivative(((~x) ^ ~m * ExpandToSum(~c * (~x) ^ (2 * ~n) + ~b * (~x) ^ ~n * (1 + (~x) ^ 2) ^ (~n / 2) + ~a * (1 + (~x) ^ 2) ^ ~n, ~x) ^ ~p) / (1 + f ^ 2 * (~x) ^ 2) ^ (~n * ~p + 1), ~x), ~x, cot(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(~n / 2) && IntegerQ(~p)))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandTrig((sin(~d + ~e * ~x) ^ ~m * (~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p) / (1 - sin(~d + ~e * ~x) ^ 2) ^ (~m / 2), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~n, ~p))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandTrig((cos(~d + ~e * ~x) ^ ~m * (~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p) / (1 - cos(~d + ~e * ~x) ^ 2) ^ (~m / 2), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~n, ~p))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~(f') * sin(~(d') + ~(e') * ~x)) ^ ~n + ~(c') * (~(f') * sin(~(d') + ~(e') * ~x)) ^ ~(n2')) ^ ~(p'), ~x) => Module([g = FreeFactors(sin(~d + ~e * ~x), ~x)], (g ^ (~m + 1) / ~e) * Subst(Antiderivative(((1 - g ^ 2 * (~x) ^ 2) ^ ((~m - 1) / 2) * (~a + ~b * (~f * g * ~x) ^ ~n + ~c * (~f * g * ~x) ^ (2 * ~n)) ^ ~p) / (~x) ^ ~m, ~x), ~x, sin(~d + ~e * ~x) / g)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IntegerQ((~m - 1) / 2) && IntegerQ(2 * ~p))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~(f') * cos(~(d') + ~(e') * ~x)) ^ ~n + ~(c') * (~(f') * cos(~(d') + ~(e') * ~x)) ^ ~(n2')) ^ ~(p'), ~x) => Module([g = FreeFactors(cos(~d + ~e * ~x), ~x)], (-(g ^ (~m + 1)) / ~e) * Subst(Antiderivative(((1 - g ^ 2 * (~x) ^ 2) ^ ((~m - 1) / 2) * (~a + ~b * (~f * g * ~x) ^ ~n + ~c * (~f * g * ~x) ^ (2 * ~n)) ^ ~p) / (~x) ^ ~m, ~x), ~x, cos(~d + ~e * ~x) / g)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IntegerQ((~m - 1) / 2) && IntegerQ(2 * ~p))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(cot(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / (4 ^ ~p * (~c) ^ ~p)) * Antiderivative(tan(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(cot(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * sin(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~m * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p)) * Antiderivative(tan(~d + ~e * ~x) ^ ~m * (~b + 2 * ~c * cos(~d + ~e * ~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ((~m - 1) / 2)) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~(m') * (~a + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~n + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~n2) ^ ~(p'), ~x) => Module([f = FreeFactors(cot(~d + ~e * ~x), ~x)], (-(f ^ (~m + 1)) / ~e) * Subst(Antiderivative(((~x) ^ ~m * ExpandToSum(~c + ~b * (1 + f ^ 2 * (~x) ^ 2) ^ (~n / 2) + ~a * (1 + f ^ 2 * (~x) ^ 2) ^ ~n, ~x) ^ ~p) / (1 + f ^ 2 * (~x) ^ 2) ^ (~n * ~p + 1), ~x), ~x, cot(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~n / 2) && IntegerQ(~p)))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~(m') * (~a + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~n + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~n2) ^ ~(p'), ~x) => Module([f = FreeFactors(tan(~d + ~e * ~x), ~x)], (f ^ (~m + 1) / ~e) * Subst(Antiderivative(((~x) ^ ~m * ExpandToSum(~c + ~b * (1 + f ^ 2 * (~x) ^ 2) ^ (~n / 2) + ~a * (1 + f ^ 2 * (~x) ^ 2) ^ ~n, ~x) ^ ~p) / (1 + f ^ 2 * (~x) ^ 2) ^ (~n * ~p + 1), ~x), ~x, tan(~d + ~e * ~x) / f)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~n / 2) && IntegerQ(~p)))
    @apply_utils Antiderivative(cot(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * sin(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandTrig(((1 - sin(~d + ~e * ~x) ^ 2) ^ (~m / 2) * (~a + ~b * sin(~d + ~e * ~x) ^ ~n + ~c * sin(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p) / sin(~d + ~e * ~x) ^ ~m, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~n, ~p))))
    @apply_utils Antiderivative(tan(~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) ^ ~(n') + ~(c') * cos(~(d') + ~(e') * ~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandTrig(((1 - cos(~d + ~e * ~x) ^ 2) ^ (~m / 2) * (~a + ~b * cos(~d + ~e * ~x) ^ ~n + ~c * cos(~d + ~e * ~x) ^ (2 * ~n)) ^ ~p) / cos(~d + ~e * ~x) ^ ~m, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(~m / 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegersQ(~n, ~p))))
    @apply_utils Antiderivative((~A + ~(B') * sin(~(d') + ~(e') * ~x)) * (~a + ~(b') * sin(~(d') + ~(e') * ~x) + ~(c') * sin(~(d') + ~(e') * ~x) ^ 2) ^ ~n, ~x) => (1 / (4 ^ ~n * (~c) ^ ~n)) * Antiderivative((~A + ~B * sin(~d + ~e * ~x)) * (~b + 2 * ~c * sin(~d + ~e * ~x)) ^ (2 * ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~n))
    @apply_utils Antiderivative((~A + ~(B') * cos(~(d') + ~(e') * ~x)) * (~a + ~(b') * cos(~(d') + ~(e') * ~x) + ~(c') * cos(~(d') + ~(e') * ~x) ^ 2) ^ ~n, ~x) => (1 / (4 ^ ~n * (~c) ^ ~n)) * Antiderivative((~A + ~B * cos(~d + ~e * ~x)) * (~b + 2 * ~c * cos(~d + ~e * ~x)) ^ (2 * ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~n))
    @apply_utils Antiderivative((~A + ~(B') * sin(~(d') + ~(e') * ~x)) * (~a + ~(b') * sin(~(d') + ~(e') * ~x) + ~(c') * sin(~(d') + ~(e') * ~x) ^ 2) ^ ~n, ~x) => ((~a + ~b * sin(~d + ~e * ~x) + ~c * sin(~d + ~e * ~x) ^ 2) ^ ~n / (~b + 2 * ~c * sin(~d + ~e * ~x)) ^ (2 * ~n)) * Antiderivative((~A + ~B * sin(~d + ~e * ~x)) * (~b + 2 * ~c * sin(~d + ~e * ~x)) ^ (2 * ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~n)))
    @apply_utils Antiderivative((~A + ~(B') * cos(~(d') + ~(e') * ~x)) * (~a + ~(b') * cos(~(d') + ~(e') * ~x) + ~(c') * cos(~(d') + ~(e') * ~x) ^ 2) ^ ~n, ~x) => ((~a + ~b * cos(~d + ~e * ~x) + ~c * cos(~d + ~e * ~x) ^ 2) ^ ~n / (~b + 2 * ~c * cos(~d + ~e * ~x)) ^ (2 * ~n)) * Antiderivative((~A + ~B * cos(~d + ~e * ~x)) * (~b + 2 * ~c * cos(~d + ~e * ~x)) ^ (2 * ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~n)))
    @apply_utils Antiderivative((~A + ~(B') * sin(~(d') + ~(e') * ~x)) / (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) + ~(c') * sin(~(d') + ~(e') * ~x) ^ 2), ~x) => Module([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (~B + (~b * ~B - 2 * ~A * ~c) / q) * Antiderivative(1 / (~b + q + 2 * ~c * sin(~d + ~e * ~x)), ~x) + (~B - (~b * ~B - 2 * ~A * ~c) / q) * Antiderivative(1 / ((~b - q) + 2 * ~c * sin(~d + ~e * ~x)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0)
    @apply_utils Antiderivative((~A + ~(B') * cos(~(d') + ~(e') * ~x)) / (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) + ~(c') * cos(~(d') + ~(e') * ~x) ^ 2), ~x) => Module([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (~B + (~b * ~B - 2 * ~A * ~c) / q) * Antiderivative(1 / (~b + q + 2 * ~c * cos(~d + ~e * ~x)), ~x) + (~B - (~b * ~B - 2 * ~A * ~c) / q) * Antiderivative(1 / ((~b - q) + 2 * ~c * cos(~d + ~e * ~x)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0)
    @apply_utils Antiderivative((~A + ~(B') * sin(~(d') + ~(e') * ~x)) * (~(a') + ~(b') * sin(~(d') + ~(e') * ~x) + ~(c') * sin(~(d') + ~(e') * ~x) ^ 2) ^ ~n, ~x) => Antiderivative(ExpandTrig((~A + ~B * sin(~d + ~e * ~x)) * (~a + ~b * sin(~d + ~e * ~x) + ~c * sin(~d + ~e * ~x) ^ 2) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~n))
    @apply_utils Antiderivative((~A + ~(B') * cos(~(d') + ~(e') * ~x)) * (~(a') + ~(b') * cos(~(d') + ~(e') * ~x) + ~(c') * cos(~(d') + ~(e') * ~x) ^ 2) ^ ~n, ~x) => Antiderivative(ExpandTrig((~A + ~B * cos(~d + ~e * ~x)) * (~a + ~b * cos(~d + ~e * ~x) + ~c * cos(~d + ~e * ~x) ^ 2) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IntegerQ(~n))
end
