int_rules_4_5_1_3 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 4.5.1.3*(d*sin)^n*(a+b*sec)^m =#
    @apply_utils Antiderivative((~(g') * cos(~(e') + ~(f') * ~x)) ^ ~(p') * (~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~(m'), ~x) => Antiderivative(((~g * cos(~e + ~f * ~x)) ^ ~p * (~b + ~a * sin(~e + ~f * ~x)) ^ ~m) / sin(~e + ~f * ~x) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~e, ~f, ~g, ~p], ~x) && IntegerQ(~m)
    @apply_utils Antiderivative(cos(~(e') + ~(f') * ~x) ^ ~(p') * (~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~m, ~x) => (-1 / (~f * (~b) ^ (~p - 1))) * Subst(Antiderivative(((-(~a) + ~b * ~x) ^ ((~p - 1) / 2) * (~a + ~b * ~x) ^ (~m + (~p - 1) / 2)) / (~x) ^ (~p + 1), ~x), ~x, csc(~e + ~f * ~x)) <-- FreeQ([~a, ~b, ~e, ~f, ~m], ~x) && (IntegerQ((~p - 1) / 2) && EqQ((~a) ^ 2 - (~b) ^ 2, 0))
    @apply_utils Antiderivative(cos(~(e') + ~(f') * ~x) ^ ~(p') * (~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~m, ~x) => (-1 / ~f) * Subst(Antiderivative(((-1 + ~x) ^ ((~p - 1) / 2) * (1 + ~x) ^ ((~p - 1) / 2) * (~a + ~b * ~x) ^ ~m) / (~x) ^ (~p + 1), ~x), ~x, csc(~e + ~f * ~x)) <-- FreeQ([~a, ~b, ~e, ~f, ~m], ~x) && (IntegerQ((~p - 1) / 2) && NeQ((~a) ^ 2 - (~b) ^ 2, 0))
    @apply_utils Antiderivative((~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~m / cos(~(e') + ~(f') * ~x) ^ 2, ~x) => (tan(~e + ~f * ~x) * (~a + ~b * csc(~e + ~f * ~x)) ^ ~m) / ~f + ~b * ~m * Antiderivative(csc(~e + ~f * ~x) * (~a + ~b * csc(~e + ~f * ~x)) ^ (~m - 1), ~x) <-- FreeQ([~a, ~b, ~e, ~f, ~m], ~x)
    @apply_utils Antiderivative((~(g') * cos(~(e') + ~(f') * ~x)) ^ ~(p') * (~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~m, ~x) => ((sin(~e + ~f * ~x) ^ FracPart(~m) * (~a + ~b * csc(~e + ~f * ~x)) ^ FracPart(~m)) / (~b + ~a * sin(~e + ~f * ~x)) ^ FracPart(~m)) * Antiderivative(((~g * cos(~e + ~f * ~x)) ^ ~p * (~b + ~a * sin(~e + ~f * ~x)) ^ ~m) / sin(~e + ~f * ~x) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~e, ~f, ~g, ~m, ~p], ~x) && (EqQ((~a) ^ 2 - (~b) ^ 2, 0) || IntegersQ(2 * ~m, ~p))
    @apply_utils Antiderivative((~(g') * cos(~(e') + ~(f') * ~x)) ^ ~(p') * (~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~(m'), ~x) => Unintegrable((~g * cos(~e + ~f * ~x)) ^ ~p * (~a + ~b * csc(~e + ~f * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~e, ~f, ~g, ~m, ~p], ~x)
    #= Antiderivative(((~g')*sec((~e')+(~f')*(~x)))^(~p)*((~a)+(~b')*csc((~e')+(~f')*(~x)))^(~m'),~x)  := Antiderivative((g*sec(e+f*x))^p*(b+a*sin(e+f*x))^m/sin(e+f*x)^m,x) <--  FreeQ([a,b,e,f,g,p],x) && Not(IntegerQ(p)) && IntegerQ(m) =#
    @apply_utils Antiderivative((~(g') * sec(~(e') + ~(f') * ~x)) ^ ~p * (~a + ~(b') * csc(~(e') + ~(f') * ~x)) ^ ~(m'), ~x) => (~g) ^ IntPart(~p) * (~g * sec(~e + ~f * ~x)) ^ FracPart(~p) * cos(~e + ~f * ~x) ^ FracPart(~p) * Antiderivative((~a + ~b * csc(~e + ~f * ~x)) ^ ~m / cos(~e + ~f * ~x) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~f, ~g, ~m, ~p], ~x) && Not(IntegerQ(~p))
end
