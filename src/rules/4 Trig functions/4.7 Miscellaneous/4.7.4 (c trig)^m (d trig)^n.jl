int_rules_4_7_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 4.7.4*(c*trig)^m*(d*trig)^n =#
    @apply_utils Antiderivative(sin(~(a') + ~(b') * ~x) * sin(~(c') + ~(d') * ~x), ~x) => sin((~a - ~c) + (~b - ~d) * ~x) / (2 * (~b - ~d)) - sin(~a + ~c + (~b + ~d) * ~x) / (2 * (~b + ~d)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && NeQ((~b) ^ 2 - (~d) ^ 2, 0)
    @apply_utils Antiderivative(cos(~(a') + ~(b') * ~x) * cos(~(c') + ~(d') * ~x), ~x) => sin((~a - ~c) + (~b - ~d) * ~x) / (2 * (~b - ~d)) + sin(~a + ~c + (~b + ~d) * ~x) / (2 * (~b + ~d)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && NeQ((~b) ^ 2 - (~d) ^ 2, 0)
    @apply_utils Antiderivative(sin(~(a') + ~(b') * ~x) * cos(~(c') + ~(d') * ~x), ~x) => -(cos((~a - ~c) + (~b - ~d) * ~x)) / (2 * (~b - ~d)) - cos(~a + ~c + (~b + ~d) * ~x) / (2 * (~b + ~d)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && NeQ((~b) ^ 2 - (~d) ^ 2, 0)
    @apply_utils Antiderivative(cos(~(a') + ~(b') * ~x) ^ 2 * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (1 / 2) * Antiderivative((~g * sin(~c + ~d * ~x)) ^ ~p, ~x) + (1 / 2) * Antiderivative(cos(~c + ~d * ~x) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && IGtQ(~p / 2, 0)))
    @apply_utils Antiderivative(sin(~(a') + ~(b') * ~x) ^ 2 * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (1 / 2) * Antiderivative((~g * sin(~c + ~d * ~x)) ^ ~p, ~x) - (1 / 2) * Antiderivative(cos(~c + ~d * ~x) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && IGtQ(~p / 2, 0)))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * sin(~(c') + ~(d') * ~x) ^ ~(p'), ~x) => (2 ^ ~p / (~e) ^ ~p) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + ~p) * sin(~a + ~b * ~x) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && IntegerQ(~p)))
    @apply_utils Antiderivative((~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * sin(~(c') + ~(d') * ~x) ^ ~(p'), ~x) => (2 ^ ~p / (~f) ^ ~p) * Antiderivative(cos(~a + ~b * ~x) ^ ~p * (~f * sin(~a + ~b * ~x)) ^ (~n + ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~f, ~n], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && IntegerQ(~p)))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e) ^ 2 * (~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~m, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && EqQ((~m + ~p) - 1, 0))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e) ^ 2) * (~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~m, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && EqQ((~m + ~p) - 1, 0))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * cos(~a + ~b * ~x)) ^ ~m) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (~b * ~g * ~m) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~m, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && EqQ(~m + 2 * ~p + 2, 0))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~(m') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e * sin(~a + ~b * ~x)) ^ ~m * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (~b * ~g * ~m) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~m, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && EqQ(~m + 2 * ~p + 2, 0))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e) ^ 2 * (~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) + (((~e) ^ 4 * ((~m + ~p) - 1)) / (4 * (~g) ^ 2 * (~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 4) * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 2) && (LtQ(~p, -1) && ((GtQ(~m, 3) || EqQ(~p, -3 / 2)) && IntegersQ(2 * ~m, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e) ^ 2) * (~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) + (((~e) ^ 4 * ((~m + ~p) - 1)) / (4 * (~g) ^ 2 * (~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 4) * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 2) && (LtQ(~p, -1) && ((GtQ(~m, 3) || EqQ(~p, -3 / 2)) && IntegersQ(2 * ~m, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e * cos(~a + ~b * ~x)) ^ ~m * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) + (((~e) ^ 2 * (~m + 2 * ~p + 2)) / (4 * (~g) ^ 2 * (~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (LtQ(~p, -1) && (NeQ(~m + 2 * ~p + 2, 0) && ((LtQ(~p, -2) || EqQ(~m, 2)) && IntegersQ(2 * ~m, 2 * ~p))))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * sin(~a + ~b * ~x)) ^ ~m) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) + (((~e) ^ 2 * (~m + 2 * ~p + 2)) / (4 * (~g) ^ 2 * (~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (LtQ(~p, -1) && (NeQ(~m + 2 * ~p + 2, 0) && ((LtQ(~p, -2) || EqQ(~m, 2)) && IntegersQ(2 * ~m, 2 * ~p))))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e) ^ 2 * (~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~m + 2 * ~p)) + (((~e) ^ 2 * ((~m + ~p) - 1)) / (~m + 2 * ~p)) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (NeQ(~m + 2 * ~p, 0) && IntegersQ(2 * ~m, 2 * ~p))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e) ^ 2) * (~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~m + 2 * ~p)) + (((~e) ^ 2 * ((~m + ~p) - 1)) / (~m + 2 * ~p)) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (NeQ(~m + 2 * ~p, 0) && IntegersQ(2 * ~m, 2 * ~p))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * cos(~a + ~b * ~x)) ^ ~m) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~m + ~p + 1)) + ((~m + 2 * ~p + 2) / ((~e) ^ 2 * (~m + ~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + 2) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (NeQ(~m + 2 * ~p + 2, 0) && (NeQ(~m + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e * sin(~a + ~b * ~x)) ^ ~m * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~m + ~p + 1)) + ((~m + 2 * ~p + 2) / ((~e) ^ 2 * (~m + ~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m + 2) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (NeQ(~m + 2 * ~p + 2, 0) && (NeQ(~m + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~p)))))))
    @apply_utils Antiderivative(cos(~(a') + ~(b') * ~x) * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (2 * sin(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~d * (2 * ~p + 1)) + ((2 * ~p * ~g) / (2 * ~p + 1)) * Antiderivative(sin(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~p, 0) && IntegerQ(2 * ~p)))))
    @apply_utils Antiderivative(sin(~(a') + ~(b') * ~x) * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-2 * cos(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~d * (2 * ~p + 1)) + ((2 * ~p * ~g) / (2 * ~p + 1)) * Antiderivative(cos(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~p, 0) && IntegerQ(2 * ~p)))))
    @apply_utils Antiderivative(cos(~(a') + ~(b') * ~x) * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (cos(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) + ((2 * ~p + 3) / (2 * ~g * (~p + 1))) * Antiderivative(sin(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~p, -1) && IntegerQ(2 * ~p)))))
    @apply_utils Antiderivative(sin(~(a') + ~(b') * ~x) * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-(sin(~a + ~b * ~x)) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~p + 1)) + ((2 * ~p + 3) / (2 * ~g * (~p + 1))) * Antiderivative(cos(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~p, -1) && IntegerQ(2 * ~p)))))
    @apply_utils Antiderivative(cos(~(a') + ~(b') * ~x) / sqrt(sin(~(c') + ~(d') * ~x)), ~x) => -(asin(cos(~a + ~b * ~x) - sin(~a + ~b * ~x))) / ~d + log(cos(~a + ~b * ~x) + sin(~a + ~b * ~x) + sqrt(sin(~c + ~d * ~x))) / ~d <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && EqQ(~d / ~b, 2))
    @apply_utils Antiderivative(sin(~(a') + ~(b') * ~x) / sqrt(sin(~(c') + ~(d') * ~x)), ~x) => -(asin(cos(~a + ~b * ~x) - sin(~a + ~b * ~x))) / ~d - log(cos(~a + ~b * ~x) + sin(~a + ~b * ~x) + sqrt(sin(~c + ~d * ~x))) / ~d <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && EqQ(~d / ~b, 2))
    @apply_utils Antiderivative((~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p / cos(~(a') + ~(b') * ~x), ~x) => 2 * ~g * Antiderivative(sin(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && IntegerQ(2 * ~p))))
    @apply_utils Antiderivative((~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p / sin(~(a') + ~(b') * ~x), ~x) => 2 * ~g * Antiderivative(cos(~a + ~b * ~x) * (~g * sin(~c + ~d * ~x)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && IntegerQ(2 * ~p))))
    #= Antiderivative(((~e')*cos((~a')+(~b')*(~x)))^(~m)*((~g')*sin((~c')+(~d')*(~x)))^(~p),~x) :=   -(e*cos(a+b*x))^(m+1)*sin(a+b*x)*(g*sin(c+d*x))^p/(b*e*(m+p+1)*(sin( a+b*x)^2)^((p+1)/2))* HypergeometricFunctions._₂F₁(-(p-1)/2,(m+p+1)/2,(m+p+3)/2,cos(a+b*x)^2) <--  FreeQ([a,b,c,d,e,g,m,p],x) && EqQ(b*c-a*d,0) && EqQ(d/b,2) &&  Not(IntegerQ(p)) && Not(IntegerQ(m+p)) =#
    #= Antiderivative(((~f')*sin((~a')+(~b')*(~x)))^(~n')*((~g')*sin((~c')+(~d')*(~x)))^(~p),~x) :=   -cos(a+b*x)*(f*sin(a+b*x))^(n+1)*(g*sin(c+d*x))^p/(b*f*(p+1)*(sin(a+ b*x)^2)^((n+p+1)/2))* HypergeometricFunctions._₂F₁(-(n+p-1)/2,(p+1)/2,(p+3)/2,cos(a+b*x)^2) <--  FreeQ([a,b,c,d,f,g,n,p],x) && EqQ(b*c-a*d,0) && EqQ(d/b,2) &&  Not(IntegerQ(p)) && Not(IntegerQ(n+p)) =#
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~g * sin(~c + ~d * ~x)) ^ ~p / ((~e * cos(~a + ~b * ~x)) ^ ~p * sin(~a + ~b * ~x) ^ ~p)) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + ~p) * sin(~a + ~b * ~x) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~g, ~m, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~g * sin(~c + ~d * ~x)) ^ ~p / (cos(~a + ~b * ~x) ^ ~p * (~f * sin(~a + ~b * ~x)) ^ ~p)) * Antiderivative(cos(~a + ~b * ~x) ^ ~p * (~f * sin(~a + ~b * ~x)) ^ (~n + ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~f, ~g, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative(cos(~(a') + ~(b') * ~x) ^ 2 * sin(~(a') + ~(b') * ~x) ^ 2 * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (1 / 4) * Antiderivative((~g * sin(~c + ~d * ~x)) ^ ~p, ~x) - (1 / 4) * Antiderivative(cos(~c + ~d * ~x) ^ 2 * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && IGtQ(~p / 2, 0)))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * sin(~(c') + ~(d') * ~x) ^ ~(p'), ~x) => (2 ^ ~p / ((~e) ^ ~p * (~f) ^ ~p)) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + ~p) * (~f * sin(~a + ~b * ~x)) ^ (~n + ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && IntegerQ(~p)))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (~e * (~e * cos(~a + ~b * ~x)) ^ (~m - 1) * (~f * sin(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~f * (~n + ~p + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && EqQ(~m + ~p + 1, 0))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~n * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-(~e) * (~e * sin(~a + ~b * ~x)) ^ (~m - 1) * (~f * cos(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~f * (~n + ~p + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && EqQ(~m + ~p + 1, 0))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * cos(~a + ~b * ~x)) ^ (~m + 1)) * (~f * sin(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * ~f * (~m + ~p + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (EqQ(~m + ~n + 2 * ~p + 2, 0) && NeQ(~m + ~p + 1, 0)))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~n * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e) ^ 2 * (~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~f * sin(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~n + ~p + 1)) + (((~e) ^ 4 * ((~m + ~p) - 1)) / (4 * (~g) ^ 2 * (~n + ~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 4) * (~f * sin(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 3) && (LtQ(~p, -1) && (NeQ(~n + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~n * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e) ^ 2) * (~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~f * cos(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~n + ~p + 1)) + (((~e) ^ 4 * ((~m + ~p) - 1)) / (4 * (~g) ^ 2 * (~n + ~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 4) * (~f * cos(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 3) && (LtQ(~p, -1) && (NeQ(~n + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e * cos(~a + ~b * ~x)) ^ ~m * (~f * sin(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~n + ~p + 1)) + (((~e) ^ 2 * (~m + ~n + 2 * ~p + 2)) / (4 * (~g) ^ 2 * (~n + ~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~f * sin(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (LtQ(~p, -1) && (NeQ(~m + ~n + 2 * ~p + 2, 0) && (NeQ(~n + ~p + 1, 0) && (IntegersQ(2 * ~m, 2 * ~n, 2 * ~p) && (LtQ(~p, -2) || (EqQ(~m, 2) || EqQ(~m, 3)))))))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * sin(~a + ~b * ~x)) ^ ~m) * (~f * cos(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 1)) / (2 * ~b * ~g * (~n + ~p + 1)) + (((~e) ^ 2 * (~m + ~n + 2 * ~p + 2)) / (4 * (~g) ^ 2 * (~n + ~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~f * cos(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (LtQ(~p, -1) && (NeQ(~m + ~n + 2 * ~p + 2, 0) && (NeQ(~n + ~p + 1, 0) && (IntegersQ(2 * ~m, 2 * ~n, 2 * ~p) && (LtQ(~p, -2) || (EqQ(~m, 2) || EqQ(~m, 3)))))))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~n * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (~e * (~e * cos(~a + ~b * ~x)) ^ (~m - 1) * (~f * sin(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~f * (~n + ~p + 1)) + (((~e) ^ 2 * ((~m + ~p) - 1)) / ((~f) ^ 2 * (~n + ~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~f * sin(~a + ~b * ~x)) ^ (~n + 2) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (LtQ(~n, -1) && (NeQ(~n + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~n * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-(~e) * (~e * sin(~a + ~b * ~x)) ^ (~m - 1) * (~f * cos(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~f * (~n + ~p + 1)) + (((~e) ^ 2 * ((~m + ~p) - 1)) / ((~f) ^ 2 * (~n + ~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~f * cos(~a + ~b * ~x)) ^ (~n + 2) * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (LtQ(~n, -1) && (NeQ(~n + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (~e * (~e * cos(~a + ~b * ~x)) ^ (~m - 1) * (~f * sin(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~f * (~m + ~n + 2 * ~p)) + (((~e) ^ 2 * ((~m + ~p) - 1)) / (~m + ~n + 2 * ~p)) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m - 2) * (~f * sin(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (NeQ(~m + ~n + 2 * ~p, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-(~e) * (~e * sin(~a + ~b * ~x)) ^ (~m - 1) * (~f * cos(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~f * (~m + ~n + 2 * ~p)) + (((~e) ^ 2 * ((~m + ~p) - 1)) / (~m + ~n + 2 * ~p)) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m - 2) * (~f * cos(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (GtQ(~m, 1) && (NeQ(~m + ~n + 2 * ~p, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-(~f) * (~e * cos(~a + ~b * ~x)) ^ (~m + 1) * (~f * sin(~a + ~b * ~x)) ^ (~n - 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * (~m + ~n + 2 * ~p)) + ((2 * ~f * ~g * ((~n + ~p) - 1)) / (~e * (~m + ~n + 2 * ~p))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + 1) * (~f * sin(~a + ~b * ~x)) ^ (~n - 1) * (~g * sin(~c + ~d * ~x)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (GtQ(~n, 0) && (GtQ(~p, 0) && (NeQ(~m + ~n + 2 * ~p, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p))))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (~f * (~e * sin(~a + ~b * ~x)) ^ (~m + 1) * (~f * cos(~a + ~b * ~x)) ^ (~n - 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * (~m + ~n + 2 * ~p)) + ((2 * ~f * ~g * ((~n + ~p) - 1)) / (~e * (~m + ~n + 2 * ~p))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m + 1) * (~f * cos(~a + ~b * ~x)) ^ (~n - 1) * (~g * sin(~c + ~d * ~x)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (GtQ(~n, 0) && (GtQ(~p, 0) && (NeQ(~m + ~n + 2 * ~p, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p))))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * cos(~a + ~b * ~x)) ^ (~m + 1)) * (~f * sin(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * ~f * (~m + ~p + 1)) + ((~f * (~m + ~n + 2 * ~p + 2)) / (2 * ~e * ~g * (~m + ~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + 1) * (~f * sin(~a + ~b * ~x)) ^ (~n - 1) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (GtQ(~n, 0) && (LtQ(~p, -1) && (NeQ(~m + ~n + 2 * ~p + 2, 0) && (NeQ(~m + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e * sin(~a + ~b * ~x)) ^ (~m + 1) * (~f * cos(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * ~f * (~m + ~p + 1)) + ((~f * (~m + ~n + 2 * ~p + 2)) / (2 * ~e * ~g * (~m + ~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m + 1) * (~f * cos(~a + ~b * ~x)) ^ (~n - 1) * (~g * sin(~c + ~d * ~x)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (GtQ(~n, 0) && (LtQ(~p, -1) && (NeQ(~m + ~n + 2 * ~p + 2, 0) && (NeQ(~m + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => (-((~e * cos(~a + ~b * ~x)) ^ (~m + 1)) * (~f * sin(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * ~f * (~m + ~p + 1)) + ((~m + ~n + 2 * ~p + 2) / ((~e) ^ 2 * (~m + ~p + 1))) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + 2) * (~f * sin(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (NeQ(~m + ~n + 2 * ~p + 2, 0) && (NeQ(~m + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))
    @apply_utils Antiderivative((~(e') * sin(~(a') + ~(b') * ~x)) ^ ~m * (~(f') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~e * sin(~a + ~b * ~x)) ^ (~m + 1) * (~f * cos(~a + ~b * ~x)) ^ (~n + 1) * (~g * sin(~c + ~d * ~x)) ^ ~p) / (~b * ~e * ~f * (~m + ~p + 1)) + ((~m + ~n + 2 * ~p + 2) / ((~e) ^ 2 * (~m + ~p + 1))) * Antiderivative((~e * sin(~a + ~b * ~x)) ^ (~m + 2) * (~f * cos(~a + ~b * ~x)) ^ ~n * (~g * sin(~c + ~d * ~x)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && (Not(IntegerQ(~p)) && (LtQ(~m, -1) && (NeQ(~m + ~n + 2 * ~p + 2, 0) && (NeQ(~m + ~p + 1, 0) && IntegersQ(2 * ~m, 2 * ~n, 2 * ~p)))))))
    #= Antiderivative(((~e')*cos((~a')+(~b')*(~x)))^(~m)*((~f')*sin((~a')+(~b')*(~x)))^(~n')*((~g')*sin((~c') +(~d')*(~x)))^(~p),~x) :=  -(e*cos(a+b*x))^(m+1)*(f*sin(a+b*x))^(n+1)*(g*sin(c+d*x))^p/(b*e*f*(m+ p+1)*(sin(a+b*x)^2)^((n+p+1)/2))* HypergeometricFunctions._₂F₁(-(n+p-1)/2,(m+p+1)/2,(m+p+3)/2,cos(a+b*x)^2) <--  FreeQ([a,b,c,d,e,f,g,m,n,p],x) && EqQ(b*c-a*d,0) && EqQ(d/b,2) &&  Not(IntegerQ(p)) && Not(IntegerQ(m+p)) && Not(IntegerQ(n+p)) =#
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * (~(f') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(g') * sin(~(c') + ~(d') * ~x)) ^ ~p, ~x) => ((~g * sin(~c + ~d * ~x)) ^ ~p / ((~e * cos(~a + ~b * ~x)) ^ ~p * (~f * sin(~a + ~b * ~x)) ^ ~p)) * Antiderivative((~e * cos(~a + ~b * ~x)) ^ (~m + ~p) * (~f * sin(~a + ~b * ~x)) ^ (~n + ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && (EqQ(~d / ~b, 2) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~(e') * cos(~(a') + ~(b') * ~x)) ^ ~(m') * sin(~(c') + ~(d') * ~x), ~x) => (-((~m + 2)) * (~e * cos(~a + ~b * ~x)) ^ (~m + 1) * cos((~m + 1) * (~a + ~b * ~x))) / (~d * ~e * (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (EqQ(~b * ~c - ~a * ~d, 0) && EqQ(~d / ~b, Abs(~m + 2)))
end
