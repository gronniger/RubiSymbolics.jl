int_rules_4_7_1 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 4.7.1*Sine*normalization*rules =#
    @apply_utils Antiderivative(~u * (~(c') * tan(~(a') + ~(b') * ~x)) ^ ~(m') * (~(d') * sin(~(a') + ~(b') * ~x)) ^ ~(n'), ~x) => (((~c * tan(~a + ~b * ~x)) ^ ~m * (~d * cos(~a + ~b * ~x)) ^ ~m) / (~d * sin(~a + ~b * ~x)) ^ ~m) * Antiderivative((ActivateTrig(~u) * (~d * sin(~a + ~b * ~x)) ^ (~m + ~n)) / (~d * cos(~a + ~b * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (KnownSineIntegrandQ(~u, ~x) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative(~u * (~(c') * tan(~(a') + ~(b') * ~x)) ^ ~(m') * (~(d') * cos(~(a') + ~(b') * ~x)) ^ ~(n'), ~x) => (((~c * tan(~a + ~b * ~x)) ^ ~m * (~d * cos(~a + ~b * ~x)) ^ ~m) / (~d * sin(~a + ~b * ~x)) ^ ~m) * Antiderivative((ActivateTrig(~u) * (~d * sin(~a + ~b * ~x)) ^ ~m) / (~d * cos(~a + ~b * ~x)) ^ (~m - ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (KnownSineIntegrandQ(~u, ~x) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative(~u * (~(c') * cot(~(a') + ~(b') * ~x)) ^ ~(m') * (~(d') * sin(~(a') + ~(b') * ~x)) ^ ~(n'), ~x) => (((~c * cot(~a + ~b * ~x)) ^ ~m * (~d * sin(~a + ~b * ~x)) ^ ~m) / (~d * cos(~a + ~b * ~x)) ^ ~m) * Antiderivative((ActivateTrig(~u) * (~d * cos(~a + ~b * ~x)) ^ ~m) / (~d * sin(~a + ~b * ~x)) ^ (~m - ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (KnownSineIntegrandQ(~u, ~x) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative(~u * (~(c') * cot(~(a') + ~(b') * ~x)) ^ ~(m') * (~(d') * cos(~(a') + ~(b') * ~x)) ^ ~(n'), ~x) => (((~c * cot(~a + ~b * ~x)) ^ ~m * (~d * sin(~a + ~b * ~x)) ^ ~m) / (~d * cos(~a + ~b * ~x)) ^ ~m) * Antiderivative((ActivateTrig(~u) * (~d * cos(~a + ~b * ~x)) ^ (~m + ~n)) / (~d * sin(~a + ~b * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (KnownSineIntegrandQ(~u, ~x) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative(~u * (~(c') * sec(~(a') + ~(b') * ~x)) ^ ~(m') * (~(d') * cos(~(a') + ~(b') * ~x)) ^ ~(n'), ~x) => (~c * sec(~a + ~b * ~x)) ^ ~m * (~d * cos(~a + ~b * ~x)) ^ ~m * Antiderivative(ActivateTrig(~u) * (~d * cos(~a + ~b * ~x)) ^ (~n - ~m), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~(c') * sec(~(a') + ~(b') * ~x)) ^ ~(m') * (~(d') * cos(~(a') + ~(b') * ~x)) ^ ~(n'), ~x) => (~c * csc(~a + ~b * ~x)) ^ ~m * (~d * sin(~a + ~b * ~x)) ^ ~m * Antiderivative(ActivateTrig(~u) * (~d * sin(~a + ~b * ~x)) ^ (~n - ~m), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~(c') * tan(~(a') + ~(b') * ~x)) ^ ~(m'), ~x) => (((~c * tan(~a + ~b * ~x)) ^ ~m * (~c * cos(~a + ~b * ~x)) ^ ~m) / (~c * sin(~a + ~b * ~x)) ^ ~m) * Antiderivative((ActivateTrig(~u) * (~c * sin(~a + ~b * ~x)) ^ ~m) / (~c * cos(~a + ~b * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (Not(IntegerQ(~m)) && KnownSineIntegrandQ(~u, ~x))
    @apply_utils Antiderivative(~u * (~(c') * cot(~(a') + ~(b') * ~x)) ^ ~(m'), ~x) => (((~c * cot(~a + ~b * ~x)) ^ ~m * (~c * sin(~a + ~b * ~x)) ^ ~m) / (~c * cos(~a + ~b * ~x)) ^ ~m) * Antiderivative((ActivateTrig(~u) * (~c * cos(~a + ~b * ~x)) ^ ~m) / (~c * sin(~a + ~b * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (Not(IntegerQ(~m)) && KnownSineIntegrandQ(~u, ~x))
    @apply_utils Antiderivative(~u * (~(c') * sec(~(a') + ~(b') * ~x)) ^ ~(m'), ~x) => (~c * sec(~a + ~b * ~x)) ^ ~m * (~c * cos(~a + ~b * ~x)) ^ ~m * Antiderivative(ActivateTrig(~u) / (~c * cos(~a + ~b * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (Not(IntegerQ(~m)) && KnownSineIntegrandQ(~u, ~x))
    @apply_utils Antiderivative(~u * (~(c') * csc(~(a') + ~(b') * ~x)) ^ ~(m'), ~x) => (~c * csc(~a + ~b * ~x)) ^ ~m * (~c * sin(~a + ~b * ~x)) ^ ~m * Antiderivative(ActivateTrig(~u) / (~c * sin(~a + ~b * ~x)) ^ ~m, ~x) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (Not(IntegerQ(~m)) && KnownSineIntegrandQ(~u, ~x))
    @apply_utils Antiderivative(~u * (~(c') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~A + ~(B') * csc(~(a') + ~(b') * ~x)), ~x) => ~c * Antiderivative(ActivateTrig(~u) * (~c * sin(~a + ~b * ~x)) ^ (~n - 1) * (~B + ~A * sin(~a + ~b * ~x)), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~(c') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~A + ~(B') * sec(~(a') + ~(b') * ~x)), ~x) => ~c * Antiderivative(ActivateTrig(~u) * (~c * cos(~a + ~b * ~x)) ^ (~n - 1) * (~B + ~A * cos(~a + ~b * ~x)), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~A + ~(B') * csc(~(a') + ~(b') * ~x)), ~x) => Antiderivative((ActivateTrig(~u) * (~B + ~A * sin(~a + ~b * ~x))) / sin(~a + ~b * ~x), ~x) <-- FreeQ([~a, ~b, ~A, ~B], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~A + ~(B') * sec(~(a') + ~(b') * ~x)), ~x) => Antiderivative((ActivateTrig(~u) * (~B + ~A * cos(~a + ~b * ~x))) / cos(~a + ~b * ~x), ~x) <-- FreeQ([~a, ~b, ~A, ~B], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~(u') * (~(c') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~(A') + ~(B') * csc(~(a') + ~(b') * ~x) + ~(C') * csc(~(a') + ~(b') * ~x) ^ 2), ~x) => (~c) ^ 2 * Antiderivative(ActivateTrig(~u) * (~c * sin(~a + ~b * ~x)) ^ (~n - 2) * (~C + ~B * sin(~a + ~b * ~x) + ~A * sin(~a + ~b * ~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~C, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~(u') * (~(c') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~(A') + ~(B') * sec(~(a') + ~(b') * ~x) + ~(C') * sec(~(a') + ~(b') * ~x) ^ 2), ~x) => (~c) ^ 2 * Antiderivative(ActivateTrig(~u) * (~c * cos(~a + ~b * ~x)) ^ (~n - 2) * (~C + ~B * cos(~a + ~b * ~x) + ~A * cos(~a + ~b * ~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~C, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~(u') * (~(c') * sin(~(a') + ~(b') * ~x)) ^ ~(n') * (~A + ~(C') * csc(~(a') + ~(b') * ~x) ^ 2), ~x) => (~c) ^ 2 * Antiderivative(ActivateTrig(~u) * (~c * sin(~a + ~b * ~x)) ^ (~n - 2) * (~C + ~A * sin(~a + ~b * ~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~C, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~(u') * (~(c') * cos(~(a') + ~(b') * ~x)) ^ ~(n') * (~A + ~(C') * sec(~(a') + ~(b') * ~x) ^ 2), ~x) => (~c) ^ 2 * Antiderivative(ActivateTrig(~u) * (~c * cos(~a + ~b * ~x)) ^ (~n - 2) * (~C + ~A * cos(~a + ~b * ~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~C, ~n], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~(A') + ~(B') * csc(~(a') + ~(b') * ~x) + ~(C') * csc(~(a') + ~(b') * ~x) ^ 2), ~x) => Antiderivative((ActivateTrig(~u) * (~C + ~B * sin(~a + ~b * ~x) + ~A * sin(~a + ~b * ~x) ^ 2)) / sin(~a + ~b * ~x) ^ 2, ~x) <-- FreeQ([~a, ~b, ~A, ~B, ~C], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~(A') + ~(B') * sec(~(a') + ~(b') * ~x) + ~(C') * sec(~(a') + ~(b') * ~x) ^ 2), ~x) => Antiderivative((ActivateTrig(~u) * (~C + ~B * cos(~a + ~b * ~x) + ~A * cos(~a + ~b * ~x) ^ 2)) / cos(~a + ~b * ~x) ^ 2, ~x) <-- FreeQ([~a, ~b, ~A, ~B, ~C], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~A + ~(C') * csc(~(a') + ~(b') * ~x) ^ 2), ~x) => Antiderivative((ActivateTrig(~u) * (~C + ~A * sin(~a + ~b * ~x) ^ 2)) / sin(~a + ~b * ~x) ^ 2, ~x) <-- FreeQ([~a, ~b, ~A, ~C], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~A + ~(C') * sec(~(a') + ~(b') * ~x) ^ 2), ~x) => Antiderivative((ActivateTrig(~u) * (~C + ~A * cos(~a + ~b * ~x) ^ 2)) / cos(~a + ~b * ~x) ^ 2, ~x) <-- FreeQ([~a, ~b, ~A, ~C], ~x) && KnownSineIntegrandQ(~u, ~x)
    @apply_utils Antiderivative(~u * (~(A') + ~(B') * sin(~(a') + ~(b') * ~x) + ~(C') * csc(~(a') + ~(b') * ~x)), ~x) => Antiderivative((ActivateTrig(~u) * (~C + ~A * sin(~a + ~b * ~x) + ~B * sin(~a + ~b * ~x) ^ 2)) / sin(~a + ~b * ~x), ~x) <-- FreeQ([~a, ~b, ~A, ~B, ~C], ~x)
    @apply_utils Antiderivative(~u * (~(A') + ~(B') * cos(~(a') + ~(b') * ~x) + ~(C') * sec(~(a') + ~(b') * ~x)), ~x) => Antiderivative((ActivateTrig(~u) * (~C + ~A * cos(~a + ~b * ~x) + ~B * cos(~a + ~b * ~x) ^ 2)) / cos(~a + ~b * ~x), ~x) <-- FreeQ([~a, ~b, ~A, ~B, ~C], ~x)
    @apply_utils Antiderivative(~u * (~(A') * sin(~(a') + ~(b') * ~x) ^ ~(n') + ~(B') * sin(~(a') + ~(b') * ~x) ^ ~n1 + ~(C') * sin(~(a') + ~(b') * ~x) ^ ~n2), ~x) => Antiderivative(ActivateTrig(~u) * sin(~a + ~b * ~x) ^ ~n * (~A + ~B * sin(~a + ~b * ~x) + ~C * sin(~a + ~b * ~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~A, ~B, ~C, ~n], ~x) && (EqQ(~n1, ~n + 1) && EqQ(~n2, ~n + 2))
    @apply_utils Antiderivative(~u * (~(A') * cos(~(a') + ~(b') * ~x) ^ ~(n') + ~(B') * cos(~(a') + ~(b') * ~x) ^ ~n1 + ~(C') * cos(~(a') + ~(b') * ~x) ^ ~n2), ~x) => Antiderivative(ActivateTrig(~u) * cos(~a + ~b * ~x) ^ ~n * (~A + ~B * cos(~a + ~b * ~x) + ~C * cos(~a + ~b * ~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~A, ~B, ~C, ~n], ~x) && (EqQ(~n1, ~n + 1) && EqQ(~n2, ~n + 2))
end
