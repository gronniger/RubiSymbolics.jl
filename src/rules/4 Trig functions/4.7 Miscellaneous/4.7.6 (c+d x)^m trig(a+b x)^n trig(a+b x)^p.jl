int_rules_4_7_6 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 4.7.6*(c+d*x)^m*trig(a+b*x)^n*trig(a+b*x)^p =#
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sin(~(a') + ~(b') * ~x) ^ ~(n') * cos(~(a') + ~(b') * ~x), ~x) => ((~c + ~d * ~x) ^ ~m * sin(~a + ~b * ~x) ^ (~n + 1)) / (~b * (~n + 1)) - ((~d * ~m) / (~b * (~n + 1))) * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * sin(~a + ~b * ~x) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sin(~(a') + ~(b') * ~x) * cos(~(a') + ~(b') * ~x) ^ ~(n'), ~x) => (-((~c + ~d * ~x) ^ ~m) * cos(~a + ~b * ~x) ^ (~n + 1)) / (~b * (~n + 1)) + ((~d * ~m) / (~b * (~n + 1))) * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * cos(~a + ~b * ~x) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sin(~(a') + ~(b') * ~x) ^ ~(n') * cos(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => Antiderivative(ExpandTrigReduce((~c + ~d * ~x) ^ ~m, sin(~a + ~b * ~x) ^ ~n * cos(~a + ~b * ~x) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && (IGtQ(~n, 0) && IGtQ(~p, 0))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sin(~(a') + ~(b') * ~x) ^ ~(n') * tan(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => -(Antiderivative((~c + ~d * ~x) ^ ~m * sin(~a + ~b * ~x) ^ ~n * tan(~a + ~b * ~x) ^ (~p - 2), ~x)) + Antiderivative((~c + ~d * ~x) ^ ~m * sin(~a + ~b * ~x) ^ (~n - 2) * tan(~a + ~b * ~x) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && (IGtQ(~n, 0) && IGtQ(~p, 0))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * cos(~(a') + ~(b') * ~x) ^ ~(n') * cot(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => -(Antiderivative((~c + ~d * ~x) ^ ~m * cos(~a + ~b * ~x) ^ ~n * cot(~a + ~b * ~x) ^ (~p - 2), ~x)) + Antiderivative((~c + ~d * ~x) ^ ~m * cos(~a + ~b * ~x) ^ (~n - 2) * cot(~a + ~b * ~x) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && (IGtQ(~n, 0) && IGtQ(~p, 0))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sec(~(a') + ~(b') * ~x) ^ ~(n') * tan(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => ((~c + ~d * ~x) ^ ~m * sec(~a + ~b * ~x) ^ ~n) / (~b * ~n) - ((~d * ~m) / (~b * ~n)) * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * sec(~a + ~b * ~x) ^ ~n, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (EqQ(~p, 1) && GtQ(~m, 0))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) ^ ~(n') * cot(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => (-((~c + ~d * ~x) ^ ~m) * csc(~a + ~b * ~x) ^ ~n) / (~b * ~n) + ((~d * ~m) / (~b * ~n)) * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * csc(~a + ~b * ~x) ^ ~n, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (EqQ(~p, 1) && GtQ(~m, 0))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sec(~(a') + ~(b') * ~x) ^ 2 * tan(~(a') + ~(b') * ~x) ^ ~(n'), ~x) => ((~c + ~d * ~x) ^ ~m * tan(~a + ~b * ~x) ^ (~n + 1)) / (~b * (~n + 1)) - ((~d * ~m) / (~b * (~n + 1))) * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * tan(~a + ~b * ~x) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) ^ 2 * cot(~(a') + ~(b') * ~x) ^ ~(n'), ~x) => (-((~c + ~d * ~x) ^ ~m) * cot(~a + ~b * ~x) ^ (~n + 1)) / (~b * (~n + 1)) + ((~d * ~m) / (~b * (~n + 1))) * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * cot(~a + ~b * ~x) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sec(~(a') + ~(b') * ~x) * tan(~(a') + ~(b') * ~x) ^ ~p, ~x) => -(Antiderivative((~c + ~d * ~x) ^ ~m * sec(~a + ~b * ~x) * tan(~a + ~b * ~x) ^ (~p - 2), ~x)) + Antiderivative((~c + ~d * ~x) ^ ~m * sec(~a + ~b * ~x) ^ 3 * tan(~a + ~b * ~x) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && IGtQ(~p / 2, 0)
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sec(~(a') + ~(b') * ~x) ^ ~(n') * tan(~(a') + ~(b') * ~x) ^ ~p, ~x) => -(Antiderivative((~c + ~d * ~x) ^ ~m * sec(~a + ~b * ~x) ^ ~n * tan(~a + ~b * ~x) ^ (~p - 2), ~x)) + Antiderivative((~c + ~d * ~x) ^ ~m * sec(~a + ~b * ~x) ^ (~n + 2) * tan(~a + ~b * ~x) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && IGtQ(~p / 2, 0)
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) * cot(~(a') + ~(b') * ~x) ^ ~p, ~x) => -(Antiderivative((~c + ~d * ~x) ^ ~m * csc(~a + ~b * ~x) * cot(~a + ~b * ~x) ^ (~p - 2), ~x)) + Antiderivative((~c + ~d * ~x) ^ ~m * csc(~a + ~b * ~x) ^ 3 * cot(~a + ~b * ~x) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && IGtQ(~p / 2, 0)
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) ^ ~(n') * cot(~(a') + ~(b') * ~x) ^ ~p, ~x) => -(Antiderivative((~c + ~d * ~x) ^ ~m * csc(~a + ~b * ~x) ^ ~n * cot(~a + ~b * ~x) ^ (~p - 2), ~x)) + Antiderivative((~c + ~d * ~x) ^ ~m * csc(~a + ~b * ~x) ^ (~n + 2) * cot(~a + ~b * ~x) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && IGtQ(~p / 2, 0)
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * sec(~(a') + ~(b') * ~x) ^ ~(n') * tan(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => Module([u = IntHide(sec(~a + ~b * ~x) ^ ~n * tan(~a + ~b * ~x) ^ ~p, ~x)], Dist((~c + ~d * ~x) ^ ~m, u, ~x) - ~d * ~m * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * u, ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (IGtQ(~m, 0) && (IntegerQ(~n / 2) || IntegerQ((~p - 1) / 2)))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) ^ ~(n') * cot(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => Module([u = IntHide(csc(~a + ~b * ~x) ^ ~n * cot(~a + ~b * ~x) ^ ~p, ~x)], Dist((~c + ~d * ~x) ^ ~m, u, ~x) - ~d * ~m * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * u, ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (IGtQ(~m, 0) && (IntegerQ(~n / 2) || IntegerQ((~p - 1) / 2)))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) ^ ~(n') * sec(~(a') + ~(b') * ~x) ^ ~(n'), ~x) => 2 ^ ~n * Antiderivative((~c + ~d * ~x) ^ ~m * csc(2 * ~a + 2 * ~b * ~x) ^ ~n, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && (IntegerQ(~n) && RationalQ(~m))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * csc(~(a') + ~(b') * ~x) ^ ~(n') * sec(~(a') + ~(b') * ~x) ^ ~(p'), ~x) => Module([u = IntHide(csc(~a + ~b * ~x) ^ ~n * sec(~a + ~b * ~x) ^ ~p, ~x)], Dist((~c + ~d * ~x) ^ ~m, u, ~x) - ~d * ~m * Antiderivative((~c + ~d * ~x) ^ (~m - 1) * u, ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (IntegersQ(~n, ~p) && (GtQ(~m, 0) && NeQ(~n, ~p)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~F)(~v) ^ ~(n') * (~G)(~w) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * (~F)(ExpandToSum(~v, ~x)) ^ ~n * (~G)(ExpandToSum(~v, ~x)) ^ ~p, ~x) <-- FreeQ([~m, ~n, ~p], ~x) && (TrigQ(~F) && (TrigQ(~G) && (EqQ(~v, ~w) && (LinearQ([~u, ~v, ~w], ~x) && Not(LinearMatchQ([~u, ~v, ~w], ~x))))))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * cos(~(c') + ~(d') * ~x) * (~a + ~(b') * sin(~(c') + ~(d') * ~x)) ^ ~(n'), ~x) => ((~e + ~f * ~x) ^ ~m * (~a + ~b * sin(~c + ~d * ~x)) ^ (~n + 1)) / (~b * ~d * (~n + 1)) - ((~f * ~m) / (~b * ~d * (~n + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~a + ~b * sin(~c + ~d * ~x)) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * sin(~(c') + ~(d') * ~x) * (~a + ~(b') * cos(~(c') + ~(d') * ~x)) ^ ~(n'), ~x) => (-((~e + ~f * ~x) ^ ~m) * (~a + ~b * cos(~c + ~d * ~x)) ^ (~n + 1)) / (~b * ~d * (~n + 1)) + ((~f * ~m) / (~b * ~d * (~n + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~a + ~b * cos(~c + ~d * ~x)) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * sec(~(c') + ~(d') * ~x) ^ 2 * (~a + ~(b') * tan(~(c') + ~(d') * ~x)) ^ ~(n'), ~x) => ((~e + ~f * ~x) ^ ~m * (~a + ~b * tan(~c + ~d * ~x)) ^ (~n + 1)) / (~b * ~d * (~n + 1)) - ((~f * ~m) / (~b * ~d * (~n + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~a + ~b * tan(~c + ~d * ~x)) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * csc(~(c') + ~(d') * ~x) ^ 2 * (~a + ~(b') * cot(~(c') + ~(d') * ~x)) ^ ~(n'), ~x) => (-((~e + ~f * ~x) ^ ~m) * (~a + ~b * cot(~c + ~d * ~x)) ^ (~n + 1)) / (~b * ~d * (~n + 1)) + ((~f * ~m) / (~b * ~d * (~n + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~a + ~b * cot(~c + ~d * ~x)) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * sec(~(c') + ~(d') * ~x) * tan(~(c') + ~(d') * ~x) * (~a + ~(b') * sec(~(c') + ~(d') * ~x)) ^ ~(n'), ~x) => ((~e + ~f * ~x) ^ ~m * (~a + ~b * sec(~c + ~d * ~x)) ^ (~n + 1)) / (~b * ~d * (~n + 1)) - ((~f * ~m) / (~b * ~d * (~n + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~a + ~b * sec(~c + ~d * ~x)) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * csc(~(c') + ~(d') * ~x) * cot(~(c') + ~(d') * ~x) * (~a + ~(b') * csc(~(c') + ~(d') * ~x)) ^ ~(n'), ~x) => (-((~e + ~f * ~x) ^ ~m) * (~a + ~b * csc(~c + ~d * ~x)) ^ (~n + 1)) / (~b * ~d * (~n + 1)) + ((~f * ~m) / (~b * ~d * (~n + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~a + ~b * csc(~c + ~d * ~x)) ^ (~n + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (IGtQ(~m, 0) && NeQ(~n, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * sin(~(a') + ~(b') * ~x) ^ ~(p') * sin(~(c') + ~(d') * ~x) ^ ~(q'), ~x) => Antiderivative(ExpandTrigReduce((~e + ~f * ~x) ^ ~m, sin(~a + ~b * ~x) ^ ~p * sin(~c + ~d * ~x) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (IGtQ(~p, 0) && (IGtQ(~q, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * cos(~(a') + ~(b') * ~x) ^ ~(p') * cos(~(c') + ~(d') * ~x) ^ ~(q'), ~x) => Antiderivative(ExpandTrigReduce((~e + ~f * ~x) ^ ~m, cos(~a + ~b * ~x) ^ ~p * cos(~c + ~d * ~x) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (IGtQ(~p, 0) && (IGtQ(~q, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * sin(~(a') + ~(b') * ~x) ^ ~(p') * cos(~(c') + ~(d') * ~x) ^ ~(q'), ~x) => Antiderivative(ExpandTrigReduce((~e + ~f * ~x) ^ ~m, sin(~a + ~b * ~x) ^ ~p * cos(~c + ~d * ~x) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (IGtQ(~p, 0) && IGtQ(~q, 0))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~F)(~(a') + ~(b') * ~x) ^ ~(p') * (~G)(~(c') + ~(d') * ~x) ^ ~(q'), ~x) => Antiderivative(ExpandTrigExpand((~e + ~f * ~x) ^ ~m * (~G)(~c + ~d * ~x) ^ ~q, ~F, ~c + ~d * ~x, ~p, ~b / ~d, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (MemberQ([sin, cos], ~F) && (MemberQ([sec, csc], ~G) && (IGtQ(~p, 0) && (IGtQ(~q, 0) && (EqQ(~b * ~c - ~a * ~d, 0) && IGtQ(~b / ~d, 1))))))
end
