int_rules_1_2_2_7 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.2.7*P(x)*(d+e*x^2)^q*(a+b*x^2+c*x^4)^p =#
    @apply_utils Antiderivative((~Px * (~x) ^ ~m) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 2), C = Coeff(~Px, ~x, 4)], (C * (~x) ^ (~m - 1) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (~c * ~e * (~m + 1)) - (1 / (~c * ~e * (~m + 1))) * Antiderivative(((~x) ^ (~m - 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4))) * Simp((~a * C * ~d * (~m - 1) - (A * ~c * ~e * (~m + 1) - C * (~a * ~e * (~m - 1) + ~b * ~d * ~m)) * (~x) ^ 2) - (B * ~c * ~e * (~m + 1) - C * (~b * ~e * ~m + ~c * ~d * (~m + 1))) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, (~x) ^ 2, 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IGtQ(~m / 2, 0)))
    @apply_utils Antiderivative((~Px * (~x) ^ ~m) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 2), C = Coeff(~Px, ~x, 4)], (C * (~x) ^ (~m - 1) * sqrt(~a + ~c * (~x) ^ 4)) / (~c * ~e * (~m + 1)) - (1 / (~c * ~e * (~m + 1))) * Antiderivative(((~x) ^ (~m - 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4))) * Simp((~a * C * ~d * (~m - 1) - (A * ~c * ~e * (~m + 1) - C * ~a * ~e * (~m - 1)) * (~x) ^ 2) - (B * ~c * ~e * (~m + 1) - C * ~c * ~d * (~m + 1)) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, (~x) ^ 2, 2) && IGtQ(~m / 2, 0))
    @apply_utils Antiderivative((~Px * (~x) ^ ~m) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 2), C = Coeff(~Px, ~x, 4)], (A * (~x) ^ (~m + 1) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (~a * ~d * (~m + 1)) + (1 / (~a * ~d * (~m + 1))) * Antiderivative(((~x) ^ (~m + 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4))) * Simp(((~a * B * ~d * (~m + 1) - A * (~a * ~e * (~m + 1) + ~b * ~d * (~m + 2))) + (~a * C * ~d * (~m + 1) - A * (~b * ~e * (~m + 2) + ~c * ~d * (~m + 3))) * (~x) ^ 2) - A * ~c * ~e * (~m + 3) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, (~x) ^ 2, 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && ILtQ(~m / 2, 0)))
    @apply_utils Antiderivative((~Px * (~x) ^ ~m) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 2), C = Coeff(~Px, ~x, 4)], (A * (~x) ^ (~m + 1) * sqrt(~a + ~c * (~x) ^ 4)) / (~a * ~d * (~m + 1)) + (1 / (~a * ~d * (~m + 1))) * Antiderivative(((~x) ^ (~m + 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4))) * Simp(((~a * B * ~d * (~m + 1) - A * ~a * ~e * (~m + 1)) + (~a * C * ~d * (~m + 1) - A * ~c * ~d * (~m + 3)) * (~x) ^ 2) - A * ~c * ~e * (~m + 3) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, (~x) ^ 2, 2) && ILtQ(~m / 2, 0))
    @apply_utils Antiderivative(~x * ~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => (1 / 2) * Subst(Antiderivative(ReplaceAll(~Px, (~x->begin
                                        #= none:1 =#
                                        #= none:3 =#
                                        sqrt(~x)
                                    end)) * (~d + ~e * ~x) ^ ~q * (~a + ~b * ~x + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ 2) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && PolyQ(~Px, (~x) ^ 2)
    @apply_utils Antiderivative(~Pr * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~p, ~x) => Antiderivative(~x * PolynomialQuotient(~Pr, ~x, ~x) * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (PolyQ(~Pr, ~x) && (EqQ(PolynomialRemainder(~Pr, ~x, ~x), 0) && Not(MatchQ(~Pr, (~x) ^ ~(m') * ~(u') <-- IntegerQ(m)))))
    @apply_utils Antiderivative(~Pr * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~p, ~x) => Module([r = Expon(~Pr, ~x), k], Antiderivative(Sum(Coeff(~Pr, ~x, 2k) * (~x) ^ (2k), [k, 0, r / 2]) * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p, ~x) + Antiderivative(~x * Sum(Coeff(~Pr, ~x, 2k + 1) * (~x) ^ (2k), [k, 0, (r - 1) / 2]) * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p, ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (PolyQ(~Pr, ~x) && Not(PolyQ(~Pr, (~x) ^ 2)))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(~Px * (~d + ~e * (~x) ^ 2) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ 2) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~q], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (IntegerQ(~p) && (PolyQ(~Px, (~x) ^ 2) || MatchQ(~Px, (~f + ~(g') * (~x) ^ 2) ^ ~(r') <-- FreeQ([f, g, r], ~x))))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(~Px * (~d + ~e * (~x) ^ 2) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ 2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~q], ~x) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (IntegerQ(~p) && (PolyQ(~Px, (~x) ^ 2) || MatchQ(~Px, (~f + ~(g') * (~x) ^ 2) ^ ~(r') <-- FreeQ([f, g, r], ~x)))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~p, ~x) => ((~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ FracPart(~p) / ((~d + ~e * (~x) ^ 2) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ 2) / ~e) ^ FracPart(~p))) * Antiderivative(~Px * (~d + ~e * (~x) ^ 2) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ 2) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (Not(IntegerQ(~p)) && (PolyQ(~Px, (~x) ^ 2) || MatchQ(~Px, (~f + ~(g') * (~x) ^ 2) ^ ~(r') <-- FreeQ([f, g, r], ~x))))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~p, ~x) => ((~a + ~c * (~x) ^ 4) ^ FracPart(~p) / ((~d + ~e * (~x) ^ 2) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ 2) / ~e) ^ FracPart(~p))) * Antiderivative(~Px * (~d + ~e * (~x) ^ 2) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ 2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (Not(IntegerQ(~p)) && (PolyQ(~Px, (~x) ^ 2) || MatchQ(~Px, (~f + ~(g') * (~x) ^ 2) ^ ~(r') <-- FreeQ([f, g, r], ~x)))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand(~Px * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~q], ~x) && (PolyQ(~Px, (~x) ^ 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand(~Px * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~c * (~x) ^ 4) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~q], ~x) && (PolyQ(~Px, (~x) ^ 2) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative(((~d + ~(e') * (~x) ^ 2) ^ ~q * ~P4x) / sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (C * ~x * (~d + ~e * (~x) ^ 2) ^ ~q * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (~c * (2 * ~q + 3)) + (1 / (~c * (2 * ~q + 3))) * Antiderivative(((~d + ~e * (~x) ^ 2) ^ (~q - 1) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) * Simp((A * ~c * ~d * (2 * ~q + 3) - ~a * C * ~d) + (~c * (B * ~d + A * ~e) * (2 * ~q + 3) - C * (2 * ~b * ~d + ~a * ~e + 2 * ~a * ~e * ~q)) * (~x) ^ 2 + (B * ~c * ~e * (2 * ~q + 3) - 2 * C * ((~b * ~e - ~c * ~d * ~q) + ~b * ~e * ~q)) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2) && (EqQ(Expon(~P4x, ~x), 4) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IGtQ(~q, 0)))))
    @apply_utils Antiderivative(((~d + ~(e') * (~x) ^ 2) ^ ~q * ~P4x) / sqrt(~a + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (C * ~x * (~d + ~e * (~x) ^ 2) ^ ~q * sqrt(~a + ~c * (~x) ^ 4)) / (~c * (2 * ~q + 3)) + (1 / (~c * (2 * ~q + 3))) * Antiderivative(((~d + ~e * (~x) ^ 2) ^ (~q - 1) / sqrt(~a + ~c * (~x) ^ 4)) * Simp((A * ~c * ~d * (2 * ~q + 3) - ~a * C * ~d) + (~c * (B * ~d + A * ~e) * (2 * ~q + 3) - ~a * C * ~e * (2 * ~q + 1)) * (~x) ^ 2 + (B * ~c * ~e * (2 * ~q + 3) + 2 * ~c * C * ~d * ~q) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2) && (EqQ(Expon(~P4x, ~x), 4) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IGtQ(~q, 0))))
    @apply_utils Antiderivative(((~d + ~(e') * (~x) ^ 2) ^ ~q * ~P4x) / sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-(((C * (~d) ^ 2 - B * ~d * ~e) + A * (~e) ^ 2)) * ~x * (~d + ~e * (~x) ^ 2) ^ (~q + 1) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (2 * ~d * (~q + 1) * ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) + (1 / (2 * ~d * (~q + 1) * ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2))) * Antiderivative(((~d + ~e * (~x) ^ 2) ^ (~q + 1) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) * Simp(((~a * ~d * (C * ~d - B * ~e) + A * (~a * (~e) ^ 2 * (2 * ~q + 3) + 2 * ~d * (~c * ~d - ~b * ~e) * (~q + 1))) - 2 * ((B * ~d - A * ~e) * (~b * ~e * (~q + 2) - ~c * ~d * (~q + 1)) - C * ~d * (~b * ~d + ~a * ~e * (~q + 1))) * (~x) ^ 2) + ~c * ((C * (~d) ^ 2 - B * ~d * ~e) + A * (~e) ^ 2) * (2 * ~q + 5) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2) && (LeQ(Expon(~P4x, ~x), 4) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && ILtQ(~q, -1)))))
    @apply_utils Antiderivative(((~d + ~(e') * (~x) ^ 2) ^ ~q * ~P4x) / sqrt(~a + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-(((C * (~d) ^ 2 - B * ~d * ~e) + A * (~e) ^ 2)) * ~x * (~d + ~e * (~x) ^ 2) ^ (~q + 1) * sqrt(~a + ~c * (~x) ^ 4)) / (2 * ~d * (~q + 1) * (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) + (1 / (2 * ~d * (~q + 1) * (~c * (~d) ^ 2 + ~a * (~e) ^ 2))) * Antiderivative(((~d + ~e * (~x) ^ 2) ^ (~q + 1) / sqrt(~a + ~c * (~x) ^ 4)) * Simp(~a * ~d * (C * ~d - B * ~e) + A * (~a * (~e) ^ 2 * (2 * ~q + 3) + 2 * ~c * (~d) ^ 2 * (~q + 1)) + 2 * ~d * ((B * ~c * ~d - A * ~c * ~e) + ~a * C * ~e) * (~q + 1) * (~x) ^ 2 + ~c * ((C * (~d) ^ 2 - B * ~d * ~e) + A * (~e) ^ 2) * (2 * ~q + 5) * (~x) ^ 4, ~x), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2) && (LeQ(Expon(~P4x, ~x), 4) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && ILtQ(~q, -1))))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => ~A * Subst(Antiderivative(1 / (~d - (~b * ~d - 2 * ~a * ~e) * (~x) ^ 2), ~x), ~x, ~x / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && EqQ(~B * ~d + ~A * ~e, 0))))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => ~A * Subst(Antiderivative(1 / (~d + 2 * ~a * ~e * (~x) ^ 2), ~x), ~x, ~x / sqrt(~a + ~c * (~x) ^ 4)) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && EqQ(~B * ~d + ~A * ~e, 0)))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => ((~B * ~d + ~A * ~e) / (2 * ~d * ~e)) * Antiderivative(1 / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) - ((~B * ~d - ~A * ~e) / (2 * ~d * ~e)) * Antiderivative((~d - ~e * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && NeQ(~B * ~d + ~A * ~e, 0))))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => ((~B * ~d + ~A * ~e) / (2 * ~d * ~e)) * Antiderivative(1 / sqrt(~a + ~c * (~x) ^ 4), ~x) - ((~B * ~d - ~A * ~e) / (2 * ~d * ~e)) * Antiderivative((~d - ~e * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && NeQ(~B * ~d + ~A * ~e, 0)))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => ((sqrt(~A + ~B * (~x) ^ 2) * sqrt(~a / ~A + (~c * (~x) ^ 2) / ~B)) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) * Antiderivative(sqrt(~A + ~B * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a / ~A + (~c * (~x) ^ 2) / ~B)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && EqQ((~c * (~A) ^ 2 - ~b * ~A * ~B) + ~a * (~B) ^ 2, 0)))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => ((sqrt(~A + ~B * (~x) ^ 2) * sqrt(~a / ~A + (~c * (~x) ^ 2) / ~B)) / sqrt(~a + ~c * (~x) ^ 4)) * Antiderivative(sqrt(~A + ~B * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a / ~A + (~c * (~x) ^ 2) / ~B)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && EqQ(~c * (~A) ^ 2 + ~a * (~B) ^ 2, 0))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([q = sqrt((~b) ^ 2 - 4 * ~a * ~c)], ((2 * ~a * ~B - ~A * (~b + q)) / (2 * ~a * ~e - ~d * (~b + q))) * Antiderivative(1 / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) - ((~B * ~d - ~A * ~e) / (2 * ~a * ~e - ~d * (~b + q))) * Antiderivative((2 * ~a + (~b + q) * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) <-- RationalQ(q)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (GtQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && NeQ((~c * (~A) ^ 2 - ~b * ~A * ~B) + ~a * (~B) ^ 2, 0)))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([q = sqrt(-(~a) * ~c)], ((~a * ~B - ~A * q) / (~a * ~e - ~d * q)) * Antiderivative(1 / sqrt(~a + ~c * (~x) ^ 4), ~x) - ((~B * ~d - ~A * ~e) / (~a * ~e - ~d * q)) * Antiderivative((~a + q * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) <-- RationalQ(q)) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (GtQ(-(~a) * ~c, 0) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && NeQ(~c * (~A) ^ 2 + ~a * (~B) ^ 2, 0)))
    #= Antiderivative(((~A)+(~B')*(~x)^2)/(((~d)+(~e')*(~x)^2)*sqrt((~a)+(~b')*(~x)^2+(~c')*(~x)^4)),(~x)*Symbol) := With([q=Rt(B/A,2)], -(B*d-A*e)*atan(Rt(-b+c*d/e+a*e/d,2)*x/sqrt(a+b*x^2+c*x^4))/(2*d* e*Rt(-b+c*d/e+a*e/d,2)) + B*q*(c*d^2-a*e^2)*(A+B*x^2)*sqrt(A^2*(a+b*x^2+c*x^4)/(a*(A+B*x^2)^2) )/(4*c*d*e*(B*d-A*e)*sqrt(a+b*x^2+c*x^4))* Elliptic.Pi(-(B*d-A*e)^2/(4*d*e*A*B),2*atan(q*x),1/2-b*A/(4*a*B)) ) <-- FreeQ([a,b,c,d,e,A,B],x) && NeQ(b^2-4*a*c,0) &&  NeQ(c*d^2-b*d*e+a*e^2,0) && NeQ(c*d^2-a*e^2,0) && PosQ(c/a) &&  EqQ(c*A^2-a*B^2,0) =#
    #= Antiderivative(((~A)+(~B')*(~x)^2)/(((~d)+(~e')*(~x)^2)*sqrt((~a)+(~c')*(~x)^4)),~x) :=  With([q=Rt(B/A,2)], -(B*d-A*e)*atan(Rt(c*d/e+a*e/d,2)*x/sqrt(a+c*x^4))/(2*d*e*Rt(c*d/ e+a*e/d,2)) + B*q*(c*d^2-a*e^2)*(A+B*x^2)*sqrt(A^2*(a+c*x^4)/(a*(A+B*x^2)^2))/(4* c*d*e*(B*d-A*e)*sqrt(a+c*x^4))* Elliptic.Pi(-(B*d-A*e)^2/(4*d*e*A*B),2*atan(q*x),1/2)) <--  FreeQ([a,c,d,e,A,B],x) && NeQ(c*d^2+a*e^2,0) && NeQ(c*d^2-a*e^2,0) &&  PosQ(c/a) && EqQ(c*A^2-a*B^2,0) =#
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([q = Rt(~B / ~A, 2)], (-((~B * ~d - ~A * ~e)) * atan((Rt(-(~b) + (~c * ~d) / ~e + (~a * ~e) / ~d, 2) * ~x) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4))) / (2 * ~d * ~e * Rt(-(~b) + (~c * ~d) / ~e + (~a * ~e) / ~d, 2)) + (((~B * ~d + ~A * ~e) * (~A + ~B * (~x) ^ 2) * sqrt(((~A) ^ 2 * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (~a * (~A + ~B * (~x) ^ 2) ^ 2))) / (4 * ~d * ~e * ~A * q * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4))) * Elliptic.Pi(Cancel(-((~B * ~d - ~A * ~e) ^ 2) / (4 * ~d * ~e * ~A * ~B)), 2 * atan(q * ~x), 1 / 2 - (~b * ~A) / (4 * ~a * ~B))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (PosQ(~c / ~a) && EqQ(~c * (~A) ^ 2 - ~a * (~B) ^ 2, 0)))))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([q = Rt(~B / ~A, 2)], (-((~B * ~d - ~A * ~e)) * atan((Rt((~c * ~d) / ~e + (~a * ~e) / ~d, 2) * ~x) / sqrt(~a + ~c * (~x) ^ 4))) / (2 * ~d * ~e * Rt((~c * ~d) / ~e + (~a * ~e) / ~d, 2)) + (((~B * ~d + ~A * ~e) * (~A + ~B * (~x) ^ 2) * sqrt(((~A) ^ 2 * (~a + ~c * (~x) ^ 4)) / (~a * (~A + ~B * (~x) ^ 2) ^ 2))) / (4 * ~d * ~e * ~A * q * sqrt(~a + ~c * (~x) ^ 4))) * Elliptic.Pi(Cancel(-((~B * ~d - ~A * ~e) ^ 2) / (4 * ~d * ~e * ~A * ~B)), 2 * atan(q * ~x), 1 / 2)) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (PosQ(~c / ~a) && EqQ(~c * (~A) ^ 2 - ~a * (~B) ^ 2, 0))))
    @apply_utils Antiderivative((~(A') + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([q = Rt(~c / ~a, 2)], ((~A * (~c * ~d + ~a * ~e * q) - ~a * ~B * (~e + ~d * q)) / (~c * (~d) ^ 2 - ~a * (~e) ^ 2)) * Antiderivative(1 / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) + ((~a * (~B * ~d - ~A * ~e) * (~e + ~d * q)) / (~c * (~d) ^ 2 - ~a * (~e) ^ 2)) * Antiderivative((1 + q * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (PosQ(~c / ~a) && NeQ(~c * (~A) ^ 2 - ~a * (~B) ^ 2, 0)))))
    @apply_utils Antiderivative((~(A') + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([q = Rt(~c / ~a, 2)], ((~A * (~c * ~d + ~a * ~e * q) - ~a * ~B * (~e + ~d * q)) / (~c * (~d) ^ 2 - ~a * (~e) ^ 2)) * Antiderivative(1 / sqrt(~a + ~c * (~x) ^ 4), ~x) + ((~a * (~B * ~d - ~A * ~e) * (~e + ~d * q)) / (~c * (~d) ^ 2 - ~a * (~e) ^ 2)) * Antiderivative((1 + q * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (PosQ(~c / ~a) && NeQ(~c * (~A) ^ 2 - ~a * (~B) ^ 2, 0))))
    @apply_utils Antiderivative((~(A') + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => (~B / ~e) * Antiderivative(1 / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) + ((~e * ~A - ~d * ~B) / ~e) * Antiderivative(1 / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && NegQ(~c / ~a))))
    @apply_utils Antiderivative((~(A') + ~(B') * (~x) ^ 2) / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => (~B / ~e) * Antiderivative(1 / sqrt(~a + ~c * (~x) ^ 4), ~x) + ((~e * ~A - ~d * ~B) / ~e) * Antiderivative(1 / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && NegQ(~c / ~a)))
    @apply_utils Antiderivative(~P4x / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-C / (~e) ^ 2) * Antiderivative((~d - ~e * (~x) ^ 2) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) + (1 / (~e) ^ 2) * Antiderivative((C * (~d) ^ 2 + A * (~e) ^ 2 + B * (~e) ^ 2 * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2, 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0))))
    @apply_utils Antiderivative(~P4x / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-C / (~e) ^ 2) * Antiderivative((~d - ~e * (~x) ^ 2) / sqrt(~a + ~c * (~x) ^ 4), ~x) + (1 / (~e) ^ 2) * Antiderivative((C * (~d) ^ 2 + A * (~e) ^ 2 + B * (~e) ^ 2 * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2, 2) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0)))
    @apply_utils Antiderivative(~P4x / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([q = Rt(~c / ~a, 2), A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-C / (~e * q)) * Antiderivative((1 - q * (~x) ^ 2) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) + (1 / (~c * ~e)) * Antiderivative((A * ~c * ~e + ~a * C * ~d * q + (B * ~c * ~e - C * (~c * ~d - ~a * ~e * q)) * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2, 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (PosQ(~c / ~a) && Not(GtQ((~b) ^ 2 - 4 * ~a * ~c, 0)))))))
    @apply_utils Antiderivative(~P4x / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([q = Rt(~c / ~a, 2), A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-C / (~e * q)) * Antiderivative((1 - q * (~x) ^ 2) / sqrt(~a + ~c * (~x) ^ 4), ~x) + (1 / (~c * ~e)) * Antiderivative((A * ~c * ~e + ~a * C * ~d * q + (B * ~c * ~e - C * (~c * ~d - ~a * ~e * q)) * (~x) ^ 2) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2, 2) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && PosQ(~c / ~a))))
    @apply_utils Antiderivative(~P4x / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-1 / (~e) ^ 2) * Antiderivative(((C * ~d - B * ~e) - C * ~e * (~x) ^ 2) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x) + (((C * (~d) ^ 2 - B * ~d * ~e) + A * (~e) ^ 2) / (~e) ^ 2) * Antiderivative(1 / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2, 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0))))
    @apply_utils Antiderivative(~P4x / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~P4x, ~x, 0), B = Coeff(~P4x, ~x, 2), C = Coeff(~P4x, ~x, 4)], (-1 / (~e) ^ 2) * Antiderivative(((C * ~d - B * ~e) - C * ~e * (~x) ^ 2) / sqrt(~a + ~c * (~x) ^ 4), ~x) + (((C * (~d) ^ 2 - B * ~d * ~e) + A * (~e) ^ 2) / (~e) ^ 2) * Antiderivative(1 / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~P4x, (~x) ^ 2, 2) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0)))
    @apply_utils Antiderivative(~Px / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([q = Expon(~Px, ~x)], (Coeff(~Px, ~x, q) * (~x) ^ (q - 5) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (~c * ~e * (q - 3)) + (1 / (~c * ~e * (q - 3))) * Antiderivative((~c * ~e * (q - 3) * ~Px - Coeff(~Px, ~x, q) * (~x) ^ (q - 6) * (~d + ~e * (~x) ^ 2) * (~a * (q - 5) + ~b * (q - 4) * (~x) ^ 2 + ~c * (q - 3) * (~x) ^ 4)) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) <-- GtQ(q, 4)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0)))
    @apply_utils Antiderivative(~Px / ((~d + ~(e') * (~x) ^ 2) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([q = Expon(~Px, ~x)], (Coeff(~Px, ~x, q) * (~x) ^ (q - 5) * sqrt(~a + ~c * (~x) ^ 4)) / (~c * ~e * (q - 3)) + (1 / (~c * ~e * (q - 3))) * Antiderivative((~c * ~e * (q - 3) * ~Px - Coeff(~Px, ~x, q) * (~x) ^ (q - 6) * (~d + ~e * (~x) ^ 2) * (~a * (q - 5) + ~c * (q - 3) * (~x) ^ 4)) / ((~d + ~e * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) <-- GtQ(q, 4)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0))
    #= Antiderivative((~Pq)*((~a)+(~b')*(~x)^2+(~c')*(~x)^4)^(~p)/((~d)+(~e')*(~x)^2),~x) :=  With([A=Coeff(PolynomialRemainder(Pq,a+b*x^2+c*x^4,x),x,0), B=Coeff(PolynomialRemainder(Pq,a+b*x^2+c*x^4,x),x,2)], -B*x*(b^2-2*a*c+b*c*x^2)*(a+b*x^2+c*x^4)^(p+1)/(2*a*e*(p+1)*(b^2-4* a*c)) + (B*d-A*e)*x*(b^2*c*d-2*a*c^2*d-b^3*e+3*a*b*c*e+c*(b*c*d-b^2*e+2*a*c* e)*x^2)*(a+b*x^2+c*x^4)^(p+1)/ (2*a*e*(p+1)*(b^2-4*a*c)*(c*d^2-b*d*e+a*e^2)) + Antiderivative((a+b*x^2+c*x^4)^(p+1)/(d+e*x^2)*ExpandToSum(Pq/(a+b*x^2+c*x^4)-( d+e*x^2)/(a+b*x^2+c*x^4)^(p+1)* D(-B*x*(b^2-2*a*c+b*c*x^2)*(a+b*x^2+c*x^4)^(p+1)/(2*a*e*(p+1)*(b^ 2-4*a*c)) + (B*d-A*e)*x*(b^2*c*d-2*a*c^2*d-b^3*e+3*a*b*c*e+c*(b*c*d-b^2*e+2* a*c*e)*x^2)*(a+b*x^2+c*x^4)^(p+1)/ (2*a*e*(p+1)*(b^2-4*a*c)*(c*d^2-b*d*e+a*e^2)),x),x),x)) <--  FreeQ([a,b,c,d,e],x) && PolyQ(Pq,x^2) && Expon(Pq,x^2)>0 &&  NeQ(b^2-4*a*c,0) && NeQ(c*d^2-b*d*e+a*e^2,0) && LtQ(p,-1) =#
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~p, ~x) => Antiderivative(ExpandIntegrand(1 / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~Px * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ (~p + 1 / 2), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, (~x) ^ 2) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (IntegerQ(~p + 1 / 2) && IntegerQ(~q)))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~p, ~x) => Antiderivative(ExpandIntegrand(1 / sqrt(~a + ~c * (~x) ^ 4), ~Px * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~c * (~x) ^ 4) ^ (~p + 1 / 2), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, (~x) ^ 2) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (IntegerQ(~p + 1 / 2) && IntegerQ(~q))))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Unintegrable(~Px * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && PolyQ(~Px, ~x)
    @apply_utils Antiderivative(~Px * (~d + ~(e') * (~x) ^ 2) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Unintegrable(~Px * (~d + ~e * (~x) ^ 2) ^ ~q * (~a + ~c * (~x) ^ 4) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && PolyQ(~Px, ~x)
end
