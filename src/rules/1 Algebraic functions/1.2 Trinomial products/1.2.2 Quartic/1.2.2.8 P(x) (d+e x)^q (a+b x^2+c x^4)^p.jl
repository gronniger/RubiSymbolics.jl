int_rules_1_2_2_8 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.2.8*P(x)*(d+e*x)^q*(a+b*x^2+c*x^4)^p =#
    @apply_utils Antiderivative(1 / ((~d + ~(e') * ~x) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => ~d * Antiderivative(1 / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) - ~e * Antiderivative(~x / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x)
    @apply_utils Antiderivative(1 / ((~d + ~(e') * ~x) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => ~d * Antiderivative(1 / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) - ~e * Antiderivative(~x / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x)
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~q / sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4), ~x) => ((~e) ^ 3 * (~d + ~e * ~x) ^ (~q + 1) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / ((~q + 1) * (~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4)) + (1 / ((~q + 1) * (~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4))) * Antiderivative(((~d + ~e * ~x) ^ (~q + 1) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) * Simp(((~d * (~q + 1) * (~c * (~d) ^ 2 + ~b * (~e) ^ 2) - ~e * (~c * (~d) ^ 2 * (~q + 1) + ~b * (~e) ^ 2 * (~q + 2)) * ~x) + ~c * ~d * (~e) ^ 2 * (~q + 1) * (~x) ^ 2) - ~c * (~e) ^ 3 * (~q + 3) * (~x) ^ 3, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (NeQ(~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4, 0) && ILtQ(~q, -1))
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~q / sqrt(~a + ~(c') * (~x) ^ 4), ~x) => ((~e) ^ 3 * (~d + ~e * ~x) ^ (~q + 1) * sqrt(~a + ~c * (~x) ^ 4)) / ((~q + 1) * (~c * (~d) ^ 4 + ~a * (~e) ^ 4)) + (~c / ((~q + 1) * (~c * (~d) ^ 4 + ~a * (~e) ^ 4))) * Antiderivative(((~d + ~e * ~x) ^ (~q + 1) / sqrt(~a + ~c * (~x) ^ 4)) * Simp((((~d) ^ 3 * (~q + 1) - (~d) ^ 2 * ~e * (~q + 1) * ~x) + ~d * (~e) ^ 2 * (~q + 1) * (~x) ^ 2) - (~e) ^ 3 * (~q + 3) * (~x) ^ 3, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (NeQ(~c * (~d) ^ 4 + ~a * (~e) ^ 4, 0) && ILtQ(~q, -1))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p') / (~d + ~(e') * ~x), ~x) => ~d * Antiderivative((~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) - ~e * Antiderivative((~x * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && IntegerQ(~p + 1 / 2)
    @apply_utils Antiderivative((~a + ~(c') * (~x) ^ 4) ^ ~(p') / (~d + ~(e') * ~x), ~x) => ~d * Antiderivative((~a + ~c * (~x) ^ 4) ^ ~p / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) - ~e * Antiderivative((~x * (~a + ~c * (~x) ^ 4) ^ ~p) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && IntegerQ(~p + 1 / 2)
    @apply_utils Antiderivative(~Px * (~d + ~(e') * ~x) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(PolynomialQuotient(~Px, ~d + ~e * ~x, ~x) * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (PolyQ(~Px, ~x) && EqQ(PolynomialRemainder(~Px, ~d + ~e * ~x, ~x), 0))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * ~x) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(PolynomialQuotient(~Px, ~d + ~e * ~x, ~x) * (~d + ~e * ~x) ^ (~q + 1) * (~a + ~c * (~x) ^ 4) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (PolyQ(~Px, ~x) && EqQ(PolynomialRemainder(~Px, ~d + ~e * ~x, ~x), 0))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * ~x) ^ ~(q') * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(PolynomialQuotient(~Px, ~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4, ~x) * (~d + ~e * ~x) ^ ~q * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (PolyQ(~Px, ~x) && EqQ(PolynomialRemainder(~Px, ~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4, ~x), 0))
    @apply_utils Antiderivative(~Px * (~d + ~(e') * ~x) ^ ~(q') * (~a + ~(c') * (~x) ^ 4) ^ ~(p'), ~x) => Antiderivative(PolynomialQuotient(~Px, ~a + ~c * (~x) ^ 4, ~x) * (~d + ~e * ~x) ^ ~q * (~a + ~c * (~x) ^ 4) ^ (~p + 1), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (PolyQ(~Px, ~x) && EqQ(PolynomialRemainder(~Px, ~a + ~c * (~x) ^ 4, ~x), 0))
    @apply_utils Antiderivative((~Px * (~d + ~(e') * ~x) ^ ~q) / sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], Antiderivative(((~d + ~e * ~x) ^ (~q - 1) * (A * ~d + (B * ~d + A * ~e) * ~x + (C * ~d + B * ~e) * (~x) ^ 2 + C * ~e * (~x) ^ 3)) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (LeQ(Expon(~Px, ~x), 2) && (NeQ(~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4, 0) && GtQ(~q, 0))))
    @apply_utils Antiderivative((~Px * (~d + ~(e') * ~x) ^ ~q) / sqrt(~a + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], Antiderivative(((~d + ~e * ~x) ^ (~q - 1) * (A * ~d + (B * ~d + A * ~e) * ~x + (C * ~d + B * ~e) * (~x) ^ 2 + C * ~e * (~x) ^ 3)) / sqrt(~a + ~c * (~x) ^ 4), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (LeQ(Expon(~Px, ~x), 2) && (NeQ(~c * (~d) ^ 4 + ~a * (~e) ^ 4, 0) && GtQ(~q, 0))))
    @apply_utils Antiderivative((~Px * (~d + ~(e') * ~x) ^ ~q) / sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], (D * (~d + ~e * ~x) ^ ~q * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / (~c * (~q + 2)) - (1 / (~c * (~q + 2))) * Antiderivative(((~d + ~e * ~x) ^ (~q - 1) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) * Simp(((~a * D * ~e * ~q - A * ~c * ~d * (~q + 2)) + ((~b * ~d * D - B * ~c * ~d * (~q + 2)) - A * ~c * ~e * (~q + 2)) * ~x + (~b * D * ~e * (~q + 1) - ~c * (C * ~d + B * ~e) * (~q + 2)) * (~x) ^ 2) - ~c * (~d * D * ~q + C * ~e * (~q + 2)) * (~x) ^ 3, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x, 3) && (NeQ(~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4, 0) && GtQ(~q, 0)))
    @apply_utils Antiderivative((~Px * (~d + ~(e') * ~x) ^ ~q) / sqrt(~a + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], (D * (~d + ~e * ~x) ^ ~q * sqrt(~a + ~c * (~x) ^ 4)) / (~c * (~q + 2)) - (1 / (~c * (~q + 2))) * Antiderivative(((~d + ~e * ~x) ^ (~q - 1) / sqrt(~a + ~c * (~x) ^ 4)) * Simp((((~a * D * ~e * ~q - A * ~c * ~d * (~q + 2)) - ~c * (B * ~d * (~q + 2) + A * ~e * (~q + 2)) * ~x) - ~c * (C * ~d + B * ~e) * (~q + 2) * (~x) ^ 2) - ~c * (~d * D * ~q + C * ~e * (~q + 2)) * (~x) ^ 3, ~x), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x, 3) && (NeQ(~c * (~d) ^ 4 + ~a * (~e) ^ 4, 0) && GtQ(~q, 0)))
    @apply_utils Antiderivative((~Px * (~d + ~(e') * ~x) ^ ~q) / sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], (-(((((~d) ^ 3 * D - C * (~d) ^ 2 * ~e) + B * ~d * (~e) ^ 2) - A * (~e) ^ 3)) * (~d + ~e * ~x) ^ (~q + 1) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) / ((~q + 1) * (~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4)) + (1 / ((~q + 1) * (~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4))) * Antiderivative(((~d + ~e * ~x) ^ (~q + 1) / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) * Simp(((~q + 1) * (~a * ~e * (((~d) ^ 2 * D - C * ~d * ~e) + B * (~e) ^ 2) + A * ~d * (~c * (~d) ^ 2 + ~b * (~e) ^ 2)) - ((~e * (~q + 1) * (A * ~c * (~d) ^ 2 + ~a * ~e * (~d * D - C * ~e)) - B * ~d * (~c * (~d) ^ 2 * (~q + 1) + ~b * (~e) ^ 2 * (~q + 2))) - ~b * (((~d) ^ 3 * D - C * (~d) ^ 2 * ~e) - A * (~e) ^ 3 * (~q + 2))) * ~x) + (~q + 1) * (D * ~e * (~b * (~d) ^ 2 + ~a * (~e) ^ 2) + ~c * ~d * (C * (~d) ^ 2 - ~e * (B * ~d - A * ~e))) * (~x) ^ 2 + ~c * (~q + 3) * ((((~d) ^ 3 * D - C * (~d) ^ 2 * ~e) + B * ~d * (~e) ^ 2) - A * (~e) ^ 3) * (~x) ^ 3, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (LeQ(Expon(~Px, ~x), 3) && (NeQ(~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4, 0) && LtQ(~q, -1))))
    @apply_utils Antiderivative((~Px * (~d + ~(e') * ~x) ^ ~q) / sqrt(~a + ~(c') * (~x) ^ 4), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], (-(((((~d) ^ 3 * D - C * (~d) ^ 2 * ~e) + B * ~d * (~e) ^ 2) - A * (~e) ^ 3)) * (~d + ~e * ~x) ^ (~q + 1) * sqrt(~a + ~c * (~x) ^ 4)) / ((~q + 1) * (~c * (~d) ^ 4 + ~a * (~e) ^ 4)) + (1 / ((~q + 1) * (~c * (~d) ^ 4 + ~a * (~e) ^ 4))) * Antiderivative(((~d + ~e * ~x) ^ (~q + 1) / sqrt(~a + ~c * (~x) ^ 4)) * Simp(((~q + 1) * (~a * ~e * (((~d) ^ 2 * D - C * ~d * ~e) + B * (~e) ^ 2) + A * ~d * (~c * (~d) ^ 2)) - (~e * (~q + 1) * (A * ~c * (~d) ^ 2 + ~a * ~e * (~d * D - C * ~e)) - B * ~d * (~c * (~d) ^ 2 * (~q + 1))) * ~x) + (~q + 1) * (D * ~e * (~a * (~e) ^ 2) + ~c * ~d * (C * (~d) ^ 2 - ~e * (B * ~d - A * ~e))) * (~x) ^ 2 + ~c * (~q + 3) * ((((~d) ^ 3 * D - C * (~d) ^ 2 * ~e) + B * ~d * (~e) ^ 2) - A * (~e) ^ 3) * (~x) ^ 3, ~x), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (LeQ(Expon(~Px, ~x), 3) && (NeQ(~c * (~d) ^ 4 + ~a * (~e) ^ 4, 0) && LtQ(~q, -1))))
    @apply_utils Antiderivative((~A + ~(B') * ~x) / ((~d + ~(e') * ~x) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => ((-((~A) ^ 2) * (~B * ~d + ~A * ~e)) / ~e) * Subst(Antiderivative(1 / ((6 * (~A) ^ 3 * ~B * ~d + 3 * (~A) ^ 4 * ~e) - ~a * ~e * (~x) ^ 2), ~x), ~x, (~A + ~B * ~x) ^ 2 / sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (NeQ(~B * ~d - ~A * ~e, 0) && (EqQ((~c) ^ 2 * (~d) ^ 6 + ~a * (~e) ^ 4 * (13 * ~c * (~d) ^ 2 + ~b * (~e) ^ 2), 0) && (EqQ((~b) ^ 2 * (~e) ^ 4 - 12 * ~c * (~d) ^ 2 * (~c * (~d) ^ 2 - ~b * (~e) ^ 2), 0) && EqQ(4 * ~A * ~c * ~d * ~e + ~B * (2 * ~c * (~d) ^ 2 - ~b * (~e) ^ 2), 0))))
    @apply_utils Antiderivative(~Px / ((~d + ~(e') * ~x) * sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], Antiderivative((~x * ((B * ~d - A * ~e) + (~d * D - C * ~e) * (~x) ^ 2)) / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x) + Antiderivative(((A * ~d + (C * ~d - B * ~e) * (~x) ^ 2) - D * ~e * (~x) ^ 4) / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (LeQ(Expon(~Px, ~x), 3) && NeQ(~c * (~d) ^ 4 + ~b * (~d) ^ 2 * (~e) ^ 2 + ~a * (~e) ^ 4, 0)))
    @apply_utils Antiderivative(~Px / ((~d + ~(e') * ~x) * sqrt(~a + ~(c') * (~x) ^ 4)), ~x) => With([A = Coeff(~Px, ~x, 0), B = Coeff(~Px, ~x, 1), C = Coeff(~Px, ~x, 2), D = Coeff(~Px, ~x, 3)], Antiderivative((~x * ((B * ~d - A * ~e) + (~d * D - C * ~e) * (~x) ^ 2)) / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x) + Antiderivative(((A * ~d + (C * ~d - B * ~e) * (~x) ^ 2) - D * ~e * (~x) ^ 4) / (((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2) * sqrt(~a + ~c * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && (LeQ(Expon(~Px, ~x), 3) && NeQ(~c * (~d) ^ 4 + ~a * (~e) ^ 4, 0)))
    @apply_utils Antiderivative((~Px * (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) ^ ~(p')) / (~d + ~(e') * ~x), ~x) => ~d * Antiderivative((~Px * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) - ~e * Antiderivative((~x * ~Px * (~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4) ^ ~p) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && IntegerQ(~p + 1 / 2))
    @apply_utils Antiderivative((~Px * (~a + ~(c') * (~x) ^ 4) ^ ~(p')) / (~d + ~(e') * ~x), ~x) => ~d * Antiderivative((~Px * (~a + ~c * (~x) ^ 4) ^ ~p) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) - ~e * Antiderivative((~x * ~Px * (~a + ~c * (~x) ^ 4) ^ ~p) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (PolyQ(~Px, ~x) && IntegerQ(~p + 1 / 2))
end
