int_rules_1_2_3_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.3.4*(f*x)^m*(d+e*x^n)^q*(a+b*x^n+c*x^(2*n))^p =#
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((~f) ^ ~m / (~n * (~e) ^ ((~m + 1) / ~n - 1))) * Subst(Antiderivative((~e * ~x) ^ ((~q + (~m + 1) / ~n) - 1) * (~a + ~b * ~x + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && ((IntegerQ(~m) || GtQ(~f, 0)) && IntegerQ(Simplify((~m + 1) / ~n))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((~f) ^ ~m / (~n * (~e) ^ ((~m + 1) / ~n - 1))) * Subst(Antiderivative((~e * ~x) ^ ((~q + (~m + 1) / ~n) - 1) * (~a + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~c, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && ((IntegerQ(~m) || GtQ(~f, 0)) && IntegerQ(Simplify((~m + 1) / ~n))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ ~m * (~e) ^ IntPart(~q) * (~e * (~x) ^ ~n) ^ FracPart(~q)) / (~x) ^ (~n * FracPart(~q))) * Antiderivative((~x) ^ (~m + ~n * ~q) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && ((IntegerQ(~m) || GtQ(~f, 0)) && Not(IntegerQ(Simplify((~m + 1) / ~n)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ ~m * (~e) ^ IntPart(~q) * (~e * (~x) ^ ~n) ^ FracPart(~q)) / (~x) ^ (~n * FracPart(~q))) * Antiderivative((~x) ^ (~m + ~n * ~q) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && ((IntegerQ(~m) || GtQ(~f, 0)) && Not(IntegerQ(Simplify((~m + 1) / ~n)))))
    @apply_utils Antiderivative((~f * ~x) ^ ~(m') * (~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative((~f * ~x) ^ ~(m') * (~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~d + ~e * ~x) ^ ~q * (~a + ~b * ~x + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(Simplify((~m - ~n) + 1), 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~d + ~e * ~x) ^ ~q * (~a + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(Simplify((~m - ~n) + 1), 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m + ~n * (2 * ~p + ~q)) * (~e + ~d * (~x) ^ -(~n)) ^ ~q * (~c + ~b * (~x) ^ -(~n) + ~a * (~x) ^ (-2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (IntegersQ(~p, ~q) && NegQ(~n)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m + ~n * (2 * ~p + ~q)) * (~e + ~d * (~x) ^ -(~n)) ^ ~q * (~c + ~a * (~x) ^ (-2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (IntegersQ(~p, ~q) && NegQ(~n)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * (~d + ~e * ~x) ^ ~q * (~a + ~b * ~x + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (Not(IntegerQ(~p)) && (IGtQ(~m, 0) && (IGtQ(~n, 0) && IGtQ((~m + 1) / ~n, 0))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~c) ^ IntPart(~p) * (~b / 2 + ~c * (~x) ^ ~n) ^ (2 * FracPart(~p)))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~b / 2 + ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~d + ~e * ~x) ^ ~q * (~a + ~b * ~x + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~d + ~e * ~x) ^ ~q * (~a + ~c * (~x) ^ 2) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~f * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~f * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + ~p) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + ~p) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~q, ~m, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~d + ~e * (~x) ^ ~n) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ ~n) / ~e) ^ FracPart(~p))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + ~p) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~d + ~e * (~x) ^ ~n) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ ~n) / ~e) ^ FracPart(~p))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + ~p) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) * ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2) ^ ~p * (~x) ^ (Mod(~m, ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1)) + (1 / (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1))) * Antiderivative((~x) ^ Mod(~m, ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * ExpandToSum(Together((1 / (~d + ~e * (~x) ^ ~n)) * (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1) * (~x) ^ (~m - Mod(~m, ~n)) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p - (-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) * ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2) ^ ~p * (~d * (Mod(~m, ~n) + 1) + ~e * (Mod(~m, ~n) + ~n * (~q + 1) + 1) * (~x) ^ ~n))), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (ILtQ(~q, -1) && IGtQ(~m, 0))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) * (~c * (~d) ^ 2 + ~a * (~e) ^ 2) ^ ~p * (~x) ^ (Mod(~m, ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1)) + (1 / (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1))) * Antiderivative((~x) ^ Mod(~m, ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * ExpandToSum(Together((1 / (~d + ~e * (~x) ^ ~n)) * (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1) * (~x) ^ (~m - Mod(~m, ~n)) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p - (-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) * (~c * (~d) ^ 2 + ~a * (~e) ^ 2) ^ ~p * (~d * (Mod(~m, ~n) + 1) + ~e * (Mod(~m, ~n) + ~n * (~q + 1) + 1) * (~x) ^ ~n))), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (ILtQ(~q, -1) && IGtQ(~m, 0)))))
    @apply_utils Antiderivative((~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) * ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2) ^ ~p * (~x) ^ (Mod(~m, ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1)) + ((-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) / (~n * (~e) ^ (2 * ~p) * (~q + 1))) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * ExpandToSum(Together((1 / (~d + ~e * (~x) ^ ~n)) * (~n * (-(~d)) ^ (-((~m - Mod(~m, ~n))) / ~n + 1) * (~e) ^ (2 * ~p) * (~q + 1) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p - ((~e) ^ (-((~m - Mod(~m, ~n))) / ~n) * ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2) ^ ~p * (~x) ^ -((~m - Mod(~m, ~n)))) * (~d * (Mod(~m, ~n) + 1) + ~e * (Mod(~m, ~n) + ~n * (~q + 1) + 1) * (~x) ^ ~n))), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (ILtQ(~q, -1) && ILtQ(~m, 0))))))
    @apply_utils Antiderivative((~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) * (~c * (~d) ^ 2 + ~a * (~e) ^ 2) ^ ~p * (~x) ^ (Mod(~m, ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~n * (~e) ^ (2 * ~p + (~m - Mod(~m, ~n)) / ~n) * (~q + 1)) + ((-(~d)) ^ ((~m - Mod(~m, ~n)) / ~n - 1) / (~n * (~e) ^ (2 * ~p) * (~q + 1))) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * ExpandToSum(Together((1 / (~d + ~e * (~x) ^ ~n)) * (~n * (-(~d)) ^ (-((~m - Mod(~m, ~n))) / ~n + 1) * (~e) ^ (2 * ~p) * (~q + 1) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p - ((~e) ^ (-((~m - Mod(~m, ~n))) / ~n) * (~c * (~d) ^ 2 + ~a * (~e) ^ 2) ^ ~p * (~x) ^ -((~m - Mod(~m, ~n)))) * (~d * (Mod(~m, ~n) + 1) + ~e * (Mod(~m, ~n) + ~n * (~q + 1) + 1) * (~x) ^ ~n))), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (IntegersQ(~m, ~q) && (ILtQ(~q, -1) && ILtQ(~m, 0))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((~c) ^ ~p * (~f * ~x) ^ (((~m + 2 * ~n * ~p) - ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~e * (~f) ^ ((2 * ~n * ~p - ~n) + 1) * (~m + 2 * ~n * ~p + ~n * ~q + 1)) + (1 / (~e * (~m + 2 * ~n * ~p + ~n * ~q + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * ExpandToSum(~e * (~m + 2 * ~n * ~p + ~n * ~q + 1) * ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p - (~c) ^ ~p * (~x) ^ (2 * ~n * ~p)) - ~d * (~c) ^ ~p * (((~m + 2 * ~n * ~p) - ~n) + 1) * (~x) ^ (2 * ~n * ~p - ~n), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (GtQ(2 * ~n * ~p, ~n - 1) && (Not(IntegerQ(~q)) && NeQ(~m + 2 * ~n * ~p + ~n * ~q + 1, 0)))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => ((~c) ^ ~p * (~f * ~x) ^ (((~m + 2 * ~n * ~p) - ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~e * (~f) ^ ((2 * ~n * ~p - ~n) + 1) * (~m + 2 * ~n * ~p + ~n * ~q + 1)) + (1 / (~e * (~m + 2 * ~n * ~p + ~n * ~q + 1))) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * ExpandToSum(~e * (~m + 2 * ~n * ~p + ~n * ~q + 1) * ((~a + ~c * (~x) ^ (2 * ~n)) ^ ~p - (~c) ^ ~p * (~x) ^ (2 * ~n * ~p)) - ~d * (~c) ^ ~p * (((~m + 2 * ~n * ~p) - ~n) + 1) * (~x) ^ (2 * ~n * ~p - ~n), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (GtQ(2 * ~n * ~p, ~n - 1) && (Not(IntegerQ(~q)) && NeQ(~m + 2 * ~n * ~p + ~n * ~q + 1, 0))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && IGtQ(~p, 0)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && IGtQ(~p, 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([k = GCD(~m + 1, ~n)], (1 / k) * Subst(Antiderivative((~x) ^ ((~m + 1) / k - 1) * (~d + ~e * (~x) ^ (~n / k)) ^ ~q * (~a + ~b * (~x) ^ (~n / k) + ~c * (~x) ^ ((2 * ~n) / k)) ^ ~p, ~x), ~x, (~x) ^ k) <-- k != 1) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && IntegerQ(~m))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([k = GCD(~m + 1, ~n)], (1 / k) * Subst(Antiderivative((~x) ^ ((~m + 1) / k - 1) * (~d + ~e * (~x) ^ (~n / k)) ^ ~q * (~a + ~c * (~x) ^ ((2 * ~n) / k)) ^ ~p, ~x), ~x, (~x) ^ k) <-- k != 1) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([k = Denominator(~m)], (k / ~f) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~d + (~e * (~x) ^ (k * ~n)) / (~f) ^ ~n) ^ ~q * (~a + (~b * (~x) ^ (k * ~n)) / (~f) ^ ~n + (~c * (~x) ^ (2 * k * ~n)) / (~f) ^ (2 * ~n)) ^ ~p, ~x), ~x, (~f * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (FractionQ(~m) && IntegerQ(~p)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([k = Denominator(~m)], (k / ~f) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~d + (~e * (~x) ^ (k * ~n)) / ~f) ^ ~q * (~a + (~c * (~x) ^ (2 * k * ~n)) / ~f) ^ ~p, ~x), ~x, (~f * ~x) ^ (1 / k))) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (FractionQ(~m) && IntegerQ(~p))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ((~f * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p * (~d * (~m + ~n * (2 * ~p + 1) + 1) + ~e * (~m + 1) * (~x) ^ ~n)) / (~f * (~m + 1) * (~m + ~n * (2 * ~p + 1) + 1)) + ((~n * ~p) / ((~f) ^ ~n * (~m + 1) * (~m + ~n * (2 * ~p + 1) + 1))) * Antiderivative((~f * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1) * Simp((2 * ~a * ~e * (~m + 1) - ~b * ~d * (~m + ~n * (2 * ~p + 1) + 1)) + (~b * ~e * (~m + 1) - 2 * ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && (LtQ(~m, -1) && (NeQ(~m + ~n * (2 * ~p + 1) + 1, 0) && IntegerQ(~p)))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ((~f * ~x) ^ (~m + 1) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p * (~d * (~m + ~n * (2 * ~p + 1) + 1) + ~e * (~m + 1) * (~x) ^ ~n)) / (~f * (~m + 1) * (~m + ~n * (2 * ~p + 1) + 1)) + ((2 * ~n * ~p) / ((~f) ^ ~n * (~m + 1) * (~m + ~n * (2 * ~p + 1) + 1))) * Antiderivative((~f * ~x) ^ (~m + ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1) * (~a * ~e * (~m + 1) - ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1) * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (GtQ(~p, 0) && (LtQ(~m, -1) && (NeQ(~m + ~n * (2 * ~p + 1) + 1, 0) && IntegerQ(~p))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ((~f * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p * (~b * ~e * ~n * ~p + ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1) + ~c * ~e * (2 * ~n * ~p + ~m + 1) * (~x) ^ ~n)) / (~c * ~f * (2 * ~n * ~p + ~m + 1) * (~m + ~n * (2 * ~p + 1) + 1)) + ((~n * ~p) / (~c * (2 * ~n * ~p + ~m + 1) * (~m + ~n * (2 * ~p + 1) + 1))) * Antiderivative((~f * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1) * Simp((2 * ~a * ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1) - ~a * ~b * ~e * (~m + 1)) + ((2 * ~a * ~c * ~e * (2 * ~n * ~p + ~m + 1) + ~b * ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1)) - (~b) ^ 2 * ~e * (~m + ~n * ~p + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && (NeQ(2 * ~n * ~p + ~m + 1, 0) && (NeQ(~m + ~n * (2 * ~p + 1) + 1, 0) && IntegerQ(~p)))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ((~f * ~x) ^ (~m + 1) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p * (~c * ~d * (~m + ~n * (2 * ~p + 1) + 1) + ~c * ~e * (2 * ~n * ~p + ~m + 1) * (~x) ^ ~n)) / (~c * ~f * (2 * ~n * ~p + ~m + 1) * (~m + ~n * (2 * ~p + 1) + 1)) + ((2 * ~a * ~n * ~p) / ((2 * ~n * ~p + ~m + 1) * (~m + ~n * (2 * ~p + 1) + 1))) * Antiderivative((~f * ~x) ^ ~m * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1) * Simp(~d * (~m + ~n * (2 * ~p + 1) + 1) + ~e * (2 * ~n * ~p + ~m + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (GtQ(~p, 0) && (NeQ(2 * ~n * ~p + ~m + 1, 0) && (NeQ(~m + ~n * (2 * ~p + 1) + 1, 0) && IntegerQ(~p))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ((~f) ^ (~n - 1) * (~f * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * ((~b * ~d - 2 * ~a * ~e) - (~b * ~e - 2 * ~c * ~d) * (~x) ^ ~n)) / (~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + ((~f) ^ ~n / (~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * Simp(((~n - ~m) - 1) * (~b * ~d - 2 * ~a * ~e) + (2 * ~n * ~p + 2 * ~n + ~m + 1) * (~b * ~e - 2 * ~c * ~d) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GtQ(~m, ~n - 1) && IntegerQ(~p))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ((~f) ^ (~n - 1) * (~f * ~x) ^ ((~m - ~n) + 1) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * (~a * ~e - ~c * ~d * (~x) ^ ~n)) / (2 * ~a * ~c * ~n * (~p + 1)) + ((~f) ^ ~n / (2 * ~a * ~c * ~n * (~p + 1))) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * (~a * ~e * ((~n - ~m) - 1) + ~c * ~d * (2 * ~n * ~p + 2 * ~n + ~m + 1) * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GtQ(~m, ~n - 1) && IntegerQ(~p)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (-((~f * ~x) ^ (~m + 1)) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * ((~d * ((~b) ^ 2 - 2 * ~a * ~c) - ~a * ~b * ~e) + (~b * ~d - 2 * ~a * ~e) * ~c * (~x) ^ ~n)) / (~a * ~f * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / (~a * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((~f * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * Simp((~d * ((~b) ^ 2 * (~m + ~n * (~p + 1) + 1) - 2 * ~a * ~c * (~m + 2 * ~n * (~p + 1) + 1)) - ~a * ~b * ~e * (~m + 1)) + ~c * (~m + ~n * (2 * ~p + 3) + 1) * (~b * ~d - 2 * ~a * ~e) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && IntegerQ(~p)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (-((~f * ~x) ^ (~m + 1)) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * (~d + ~e * (~x) ^ ~n)) / (2 * ~a * ~f * ~n * (~p + 1)) + (1 / (2 * ~a * ~n * (~p + 1))) * Antiderivative((~f * ~x) ^ ~m * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * Simp(~d * (~m + 2 * ~n * (~p + 1) + 1) + ~e * (~m + ~n * (2 * ~p + 3) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (LtQ(~p, -1) && IntegerQ(~p))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (~e * (~f) ^ (~n - 1) * (~f * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~c * (~m + ~n * (2 * ~p + 1) + 1)) - ((~f) ^ ~n / (~c * (~m + ~n * (2 * ~p + 1) + 1))) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p * Simp(~a * ~e * ((~m - ~n) + 1) + (~b * ~e * (~m + ~n * ~p + 1) - ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~m, ~n - 1) && (NeQ(~m + ~n * (2 * ~p + 1) + 1, 0) && IntegerQ(~p))))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (~e * (~f) ^ (~n - 1) * (~f * ~x) ^ ((~m - ~n) + 1) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~c * (~m + ~n * (2 * ~p + 1) + 1)) - ((~f) ^ ~n / (~c * (~m + ~n * (2 * ~p + 1) + 1))) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p * (~a * ~e * ((~m - ~n) + 1) - ~c * ~d * (~m + ~n * (2 * ~p + 1) + 1) * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (GtQ(~m, ~n - 1) && (NeQ(~m + ~n * (2 * ~p + 1) + 1, 0) && IntegerQ(~p)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (~d * (~f * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~a * ~f * (~m + 1)) + (1 / (~a * (~f) ^ ~n * (~m + 1))) * Antiderivative((~f * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p * Simp((~a * ~e * (~m + 1) - ~b * ~d * (~m + ~n * (~p + 1) + 1)) - ~c * ~d * (~m + 2 * ~n * (~p + 1) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~m, -1) && IntegerQ(~p)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (~d * (~f * ~x) ^ (~m + 1) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~a * ~f * (~m + 1)) + (1 / (~a * (~f) ^ ~n * (~m + 1))) * Antiderivative((~f * ~x) ^ (~m + ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p * (~a * ~e * (~m + 1) - ~c * ~d * (~m + 2 * ~n * (~p + 1) + 1) * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (LtQ(~m, -1) && IntegerQ(~p))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n)) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a * ~c, 2)], With([r = Rt(2 * ~c * q - ~b * ~c, 2)], (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * Simp(~d * r - (~c * ~d - ~e * q) * (~x) ^ (~n / 2), ~x)) / ((q - r * (~x) ^ (~n / 2)) + ~c * (~x) ^ ~n), ~x) + (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * Simp(~d * r + (~c * ~d - ~e * q) * (~x) ^ (~n / 2), ~x)) / (q + r * (~x) ^ (~n / 2) + ~c * (~x) ^ ~n), ~x)) <-- Not(LtQ(2 * ~c * q - ~b * ~c, 0))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (LtQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegersQ(~m, ~n / 2) && (LtQ(0, ~m, ~n) && PosQ(~a * ~c)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n)) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a * ~c, 2)], With([r = Rt(2 * ~c * q, 2)], (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * Simp(~d * r - (~c * ~d - ~e * q) * (~x) ^ (~n / 2), ~x)) / ((q - r * (~x) ^ (~n / 2)) + ~c * (~x) ^ ~n), ~x) + (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * Simp(~d * r + (~c * ~d - ~e * q) * (~x) ^ (~n / 2), ~x)) / (q + r * (~x) ^ (~n / 2) + ~c * (~x) ^ ~n), ~x)) <-- Not(LtQ(2 * ~c * q, 0))) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (GtQ(~a * ~c, 0) && (IntegersQ(~m, ~n / 2) && LtQ(0, ~m, ~n))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n)) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a * ~c, 2)], With([r = Rt(2 * ~c * q - ~b * ~c, 2)], (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * (~d * r - (~c * ~d - ~e * q) * (~x) ^ (~n / 2))) / ((q - r * (~x) ^ (~n / 2)) + ~c * (~x) ^ ~n), ~x) + (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * (~d * r + (~c * ~d - ~e * q) * (~x) ^ (~n / 2))) / (q + r * (~x) ^ (~n / 2) + ~c * (~x) ^ ~n), ~x)) <-- Not(LtQ(2 * ~c * q - ~b * ~c, 0))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (LtQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n / 2, 1) && PosQ(~a * ~c))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n)) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a * ~c, 2)], With([r = Rt(2 * ~c * q, 2)], (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * (~d * r - (~c * ~d - ~e * q) * (~x) ^ (~n / 2))) / ((q - r * (~x) ^ (~n / 2)) + ~c * (~x) ^ ~n), ~x) + (~c / (2 * q * r)) * Antiderivative(((~f * ~x) ^ ~m * (~d * r + (~c * ~d - ~e * q) * (~x) ^ (~n / 2))) / (q + r * (~x) ^ (~n / 2) + ~c * (~x) ^ ~n), ~x)) <-- Not(LtQ(2 * ~c * q, 0))) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n / 2, 1) && GtQ(~a * ~c, 0)))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n)) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (~e / 2 + (2 * ~c * ~d - ~b * ~e) / (2q)) * Antiderivative((~f * ~x) ^ ~m / ((~b / 2 - q / 2) + ~c * (~x) ^ ~n), ~x) + (~e / 2 - (2 * ~c * ~d - ~b * ~e) / (2q)) * Antiderivative((~f * ~x) ^ ~m / (~b / 2 + q / 2 + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IGtQ(~n, 0)))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n)) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(-(~a) * ~c, 2)], -((~e / 2 + (~c * ~d) / (2q))) * Antiderivative((~f * ~x) ^ ~m / (q - ~c * (~x) ^ ~n), ~x) + (~e / 2 - (~c * ~d) / (2q)) * Antiderivative((~f * ~x) ^ ~m / (q + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && IGtQ(~n, 0))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q')) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (IntegerQ(~q) && IntegerQ(~m)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q')) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q) / (~a + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (IntegerQ(~q) && IntegerQ(~m))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q')) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m, (~d + ~e * (~x) ^ ~n) ^ ~q / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (IntegerQ(~q) && Not(IntegerQ(~m))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q')) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m, (~d + ~e * (~x) ^ ~n) ^ ~q / (~a + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (IntegerQ(~q) && Not(IntegerQ(~m)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => ((~f) ^ (2 * ~n) / (~c) ^ 2) * Antiderivative((~f * ~x) ^ (~m - 2 * ~n) * ((~c * ~d - ~b * ~e) + ~c * ~e * (~x) ^ ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1), ~x) - ((~f) ^ (2 * ~n) / (~c) ^ 2) * Antiderivative(((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * (~c * ~d - ~b * ~e) + ((~b * ~c * ~d - (~b) ^ 2 * ~e) + ~a * ~c * ~e) * (~x) ^ ~n, ~x)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (GtQ(~q, 0) && GtQ(~m, 2 * ~n - 1))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => ((~f) ^ (2 * ~n) / ~c) * Antiderivative((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) - ((~a * (~f) ^ (2 * ~n)) / ~c) * Antiderivative(((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ ~q) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && GtQ(~m, 2 * ~n - 1))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => ((~e * (~f) ^ ~n) / ~c) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1), ~x) - ((~f) ^ ~n / ~c) * Antiderivative(((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * ~e - (~c * ~d - ~b * ~e) * (~x) ^ ~n, ~x)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (GtQ(~q, 0) && (GtQ(~m, ~n - 1) && LeQ(~m, 2 * ~n - 1)))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => ((~e * (~f) ^ ~n) / ~c) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1), ~x) - ((~f) ^ ~n / ~c) * Antiderivative(((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * ~e - ~c * ~d * (~x) ^ ~n, ~x)) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (GtQ(~q, 0) && (GtQ(~m, ~n - 1) && LeQ(~m, 2 * ~n - 1))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => (~d / ~a) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q - 1), ~x) - (1 / (~a * (~f) ^ ~n)) * Antiderivative(((~f * ~x) ^ (~m + ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1) * Simp((~b * ~d - ~a * ~e) + ~c * ~d * (~x) ^ ~n, ~x)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (GtQ(~q, 0) && LtQ(~m, 0))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => (~d / ~a) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q - 1), ~x) + (1 / (~a * (~f) ^ ~n)) * Antiderivative(((~f * ~x) ^ (~m + ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * ~e - ~c * ~d * (~x) ^ ~n, ~x)) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (GtQ(~q, 0) && LtQ(~m, 0)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => (((~d) ^ 2 * (~f) ^ (2 * ~n)) / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) - ((~f) ^ (2 * ~n) / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * Simp(~a * ~d + (~b * ~d - ~a * ~e) * (~x) ^ ~n, ~x)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (LtQ(~q, -1) && GtQ(~m, 2 * ~n - 1))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => (((~d) ^ 2 * (~f) ^ (2 * ~n)) / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) - ((~a * (~f) ^ (2 * ~n)) / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - 2 * ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * (~d - ~e * (~x) ^ ~n)) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (LtQ(~q, -1) && GtQ(~m, 2 * ~n - 1)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => ((-(~d) * ~e * (~f) ^ ~n) / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) + ((~f) ^ ~n / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * Simp(~a * ~e + ~c * ~d * (~x) ^ ~n, ~x)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (LtQ(~q, -1) && (GtQ(~m, ~n - 1) && LeQ(~m, 2 * ~n - 1)))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(d') + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => ((-(~d) * ~e * (~f) ^ ~n) / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) + ((~f) ^ ~n / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - ~n) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * Simp(~a * ~e + ~c * ~d * (~x) ^ ~n, ~x)) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && (LtQ(~q, -1) && (GtQ(~m, ~n - 1) && LeQ(~m, 2 * ~n - 1))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => ((~e) ^ 2 / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) + (1 / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * Simp((~c * ~d - ~b * ~e) - ~c * ~e * (~x) ^ ~n, ~x)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && LtQ(~q, -1)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~n2), ~x) => ((~e) ^ 2 / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x) + (~c / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ (~q + 1) * (~d - ~e * (~x) ^ ~n)) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && LtQ(~q, -1))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q, (~f * ~x) ^ ~m / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~q, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && IntegerQ(~m)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q, (~f * ~x) ^ ~m / (~a + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~q, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && IntegerQ(~m))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q, 1 / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~q, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && Not(IntegerQ(~m))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q, 1 / (~a + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~q, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (Not(IntegerQ(~q)) && Not(IntegerQ(~m)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p')) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => (1 / (~d) ^ 2) * Antiderivative((~f * ~x) ^ ~m * (~a * ~d + (~b * ~d - ~a * ~e) * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1), ~x) + (((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2) / ((~d) ^ 2 * (~f) ^ (2 * ~n))) * Antiderivative(((~f * ~x) ^ (~m + 2 * ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && LtQ(~m, -(~n))))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p')) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => (~a / (~d) ^ 2) * Antiderivative((~f * ~x) ^ ~m * (~d - ~e * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1), ~x) + ((~c * (~d) ^ 2 + ~a * (~e) ^ 2) / ((~d) ^ 2 * (~f) ^ (2 * ~n))) * Antiderivative(((~f * ~x) ^ (~m + 2 * ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (GtQ(~p, 0) && LtQ(~m, -(~n)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p')) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => (1 / (~d * ~e)) * Antiderivative((~f * ~x) ^ ~m * (~a * ~e + ~c * ~d * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1), ~x) - (((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2) / (~d * ~e * (~f) ^ ~n)) * Antiderivative(((~f * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && LtQ(~m, 0)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~m * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p')) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => (1 / (~d * ~e)) * Antiderivative((~f * ~x) ^ ~m * (~a * ~e + ~c * ~d * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1), ~x) - ((~c * (~d) ^ 2 + ~a * (~e) ^ 2) / (~d * ~e * (~f) ^ ~n)) * Antiderivative(((~f * ~x) ^ (~m + ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p - 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (GtQ(~p, 0) && LtQ(~m, 0))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => (-((~f) ^ (2 * ~n)) / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - 2 * ~n) * (~a * ~d + (~b * ~d - ~a * ~e) * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) + (((~d) ^ 2 * (~f) ^ (2 * ~n)) / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - 2 * ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && GtQ(~m, ~n)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => ((-(~a) * (~f) ^ (2 * ~n)) / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - 2 * ~n) * (~d - ~e * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) + (((~d) ^ 2 * (~f) ^ (2 * ~n)) / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - 2 * ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (LtQ(~p, -1) && GtQ(~m, ~n))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => ((~f) ^ ~n / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~a * ~e + ~c * ~d * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) - ((~d * ~e * (~f) ^ ~n) / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && GtQ(~m, 0)))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p) / (~(d') + ~(e') * (~x) ^ ~n), ~x) => ((~f) ^ ~n / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative((~f * ~x) ^ (~m - ~n) * (~a * ~e + ~c * ~d * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) - ((~d * ~e * (~f) ^ ~n) / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative(((~f * ~x) ^ (~m - ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~d + ~e * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && (LtQ(~p, -1) && GtQ(~m, 0))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, (~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (IGtQ(~q, 0) || IntegersQ(~m, ~q)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, (~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~n, 0) && IGtQ(~q, 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -(Subst(Antiderivative(((~d + ~e * (~x) ^ -(~n)) ^ ~q * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ (-2 * ~n)) ^ ~p) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (ILtQ(~n, 0) && IntegerQ(~m))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -(Subst(Antiderivative(((~d + ~e * (~x) ^ -(~n)) ^ ~q * (~a + ~c * (~x) ^ (-2 * ~n)) ^ ~p) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (ILtQ(~n, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([g = Denominator(~m)], (-g / ~f) * Subst(Antiderivative(((~d + ~e * (~f) ^ -(~n) * (~x) ^ (-g * ~n)) ^ ~q * (~a + ~b * (~f) ^ -(~n) * (~x) ^ (-g * ~n) + ~c * (~f) ^ (-2 * ~n) * (~x) ^ (-2 * g * ~n)) ^ ~p) / (~x) ^ (g * (~m + 1) + 1), ~x), ~x, 1 / (~f * ~x) ^ (1 / g))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (ILtQ(~n, 0) && FractionQ(~m))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([g = Denominator(~m)], (-g / ~f) * Subst(Antiderivative(((~d + ~e * (~f) ^ -(~n) * (~x) ^ (-g * ~n)) ^ ~q * (~a + ~c * (~f) ^ (-2 * ~n) * (~x) ^ (-2 * g * ~n)) ^ ~p) / (~x) ^ (g * (~m + 1) + 1), ~x), ~x, 1 / (~f * ~x) ^ (1 / g))) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (ILtQ(~n, 0) && FractionQ(~m)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -((~f) ^ IntPart(~m)) * (~f * ~x) ^ FracPart(~m) * ((~x) ^ -1) ^ FracPart(~m) * Subst(Antiderivative(((~d + ~e * (~x) ^ -(~n)) ^ ~q * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ (-2 * ~n)) ^ ~p) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (ILtQ(~n, 0) && Not(RationalQ(~m)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -((~f) ^ IntPart(~m)) * (~f * ~x) ^ FracPart(~m) * ((~x) ^ -1) ^ FracPart(~m) * Subst(Antiderivative(((~d + ~e * (~x) ^ -(~n)) ^ ~q * (~a + ~c * (~x) ^ (-2 * ~n)) ^ ~p) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (ILtQ(~n, 0) && Not(RationalQ(~m))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([g = Denominator(~n)], g * Subst(Antiderivative((~x) ^ (g * (~m + 1) - 1) * (~d + ~e * (~x) ^ (g * ~n)) ^ ~q * (~a + ~b * (~x) ^ (g * ~n) + ~c * (~x) ^ (2 * g * ~n)) ^ ~p, ~x), ~x, (~x) ^ (1 / g))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && FractionQ(~n)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([g = Denominator(~n)], g * Subst(Antiderivative((~x) ^ (g * (~m + 1) - 1) * (~d + ~e * (~x) ^ (g * ~n)) ^ ~q * (~a + ~c * (~x) ^ (2 * g * ~n)) ^ ~p, ~x), ~x, (~x) ^ (1 / g))) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && FractionQ(~n))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && FractionQ(~n)))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && FractionQ(~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~d + ~e * (~x) ^ Simplify(~n / (~m + 1))) ^ ~q * (~a + ~b * (~x) ^ Simplify(~n / (~m + 1)) + ~c * (~x) ^ Simplify((2 * ~n) / (~m + 1))) ^ ~p, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~d + ~e * (~x) ^ Simplify(~n / (~m + 1))) ^ ~q * (~a + ~c * (~x) ^ Simplify((2 * ~n) / (~m + 1))) ^ ~p, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n))))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n))))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')), ~x) => With([r = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], ((2 * ~c) / r) * Antiderivative(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q) / ((~b - r) + 2 * ~c * (~x) ^ ~n), ~x) - ((2 * ~c) / r) * Antiderivative(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q) / (~b + r + 2 * ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0))
    @apply_utils Antiderivative(((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q) / (~a + ~(c') * (~x) ^ ~(n2')), ~x) => With([r = Rt(-(~a) * ~c, 2)], (-(~c) / (2r)) * Antiderivative(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q) / (r - ~c * (~x) ^ ~n), ~x) - (~c / (2r)) * Antiderivative(((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q) / (r + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n, ~q], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (-((~f * ~x) ^ (~m + 1)) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * ((~d * ((~b) ^ 2 - 2 * ~a * ~c) - ~a * ~b * ~e) + (~b * ~d - 2 * ~a * ~e) * ~c * (~x) ^ ~n)) / (~a * ~f * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / (~a * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((~f * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * Simp((~d * ((~b) ^ 2 * (~m + ~n * (~p + 1) + 1) - 2 * ~a * ~c * (~m + 2 * ~n * (~p + 1) + 1)) - ~a * ~b * ~e * (~m + 1)) + (~m + ~n * (2 * ~p + 3) + 1) * (~b * ~d - 2 * ~a * ~e) * ~c * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && ILtQ(~p + 1, 0)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (-((~f * ~x) ^ (~m + 1)) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * (~d + ~e * (~x) ^ ~n)) / (2 * ~a * ~f * ~n * (~p + 1)) + (1 / (2 * ~a * ~n * (~p + 1))) * Antiderivative((~f * ~x) ^ ~m * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1) * Simp(~d * (~m + 2 * ~n * (~p + 1) + 1) + ~e * (~m + ~n * (2 * ~p + 3) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && ILtQ(~p + 1, 0))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~p, 0) || IGtQ(~q, 0))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~p, 0) || IGtQ(~q, 0)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~f * ~x) ^ ~m / (~x) ^ ~m) * Antiderivative(ExpandIntegrand((~x) ^ ~m * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, (~d / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ (2 * ~n)) - (~e * (~x) ^ ~n) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ (2 * ~n))) ^ -(~q), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ(~p)) && ILtQ(~q, 0)))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Unintegrable((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Unintegrable((~f * ~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~u) ^ ~(m') * (~d + ~(e') * (~v) ^ ~n) ^ ~(q') * (~a + ~(b') * (~v) ^ ~n + ~(c') * (~v) ^ ~(n2')) ^ ~(p'), ~x) => ((~u) ^ ~m / (Coefficient(~v, ~x, 1) * (~v) ^ ~m)) * Subst(Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~v) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (LinearPairQ(~u, ~v, ~x) && NeQ(~v, ~x)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~d + ~(e') * (~v) ^ ~n) ^ ~(q') * (~a + ~(c') * (~v) ^ ~(n2')) ^ ~(p'), ~x) => ((~u) ^ ~m / (Coefficient(~v, ~x, 1) * (~v) ^ ~m)) * Subst(Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~v) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (LinearPairQ(~u, ~v, ~x) && NeQ(~v, ~x)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(mn')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m - ~n * ~q) * (~e + ~d * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~mn, -(~n)) && (IntegerQ(~q) && (PosQ(~n) || Not(IntegerQ(~p))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(mn')) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m + ~mn * ~q) * (~e + ~d * (~x) ^ -(~mn)) ^ ~q * (~a + ~c * (~x) ^ ~n2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~mn, ~p], ~x) && (EqQ(~n2, -2 * ~mn) && (IntegerQ(~q) && (PosQ(~n2) || Not(IntegerQ(~p)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(mn') + ~(c') * (~x) ^ ~(mn2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m - 2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~b * (~x) ^ ~n + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~q], ~x) && (EqQ(~mn, -(~n)) && (EqQ(~mn2, 2 * ~mn) && IntegerQ(~p)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(c') * (~x) ^ ~(mn2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m - 2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n, ~q], ~x) && (EqQ(~mn2, -2 * ~n) && IntegerQ(~p))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(mn')) ^ ~q * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~e) ^ IntPart(~q) * (~x) ^ (~n * FracPart(~q)) * (~d + ~e * (~x) ^ -(~n)) ^ FracPart(~q)) / (1 + (~d * (~x) ^ ~n) / ~e) ^ FracPart(~q)) * Antiderivative((~x) ^ (~m - ~n * ~q) * (1 + (~d * (~x) ^ ~n) / ~e) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~mn, -(~n)) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(mn')) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~e) ^ IntPart(~q) * (~x) ^ (-(~mn) * FracPart(~q)) * (~d + ~e * (~x) ^ ~mn) ^ FracPart(~q)) / (1 + (~d * (~x) ^ -(~mn)) / ~e) ^ FracPart(~q)) * Antiderivative((~x) ^ (~m + ~mn * ~q) * (1 + (~d * (~x) ^ -(~mn)) / ~e) ^ ~q * (~a + ~c * (~x) ^ ~n2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~mn, ~p, ~q], ~x) && (EqQ(~n2, -2 * ~mn) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n2))))
    #= Antiderivative((~x)^(~m')*((~d)+(~e')*(~x)^(~mn'))^(~q)*((~a')+(~b')*(~x)^(~n')+(~c')*(~x)^(~n2'))^(~p'),(~x)*Symbol) :=  x^(n*FracPart(q))*(d+e*x^(-n))^FracPart(q)/(e+d*x^n)^FracPart(q)*Antiderivative( x^(m-n*q)*(e+d*x^n)^q*(a+b*x^n+c*x^(2*n))^p,x) <--  FreeQ([a,b,c,d,e,m,n,p,q],x) && EqQ(n2,2*n) && EqQ(mn,-n) &&  Not(IntegerQ(p)) && Not(IntegerQ(q)) && PosQ(n) =#
    #= Antiderivative((~x)^(~m')*((~d)+(~e')*(~x)^(~mn'))^(~q)*((~a)+(~c')*(~x)^(~n2'))^(~p'),~x) :=  x^(-mn*FracPart(q))*(d+e*x^mn)^FracPart(q)/(e+d*x^(-mn))^FracPart(q)* Antiderivative(x^(m+mn*q)*(e+d*x^(-mn))^q*(a+c*x^n2)^p,x) <--  FreeQ([a,c,d,e,m,mn,p,q],x) && EqQ(n2,-2*mn) && Not(IntegerQ(p)) &&  Not(IntegerQ(q)) && PosQ(n2) =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(mn') + ~(c') * (~x) ^ ~(mn2')) ^ ~p, ~x) => (((~x) ^ (2 * ~n * FracPart(~p)) * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ (-2 * ~n)) ^ FracPart(~p)) / (~c + ~b * (~x) ^ ~n + ~a * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~x) ^ (~m - 2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~b * (~x) ^ ~n + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~mn, -(~n)) && (EqQ(~mn2, 2 * ~mn) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(c') * (~x) ^ ~(mn2')) ^ ~p, ~x) => (((~x) ^ (2 * ~n * FracPart(~p)) * (~a + ~c * (~x) ^ (-2 * ~n)) ^ FracPart(~p)) / (~c + ~a * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~x) ^ (~m - 2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~mn2, -2 * ~n) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n))))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~(mn')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~mn) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && EqQ(~mn, -(~n)))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * (~d + ~(e') * (~x) ^ ~(mn')) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~mn) ^ ~q * (~a + ~c * (~x) ^ ~n2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~m, ~mn, ~p, ~q], ~x) && EqQ(~n2, -2 * ~mn)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m - ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~q], ~x) && (EqQ(~mn, -(~n)) && IntegerQ(~p))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~(p'), ~x) => (((~x) ^ (~n * FracPart(~p)) * (~a + ~b / (~x) ^ ~n + ~c * (~x) ^ ~n) ^ FracPart(~p)) / (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~x) ^ (~m - ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (EqQ(~mn, -(~n)) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative((~f * ~x) ^ ~(m') * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~(p'), ~x) => (((~f) ^ IntPart(~m) * (~f * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q], ~x) && EqQ(~mn, -(~n))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d1 + ~(e1') * (~x) ^ ~(non2')) ^ ~(q') * (~d2 + ~(e2') * (~x) ^ ~(non2')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * (~d1 * ~d2 + ~e1 * ~e2 * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d1, ~e1, ~d2, ~e2, ~f, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~non2, ~n / 2) && (EqQ(~d2 * ~e1 + ~d1 * ~e2, 0) && (IntegerQ(~q) || GtQ(~d1, 0) && GtQ(~d2, 0)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~d1 + ~(e1') * (~x) ^ ~(non2')) ^ ~(q') * (~d2 + ~(e2') * (~x) ^ ~(non2')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => (((~d1 + ~e1 * (~x) ^ (~n / 2)) ^ FracPart(~q) * (~d2 + ~e2 * (~x) ^ (~n / 2)) ^ FracPart(~q)) / (~d1 * ~d2 + ~e1 * ~e2 * (~x) ^ ~n) ^ FracPart(~q)) * Antiderivative((~f * ~x) ^ ~m * (~d1 * ~d2 + ~e1 * ~e2 * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d1, ~e1, ~d2, ~e2, ~f, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~non2, ~n / 2) && EqQ(~d2 * ~e1 + ~d1 * ~e2, 0)))
end
