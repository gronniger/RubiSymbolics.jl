int_rules_1_2_3_1 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.3.1*(a+b*x^n+c*x^(2*n))^p =#
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (2 * ~n * ~p) * (~c + ~b * (~x) ^ -(~n) + ~a * (~x) ^ (-2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c], ~x) && (EqQ(~n2, 2 * ~n) && (LtQ(~n, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => With([k = Denominator(~n)], k * Subst(Antiderivative((~x) ^ (k - 1) * (~a + ~b * (~x) ^ (k * ~n) + ~c * (~x) ^ (2 * k * ~n)) ^ ~p, ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~p], ~x) && (EqQ(~n2, 2 * ~n) && FractionQ(~n))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -(Subst(Antiderivative((~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ (-2 * ~n)) ^ ~p / (~x) ^ 2, ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~p], ~x) && (EqQ(~n2, 2 * ~n) && ILtQ(~n, 0))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p)) * Antiderivative((~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && EqQ((~b) ^ 2 - 4 * ~a * ~c, 0))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IGtQ(~p, 0)))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (-(~x) * (((~b) ^ 2 - 2 * ~a * ~c) + ~b * ~c * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~a * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / (~a * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((((~b) ^ 2 - 2 * ~a * ~c) + ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c) + ~b * ~c * (~n * (2 * ~p + 3) + 1) * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && ILtQ(~p, -1)))
    @apply_utils Antiderivative(1 / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a / ~c, 2)], With([r = Rt(2q - ~b / ~c, 2)], (1 / (2 * ~c * q * r)) * Antiderivative((r - (~x) ^ (~n / 2)) / ((q - r * (~x) ^ (~n / 2)) + (~x) ^ ~n), ~x) + (1 / (2 * ~c * q * r)) * Antiderivative((r + (~x) ^ (~n / 2)) / (q + r * (~x) ^ (~n / 2) + (~x) ^ ~n), ~x))) <-- FreeQ([~a, ~b, ~c], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n / 2, 0) && NegQ((~b) ^ 2 - 4 * ~a * ~c))))
    @apply_utils Antiderivative(1 / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (~c / q) * Antiderivative(1 / ((~b / 2 - q / 2) + ~c * (~x) ^ ~n), ~x) - (~c / q) * Antiderivative(1 / (~b / 2 + q / 2 + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c], ~x) && (EqQ(~n2, 2 * ~n) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => (((~a) ^ IntPart(~p) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p)) / ((1 + (2 * ~c * (~x) ^ ~n) / (~b + Rt((~b) ^ 2 - 4 * ~a * ~c, 2))) ^ FracPart(~p) * (1 + (2 * ~c * (~x) ^ ~n) / (~b - Rt((~b) ^ 2 - 4 * ~a * ~c, 2))) ^ FracPart(~p))) * Antiderivative((1 + (2 * ~c * (~x) ^ ~n) / (~b + sqrt((~b) ^ 2 - 4 * ~a * ~c))) ^ ~p * (1 + (2 * ~c * (~x) ^ ~n) / (~b - sqrt((~b) ^ 2 - 4 * ~a * ~c))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~a + ~(b') * (~u) ^ ~n + ~(c') * (~u) ^ ~(n2')) ^ ~p, ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (LinearQ(~u, ~x) && NeQ(~u, ~x)))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~(p'), ~x) => Antiderivative((~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ (~n * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~n], ~x) && (EqQ(~mn, -(~n)) && (IntegerQ(~p) && PosQ(~n)))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~p, ~x) => (((~x) ^ (~n * FracPart(~p)) * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ ~n) ^ FracPart(~p)) / (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ (~n * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~mn, -(~n)) && (Not(IntegerQ(~p)) && PosQ(~n)))
end
