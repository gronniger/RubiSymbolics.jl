int_rules_1_2_3_3 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.3.3*(d+e*x^n)^q*(a+b*x^n+c*x^(2*n))^p =#
    #= Antiderivative(((~d)+(~e')*(~x)^(~n'))^(~q')*((~a)+(~b')*(~x)^(~n')+(~c')*(~x)^(~n2'))^(~p),~x) :=   1/c^p*Antiderivative((d+e*x^n)^q*(b/2+c*x^n)^(2*p),x) <--  FreeQ([a,b,c,d,e,n,p,q],x) && EqQ(n2,2*n) && EqQ(b^2-4*a*c,0) &&  IntegerQ(p) =#
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~a + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~d + ~e * (~x) ^ ~n) ^ (2 * ~p)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~q + 2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (Not(IntegerQ(~p)) && EqQ(2 * ~c * ~d - ~b * ~e, 0))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~a + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~c) ^ IntPart(~p) * (~b / 2 + ~c * (~x) ^ ~n) ^ (2 * FracPart(~p)))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~b / 2 + ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~n * (2 * ~p + ~q)) * (~e + ~d * (~x) ^ -(~n)) ^ ~q * (~c + ~b * (~x) ^ -(~n) + ~a * (~x) ^ (-2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (IntegersQ(~p, ~q) && NegQ(~n)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~n * (2 * ~p + ~q)) * (~e + ~d * (~x) ^ -(~n)) ^ ~q * (~c + ~a * (~x) ^ (-2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (IntegersQ(~p, ~q) && NegQ(~n)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => -(Subst(Antiderivative(((~d + ~e * (~x) ^ -(~n)) ^ ~q * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ (-2 * ~n)) ^ ~p) / (~x) ^ 2, ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && ILtQ(~n, 0))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => -(Subst(Antiderivative(((~d + ~e * (~x) ^ -(~n)) ^ ~q * (~a + ~c * (~x) ^ (-2 * ~n)) ^ ~p) / (~x) ^ 2, ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && ILtQ(~n, 0))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => With([g = Denominator(~n)], g * Subst(Antiderivative((~x) ^ (g - 1) * (~d + ~e * (~x) ^ (g * ~n)) ^ ~q * (~a + ~b * (~x) ^ (g * ~n) + ~c * (~x) ^ (2 * g * ~n)) ^ ~p, ~x), ~x, (~x) ^ (1 / g))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && FractionQ(~n))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => With([g = Denominator(~n)], g * Subst(Antiderivative((~x) ^ (g - 1) * (~d + ~e * (~x) ^ (g * ~n)) ^ ~q * (~a + ~c * (~x) ^ (2 * g * ~n)) ^ ~p, ~x), ~x, (~x) ^ (1 / g))) <-- FreeQ([~a, ~c, ~d, ~e, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && FractionQ(~n))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~b * ~e - ~d * ~c) * (~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~b * ~c * ~n * (~p + 1) * (~x) ^ (2 * ~n * (~p + 1))) + (~e / ~c) * Antiderivative((~x) ^ -(~n) * (~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1), ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ(~p)) && EqQ(~n * (2 * ~p + 1) + 1, 0)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (~e * (~x) ^ (-(~n) + 1) * (~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~c * (~n * (2 * ~p + 1) + 1)) <-- FreeQ([~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ(~p)) && (NeQ(~n * (2 * ~p + 1) + 1, 0) && EqQ(~b * ~e * (~n * ~p + 1) - ~c * ~d * (~n * (2 * ~p + 1) + 1), 0))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (~e * (~x) ^ (-(~n) + 1) * (~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~c * (~n * (2 * ~p + 1) + 1)) - ((~b * ~e * (~n * ~p + 1) - ~c * ~d * (~n * (2 * ~p + 1) + 1)) / (~c * (~n * (2 * ~p + 1) + 1))) * Antiderivative((~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (Not(IntegerQ(~p)) && (NeQ(~n * (2 * ~p + 1) + 1, 0) && NeQ(~b * ~e * (~n * ~p + 1) - ~c * ~d * (~n * (2 * ~p + 1) + 1), 0))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~x) ^ (~n * FracPart(~p)) * (~b + ~c * (~x) ^ ~n) ^ FracPart(~p))) * Antiderivative((~x) ^ (~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~b + ~c * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~d + ~e * (~x) ^ ~n) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ ~n) / ~e) ^ FracPart(~p))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~d + ~e * (~x) ^ ~n) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ ~n) / ~e) ^ FracPart(~p))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IGtQ(~q, 0))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~n2), ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IGtQ(~q, 0)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => (-(((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * ~x * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~d * (~e) ^ 2 * ~n * (~q + 1)) + (1 / (~n * (~q + 1) * ~d * (~e) ^ 2)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~q + 1) * Simp((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2 * (~n * (~q + 1) + 1) + ~c * ~d * ~e * ~n * (~q + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && LtQ(~q, -1))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2), ~x) => (-((~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * ~x * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~d * (~e) ^ 2 * ~n * (~q + 1)) + (1 / (~n * (~q + 1) * ~d * (~e) ^ 2)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~q + 1) * Simp(~c * (~d) ^ 2 + ~a * (~e) ^ 2 * (~n * (~q + 1) + 1) + ~c * ~d * ~e * ~n * (~q + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && LtQ(~q, -1)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => (~c * (~x) ^ (~n + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~e * (~n * (~q + 2) + 1)) + (1 / (~e * (~n * (~q + 2) + 1))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~a * ~e * (~n * (~q + 2) + 1) - (~c * ~d * (~n + 1) - ~b * ~e * (~n * (~q + 2) + 1)) * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2), ~x) => (~c * (~x) ^ (~n + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~e * (~n * (~q + 2) + 1)) + (1 / (~e * (~n * (~q + 2) + 1))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~a * ~e * (~n * (~q + 2) + 1) - ~c * ~d * (~n + 1) * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(2 * ~d * ~e, 2)], ((~e) ^ 2 / (2 * ~c)) * Antiderivative(1 / (~d + q * (~x) ^ (~n / 2) + ~e * (~x) ^ ~n), ~x) + ((~e) ^ 2 / (2 * ~c)) * Antiderivative(1 / ((~d - q * (~x) ^ (~n / 2)) + ~e * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && PosQ(~d * ~e))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(-2 * ~d * ~e, 2)], (~d / (2 * ~a)) * Antiderivative((~d - q * (~x) ^ (~n / 2)) / ((~d - q * (~x) ^ (~n / 2)) - ~e * (~x) ^ ~n), ~x) + (~d / (2 * ~a)) * Antiderivative((~d + q * (~x) ^ (~n / 2)) / ((~d + q * (~x) ^ (~n / 2)) - ~e * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && NegQ(~d * ~e))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a / ~c, 4)], (1 / (2 * sqrt(2) * ~c * q ^ 3)) * Antiderivative((sqrt(2) * ~d * q - (~d - ~e * q ^ 2) * (~x) ^ (~n / 2)) / ((q ^ 2 - sqrt(2) * q * (~x) ^ (~n / 2)) + (~x) ^ ~n), ~x) + (1 / (2 * sqrt(2) * ~c * q ^ 3)) * Antiderivative((sqrt(2) * ~d * q + (~d - ~e * q ^ 2) * (~x) ^ (~n / 2)) / (q ^ 2 + sqrt(2) * q * (~x) ^ (~n / 2) + (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (NeQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && PosQ(~a * ~c)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ 3) / (~a + ~(c') * (~x) ^ 6), ~x) => With([q = Rt(~c / ~a, 6)], (1 / (3 * ~a * q ^ 2)) * Antiderivative((q ^ 2 * ~d - ~e * ~x) / (1 + q ^ 2 * (~x) ^ 2), ~x) + (1 / (6 * ~a * q ^ 2)) * Antiderivative((2 * q ^ 2 * ~d - (sqrt(3) * q ^ 3 * ~d - ~e) * ~x) / ((1 - sqrt(3) * q * ~x) + q ^ 2 * (~x) ^ 2), ~x) + (1 / (6 * ~a * q ^ 2)) * Antiderivative((2 * q ^ 2 * ~d + (sqrt(3) * q ^ 3 * ~d + ~e) * ~x) / (1 + sqrt(3) * q * ~x + q ^ 2 * (~x) ^ 2), ~x)) <-- FreeQ([~a, ~c, ~d, ~e], ~x) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && PosQ(~c / ~a))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(-(~a) / ~c, 2)], ((~d + ~e * q) / 2) * Antiderivative(1 / (~a + ~c * q * (~x) ^ ~n), ~x) + ((~d - ~e * q) / 2) * Antiderivative(1 / (~a - ~c * q * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (NegQ(~a * ~c) && IntegerQ(~n))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(c') * (~x) ^ ~n2), ~x) => ~d * Antiderivative(1 / (~a + ~c * (~x) ^ (2 * ~n)), ~x) + ~e * Antiderivative((~x) ^ ~n / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (PosQ(~a * ~c) || Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt((2 * ~d) / ~e - ~b / ~c, 2)], (~e / (2 * ~c)) * Antiderivative(1 / Simp(~d / ~e + q * (~x) ^ (~n / 2) + (~x) ^ ~n, ~x), ~x) + (~e / (2 * ~c)) * Antiderivative(1 / Simp((~d / ~e - q * (~x) ^ (~n / 2)) + (~x) ^ ~n, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && (GtQ((2 * ~d) / ~e - ~b / ~c, 0) || Not(LtQ((2 * ~d) / ~e - ~b / ~c, 0)) && EqQ(~d, ~e * Rt(~a / ~c, 2)))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (~e / 2 + (2 * ~c * ~d - ~b * ~e) / (2q)) * Antiderivative(1 / ((~b / 2 - q / 2) + ~c * (~x) ^ ~n), ~x) + (~e / 2 - (2 * ~c * ~d - ~b * ~e) / (2q)) * Antiderivative(1 / (~b / 2 + q / 2 + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && GtQ((~b) ^ 2 - 4 * ~a * ~c, 0)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt((-2 * ~d) / ~e - ~b / ~c, 2)], (~e / (2 * ~c * q)) * Antiderivative((q - 2 * (~x) ^ (~n / 2)) / Simp((~d / ~e + q * (~x) ^ (~n / 2)) - (~x) ^ ~n, ~x), ~x) + (~e / (2 * ~c * q)) * Antiderivative((q + 2 * (~x) ^ (~n / 2)) / Simp((~d / ~e - q * (~x) ^ (~n / 2)) - (~x) ^ ~n, ~x), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ(~c * (~d) ^ 2 - ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && Not(GtQ((~b) ^ 2 - 4 * ~a * ~c, 0))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (~e / 2 + (2 * ~c * ~d - ~b * ~e) / (2q)) * Antiderivative(1 / ((~b / 2 - q / 2) + ~c * (~x) ^ ~n), ~x) + (~e / 2 - (2 * ~c * ~d - ~b * ~e) / (2q)) * Antiderivative(1 / (~b / 2 + q / 2 + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (PosQ((~b) ^ 2 - 4 * ~a * ~c) || Not(IGtQ(~n / 2, 0))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([q = Rt(~a / ~c, 2)], With([r = Rt(2q - ~b / ~c, 2)], (1 / (2 * ~c * q * r)) * Antiderivative((~d * r - (~d - ~e * q) * (~x) ^ (~n / 2)) / ((q - r * (~x) ^ (~n / 2)) + (~x) ^ ~n), ~x) + (1 / (2 * ~c * q * r)) * Antiderivative((~d * r + (~d - ~e * q) * (~x) ^ (~n / 2)) / (q + r * (~x) ^ (~n / 2) + (~x) ^ ~n), ~x))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (IGtQ(~n / 2, 0) && NegQ((~b) ^ 2 - 4 * ~a * ~c)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IntegerQ(~q))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q / (~a + ~(c') * (~x) ^ ~n2), ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q / (~a + ~c * (~x) ^ (2 * ~n)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IntegerQ(~q)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => ((~e) ^ 2 / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q, ~x) + (1 / ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2)) * Antiderivative(((~d + ~e * (~x) ^ ~n) ^ (~q + 1) * ((~c * ~d - ~b * ~e) - ~c * ~e * (~x) ^ ~n)) / (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (Not(IntegerQ(~q)) && LtQ(~q, -1)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q / (~a + ~(c') * (~x) ^ ~n2), ~x) => ((~e) ^ 2 / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q, ~x) + (~c / (~c * (~d) ^ 2 + ~a * (~e) ^ 2)) * Antiderivative(((~d + ~e * (~x) ^ ~n) ^ (~q + 1) * (~d - ~e * (~x) ^ ~n)) / (~a + ~c * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (Not(IntegerQ(~q)) && LtQ(~q, -1))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q / (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2), ~x) => With([r = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], ((2 * ~c) / r) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q / ((~b - r) + 2 * ~c * (~x) ^ ~n), ~x) - ((2 * ~c) / r) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q / (~b + r + 2 * ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~q)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q / (~a + ~(c') * (~x) ^ ~n2), ~x) => With([r = Rt(-(~a) * ~c, 2)], (-(~c) / (2r)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q / (r - ~c * (~x) ^ ~n), ~x) - (~c / (2r)) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q / (r + ~c * (~x) ^ ~n), ~x)) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~q))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (-(~x) * (((~d * (~b) ^ 2 - ~a * ~b * ~e) - 2 * ~a * ~c * ~d) + (~b * ~d - 2 * ~a * ~e) * ~c * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (~a * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / (~a * ~n * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative(Simp((((~n * ~p + ~n + 1) * ~d * (~b) ^ 2 - ~a * ~b * ~e) - 2 * ~a * ~c * ~d * (2 * ~n * ~p + 2 * ~n + 1)) + (2 * ~n * ~p + 3 * ~n + 1) * (~d * ~b - 2 * ~a * ~e) * ~c * (~x) ^ ~n, ~x) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && ILtQ(~p, -1)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => (-(~x) * (~d + ~e * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1)) / (2 * ~a * ~n * (~p + 1)) + (1 / (2 * ~a * ~n * (~p + 1))) * Antiderivative((~d * (2 * ~n * ~p + 2 * ~n + 1) + ~e * (2 * ~n * ~p + 3 * ~n + 1) * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && ILtQ(~p, -1))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (EqQ(~n2, 2 * ~n) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~c) ^ ~p * (~x) ^ ((2 * ~n * ~p - ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~e * (2 * ~n * ~p + ~n * ~q + 1)) + Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * ExpandToSum(((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p - (~c) ^ ~p * (~x) ^ (2 * ~n * ~p)) - (~d * (~c) ^ ~p * ((2 * ~n * ~p - ~n) + 1) * (~x) ^ (2 * ~n * ~p - ~n)) / (~e * (2 * ~n * ~p + ~n * ~q + 1)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~p, 0) && (NeQ(2 * ~n * ~p + ~n * ~q + 1, 0) && (IGtQ(~n, 0) && Not(IGtQ(~q, 0)))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~c) ^ ~p * (~x) ^ ((2 * ~n * ~p - ~n) + 1) * (~d + ~e * (~x) ^ ~n) ^ (~q + 1)) / (~e * (2 * ~n * ~p + ~n * ~q + 1)) + Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * ExpandToSum(((~a + ~c * (~x) ^ (2 * ~n)) ^ ~p - (~c) ^ ~p * (~x) ^ (2 * ~n * ~p)) - (~d * (~c) ^ ~p * ((2 * ~n * ~p - ~n) + 1) * (~x) ^ (2 * ~n * ~p - ~n)) / (~e * (2 * ~n * ~p + ~n * ~q + 1)), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (IGtQ(~p, 0) && (NeQ(2 * ~n * ~p + ~n * ~q + 1, 0) && (IGtQ(~n, 0) && Not(IGtQ(~q, 0))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (NeQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && (IntegersQ(~p, ~q) && Not(IntegerQ(~n)) || (IGtQ(~p, 0) || IGtQ(~q, 0) && Not(IntegerQ(~n)))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (IntegersQ(~p, ~q) && Not(IntegerQ(~n)) || (IGtQ(~p, 0) || IGtQ(~q, 0) && Not(IntegerQ(~n))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, (~d / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ (2 * ~n)) - (~e * (~x) ^ ~n) / ((~d) ^ 2 - (~e) ^ 2 * (~x) ^ (2 * ~n))) ^ -(~q), ~x), ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && (Not(IntegerQ(~p)) && ILtQ(~q, 0))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Unintegrable((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~q * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => Unintegrable((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~d + ~(e') * (~u) ^ ~n) ^ ~(q') * (~a + ~(b') * (~u) ^ ~n + ~(c') * (~u) ^ ~n2) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (LinearQ(~u, ~x) && NeQ(~u, ~x)))
    @apply_utils Antiderivative((~d + ~(e') * (~u) ^ ~n) ^ ~(q') * (~a + ~(c') * (~u) ^ ~n2) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (LinearQ(~u, ~x) && NeQ(~u, ~x)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(mn')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (-(~n) * ~q) * (~e + ~d * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~mn, -(~n)) && (IntegerQ(~q) && (PosQ(~n) || Not(IntegerQ(~p))))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(mn')) ^ ~(q') * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~mn * ~q) * (~e + ~d * (~x) ^ -(~mn)) ^ ~q * (~a + ~c * (~x) ^ ~n2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~mn, ~p], ~x) && (EqQ(~n2, -2 * ~mn) && (IntegerQ(~q) && (PosQ(~n2) || Not(IntegerQ(~p)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(mn') + ~(c') * (~x) ^ ~(mn2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (-2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~b * (~x) ^ ~n + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~mn, -(~n)) && (EqQ(~mn2, 2 * ~mn) && IntegerQ(~p)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(c') * (~x) ^ ~(mn2')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (-2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~mn2, -2 * ~n) && IntegerQ(~p))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(mn')) ^ ~q * (~(a') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~e) ^ IntPart(~q) * (~x) ^ (~n * FracPart(~q)) * (~d + ~e * (~x) ^ -(~n)) ^ FracPart(~q)) / (1 + (~d * (~x) ^ ~n) / ~e) ^ FracPart(~q)) * Antiderivative((~x) ^ (-(~n) * ~q) * (1 + (~d * (~x) ^ ~n) / ~e) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~mn, -(~n)) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(mn')) ^ ~q * (~a + ~(c') * (~x) ^ ~(n2')) ^ ~(p'), ~x) => (((~e) ^ IntPart(~q) * (~x) ^ (-(~mn) * FracPart(~q)) * (~d + ~e * (~x) ^ ~mn) ^ FracPart(~q)) / (1 + (~d * (~x) ^ -(~mn)) / ~e) ^ FracPart(~q)) * Antiderivative((~x) ^ (~mn * ~q) * (1 + (~d * (~x) ^ -(~mn)) / ~e) ^ ~q * (~a + ~c * (~x) ^ ~n2) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~mn, ~p, ~q], ~x) && (EqQ(~n2, -2 * ~mn) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n2))))
    #= Antiderivative(((~d)+(~e')*(~x)^(~mn'))^(~q)*((~a')+(~b')*(~x)^(~n')+(~c')*(~x)^(~n2'))^(~p'),~x)  := x^(n*FracPart(q))*(d+e*x^(-n))^FracPart(q)/(e+d*x^n)^FracPart(q)* Antiderivative(x^(-n*q)*(e+d*x^n)^q*(a+b*x^n+c*x^(2*n))^p,x) <--  FreeQ([a,b,c,d,e,n,p,q],x) && EqQ(n2,2*n) && EqQ(mn,-n) &&  Not(IntegerQ(p)) && Not(IntegerQ(q)) && PosQ(n) =#
    #= Antiderivative(((~d)+(~e')*(~x)^(~mn'))^(~q)*((~a)+(~c')*(~x)^(~n2'))^(~p'),~x) :=  x^(-mn*FracPart(q))*(d+e*x^mn)^FracPart(q)/(e+d*x^(-mn))^FracPart(q)* Antiderivative(x^(mn*q)*(e+d*x^(-mn))^q*(a+c*x^n2)^p,x) <--  FreeQ([a,c,d,e,mn,p,q],x) && EqQ(n2,-2*mn) && Not(IntegerQ(p)) &&  Not(IntegerQ(q)) && PosQ(n2) =#
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~(mn') + ~(c') * (~x) ^ ~(mn2')) ^ ~p, ~x) => (((~x) ^ (2 * ~n * FracPart(~p)) * (~a + ~b * (~x) ^ -(~n) + ~c * (~x) ^ (-2 * ~n)) ^ FracPart(~p)) / (~c + ~b * (~x) ^ ~n + ~a * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~x) ^ (-2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~b * (~x) ^ ~n + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~mn, -(~n)) && (EqQ(~mn2, 2 * ~mn) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~(n')) ^ ~(q') * (~(a') + ~(c') * (~x) ^ ~(mn2')) ^ ~p, ~x) => (((~x) ^ (2 * ~n * FracPart(~p)) * (~a + ~c * (~x) ^ (-2 * ~n)) ^ FracPart(~p)) / (~c + ~a * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~x) ^ (-2 * ~n * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~c + ~a * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~mn2, -2 * ~n) && (Not(IntegerQ(~p)) && (Not(IntegerQ(~q)) && PosQ(~n))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (-(~n) * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~q], ~x) && (EqQ(~mn, -(~n)) && IntegerQ(~p))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~mn + ~(c') * (~x) ^ ~(n')) ^ ~(p'), ~x) => (((~x) ^ (~n * FracPart(~p)) * (~a + ~b / (~x) ^ ~n + ~c * (~x) ^ ~n) ^ FracPart(~p)) / (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p)) * Antiderivative((~x) ^ (-(~n) * ~p) * (~d + ~e * (~x) ^ ~n) ^ ~q * (~b + ~a * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~mn, -(~n)) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~f + ~(g') * (~x) ^ ~n) ^ ~(r') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((4 * ~c) ^ IntPart(~p) * (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * FracPart(~p)))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~f + ~g * (~x) ^ ~n) ^ ~r * (~b + 2 * ~c * (~x) ^ ~n) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~p, ~q, ~r], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ((~b) ^ 2 - 4 * ~a * ~c, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~f + ~(g') * (~x) ^ ~n) ^ ~(r') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~f + ~g * (~x) ^ ~n) ^ ~r * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~q, ~r], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && IntegerQ(~p))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~f + ~(g') * (~x) ^ ~n) ^ ~(r') * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~f + ~g * (~x) ^ ~n) ^ ~r * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~g, ~n, ~q, ~r], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && IntegerQ(~p)))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~f + ~(g') * (~x) ^ ~n) ^ ~(r') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~d + ~e * (~x) ^ ~n) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ ~n) / ~e) ^ FracPart(~p))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~f + ~g * (~x) ^ ~n) ^ ~r * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~n, ~p, ~q, ~r], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (EqQ((~c * (~d) ^ 2 - ~b * ~d * ~e) + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~p)))))
    @apply_utils Antiderivative((~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~f + ~(g') * (~x) ^ ~n) ^ ~(r') * (~a + ~(c') * (~x) ^ ~n2) ^ ~p, ~x) => ((~a + ~c * (~x) ^ (2 * ~n)) ^ FracPart(~p) / ((~d + ~e * (~x) ^ ~n) ^ FracPart(~p) * (~a / ~d + (~c * (~x) ^ ~n) / ~e) ^ FracPart(~p))) * Antiderivative((~d + ~e * (~x) ^ ~n) ^ (~p + ~q) * (~f + ~g * (~x) ^ ~n) ^ ~r * (~a / ~d + (~c / ~e) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~g, ~n, ~p, ~q, ~r], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~c * (~d) ^ 2 + ~a * (~e) ^ 2, 0) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~d1 + ~(e1') * (~x) ^ ~(non2')) ^ ~(q') * (~d2 + ~(e2') * (~x) ^ ~(non2')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => Antiderivative((~d1 * ~d2 + ~e1 * ~e2 * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d1, ~e1, ~d2, ~e2, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~non2, ~n / 2) && (EqQ(~d2 * ~e1 + ~d1 * ~e2, 0) && (IntegerQ(~q) || GtQ(~d1, 0) && GtQ(~d2, 0)))))
    @apply_utils Antiderivative((~d1 + ~(e1') * (~x) ^ ~(non2')) ^ ~(q') * (~d2 + ~(e2') * (~x) ^ ~(non2')) ^ ~(q') * (~(a') + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => (((~d1 + ~e1 * (~x) ^ (~n / 2)) ^ FracPart(~q) * (~d2 + ~e2 * (~x) ^ (~n / 2)) ^ FracPart(~q)) / (~d1 * ~d2 + ~e1 * ~e2 * (~x) ^ ~n) ^ FracPart(~q)) * Antiderivative((~d1 * ~d2 + ~e1 * ~e2 * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d1, ~e1, ~d2, ~e2, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~non2, ~n / 2) && EqQ(~d2 * ~e1 + ~d1 * ~e2, 0)))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ ~(m')) * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(b') * (~x) ^ ~n + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ~A * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) + ~B * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && EqQ((~m - ~n) + 1, 0))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ ~(m')) * (~d + ~(e') * (~x) ^ ~n) ^ ~(q') * (~a + ~(c') * (~x) ^ ~n2) ^ ~(p'), ~x) => ~A * Antiderivative((~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) + ~B * Antiderivative((~x) ^ ~m * (~d + ~e * (~x) ^ ~n) ^ ~q * (~a + ~c * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~c, ~d, ~e, ~A, ~B, ~m, ~n, ~p, ~q], ~x) && (EqQ(~n2, 2 * ~n) && EqQ((~m - ~n) + 1, 0))
end
