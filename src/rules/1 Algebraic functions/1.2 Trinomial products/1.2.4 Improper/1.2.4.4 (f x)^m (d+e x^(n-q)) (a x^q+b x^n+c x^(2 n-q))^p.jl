int_rules_1_2_4_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.4.4*(f*x)^m*(d+e*x^(n-q))*(a*x^q+b*x^n+c*x^(2*n-q))^p =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => Antiderivative((~x) ^ (~m + ~p * ~q) * (~A + ~B * (~x) ^ (~n - ~q)) * (~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~m, ~n, ~q], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (IntegerQ(~p) && PosQ(~n - ~q))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => ((~x) ^ (~m + 1) * (~A * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1) + ~B * (~m + ~p * ~q + 1) * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p) / ((~m + ~p * ~q + 1) * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) + (((~n - ~q) * ~p) / ((~m + ~p * ~q + 1) * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1))) * Antiderivative((~x) ^ (~n + ~m) * Simp((2 * ~a * ~B * (~m + ~p * ~q + 1) - ~A * ~b * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) + (~b * ~B * (~m + ~p * ~q + 1) - 2 * ~A * ~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) * (~x) ^ (~n - ~q), ~x) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && (RationalQ(~m, ~q) && (LeQ(~m + ~p * ~q, -((~n - ~q))) && (NeQ(~m + ~p * ~q + 1, 0) && NeQ(~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1, 0))))))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => With([n = ~q + ~r], ((~x) ^ (~m + 1) * (~A * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1) + ~B * (~m + ~p * ~q + 1) * (~x) ^ (n - ~q)) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ ~p) / ((~m + ~p * ~q + 1) * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1)) + ((2 * (n - ~q) * ~p) / ((~m + ~p * ~q + 1) * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1))) * Antiderivative((~x) ^ (n + ~m) * Simp(~a * ~B * (~m + ~p * ~q + 1) - ~A * ~c * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1) * (~x) ^ (n - ~q), ~x) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p - 1), ~x) <-- EqQ(~j, 2n - ~q) && (IGtQ(n, 0) && (LeQ(~m + ~p * ~q, -((n - ~q))) && (NeQ(~m + ~p * ~q + 1, 0) && NeQ(~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1, 0))))) <-- FreeQ([~a, ~c, ~A, ~B], ~x) && (Not(IntegerQ(~p)) && (RationalQ(~m, ~p, ~q) && GtQ(~p, 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => ((~x) ^ ((~m - ~n) + 1) * ((~A * ~b - 2 * ~a * ~B) - (~b * ~B - 2 * ~A * ~c) * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1)) / ((~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / ((~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((~x) ^ (~m - ~n) * Simp((((~m + ~p * ~q) - ~n) + ~q + 1) * (2 * ~a * ~B - ~A * ~b) + (~m + ~p * ~q + 2 * (~n - ~q) * (~p + 1) + 1) * (~b * ~B - 2 * ~A * ~c) * (~x) ^ (~n - ~q), ~x) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (RationalQ(~m, ~q) && GtQ(~m + ~p * ~q, (~n - ~q) - 1))))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => With([n = ~q + ~r], ((~x) ^ ((~m - n) + 1) * (~a * ~B - ~A * ~c * (~x) ^ (n - ~q)) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p + 1)) / (2 * ~a * ~c * (n - ~q) * (~p + 1)) - (1 / (2 * ~a * ~c * (n - ~q) * (~p + 1))) * Antiderivative((~x) ^ (~m - n) * Simp(~a * ~B * (((~m + ~p * ~q) - n) + ~q + 1) - ~A * ~c * (~m + ~p * ~q + (n - ~q) * 2 * (~p + 1) + 1) * (~x) ^ (n - ~q), ~x) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p + 1), ~x) <-- EqQ(~j, 2n - ~q) && (IGtQ(n, 0) && ~m + ~p * ~q > (n - ~q) - 1)) <-- FreeQ([~a, ~c, ~A, ~B], ~x) && (Not(IntegerQ(~p)) && (RationalQ(~m, ~q) && LtQ(~p, -1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => ((~x) ^ (~m + 1) * (~b * ~B * (~n - ~q) * ~p + ~A * ~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1) + ~B * ~c * (~m + ~p * ~q + 2 * (~n - ~q) * ~p + 1) * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p) / (~c * (~m + ~p * (2 * ~n - ~q) + 1) * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) + (((~n - ~q) * ~p) / (~c * (~m + ~p * (2 * ~n - ~q) + 1) * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1))) * Antiderivative((~x) ^ (~m + ~q) * Simp((2 * ~a * ~A * ~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1) - ~a * ~b * ~B * (~m + ~p * ~q + 1)) + ((2 * ~a * ~B * ~c * (~m + ~p * ~q + 2 * (~n - ~q) * ~p + 1) + ~A * ~b * ~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) - (~b) ^ 2 * ~B * (~m + ~p * ~q + (~n - ~q) * ~p + 1)) * (~x) ^ (~n - ~q), ~x) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && (RationalQ(~m, ~q) && (GtQ(~m + ~p * ~q, -((~n - ~q)) - 1) && (NeQ(~m + ~p * (2 * ~n - ~q) + 1, 0) && NeQ(~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1, 0))))))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => With([n = ~q + ~r], ((~x) ^ (~m + 1) * (~A * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1) + ~B * (~m + ~p * ~q + 2 * (n - ~q) * ~p + 1) * (~x) ^ (n - ~q)) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ ~p) / ((~m + ~p * (2n - ~q) + 1) * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1)) + (((n - ~q) * ~p) / ((~m + ~p * (2n - ~q) + 1) * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1))) * Antiderivative((~x) ^ (~m + ~q) * Simp(2 * ~a * ~A * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1) + 2 * ~a * ~B * (~m + ~p * ~q + 2 * (n - ~q) * ~p + 1) * (~x) ^ (n - ~q), ~x) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p - 1), ~x) <-- EqQ(~j, 2n - ~q) && (IGtQ(n, 0) && (GtQ(~m + ~p * ~q, -((n - ~q))) && (NeQ(~m + ~p * ~q + 2 * (n - ~q) * ~p + 1, 0) && (NeQ(~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1, 0) && NeQ(~m + 1, n)))))) <-- FreeQ([~a, ~c, ~A, ~B], ~x) && (Not(IntegerQ(~p)) && (RationalQ(~m, ~q) && GtQ(~p, 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => (-((~x) ^ ((~m - ~q) + 1)) * (((~A * (~b) ^ 2 - ~a * ~b * ~B) - 2 * ~a * ~A * ~c) + (~A * ~b - 2 * ~a * ~B) * ~c * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1)) / (~a * (~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / (~a * (~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((~x) ^ (~m - ~q) * Simp(((~A * (~b) ^ 2 * (~m + ~p * ~q + (~n - ~q) * (~p + 1) + 1) - ~a * ~b * ~B * (~m + ~p * ~q + 1)) - 2 * ~a * ~A * ~c * (~m + ~p * ~q + 2 * (~n - ~q) * (~p + 1) + 1)) + (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 3) + 1) * (~A * ~b - 2 * ~a * ~B) * ~c * (~x) ^ (~n - ~q), ~x) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (RationalQ(~m, ~q) && ~m + ~p * ~q < (~n - ~q) - 1)))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => With([n = ~q + ~r], (-((~x) ^ ((~m - ~q) + 1)) * (~A * ~c + ~B * ~c * (~x) ^ (n - ~q)) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p + 1)) / (2 * ~a * ~c * (n - ~q) * (~p + 1)) + (1 / (2 * ~a * ~c * (n - ~q) * (~p + 1))) * Antiderivative((~x) ^ (~m - ~q) * Simp(~A * ~c * (~m + ~p * ~q + 2 * (n - ~q) * (~p + 1) + 1) + ~B * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 3) + 1) * ~c * (~x) ^ (n - ~q), ~x) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p + 1), ~x) <-- EqQ(~j, 2n - ~q) && (IGtQ(n, 0) && LtQ(~m + ~p * ~q, (n - ~q) - 1))) <-- FreeQ([~a, ~c, ~A, ~B], ~x) && (Not(IntegerQ(~p)) && (RationalQ(~m, ~q) && LtQ(~p, -1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => (~B * (~x) ^ ((~m - ~n) + 1) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1)) / (~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) - (1 / (~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1))) * Antiderivative((~x) ^ ((~m - ~n) + ~q) * Simp(~a * ~B * (((~m + ~p * ~q) - ~n) + ~q + 1) + (~b * ~B * (~m + ~p * ~q + (~n - ~q) * ~p + 1) - ~A * ~c * (~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1)) * (~x) ^ (~n - ~q), ~x) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (GeQ(~p, -1) && (LtQ(~p, 0) && (RationalQ(~m, ~q) && (GeQ(~m + ~p * ~q, (~n - ~q) - 1) && NeQ(~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1, 0))))))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => With([n = ~q + ~r], (~B * (~x) ^ ((~m - n) + 1) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p + 1)) / (~c * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1)) - (1 / (~c * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1))) * Antiderivative((~x) ^ ((~m - n) + ~q) * Simp(~a * ~B * (((~m + ~p * ~q) - n) + ~q + 1) - ~A * ~c * (~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1) * (~x) ^ (n - ~q), ~x) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ ~p, ~x) <-- EqQ(~j, 2n - ~q) && (IGtQ(n, 0) && (GeQ(~m + ~p * ~q, (n - ~q) - 1) && NeQ(~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1, 0)))) <-- FreeQ([~a, ~c, ~A, ~B], ~x) && (Not(IntegerQ(~p)) && (RationalQ(~m, ~p, ~q) && (GeQ(~p, -1) && LtQ(~p, 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => (~A * (~x) ^ ((~m - ~q) + 1) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1)) / (~a * (~m + ~p * ~q + 1)) + (1 / (~a * (~m + ~p * ~q + 1))) * Antiderivative((~x) ^ ((~m + ~n) - ~q) * Simp((~a * ~B * (~m + ~p * ~q + 1) - ~A * ~b * (~m + ~p * ~q + (~n - ~q) * (~p + 1) + 1)) - ~A * ~c * (~m + ~p * ~q + 2 * (~n - ~q) * (~p + 1) + 1) * (~x) ^ (~n - ~q), ~x) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B], ~x) && (EqQ(~r, ~n - ~q) && (EqQ(~j, 2 * ~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (IGtQ(~n, 0) && (RationalQ(~m, ~p, ~q) && ((GeQ(~p, -1) && LtQ(~p, 0) || EqQ(~m + ~p * ~q + (~n - ~q) * (2 * ~p + 1) + 1, 0)) && (LeQ(~m + ~p * ~q, -((~n - ~q))) && NeQ(~m + ~p * ~q + 1, 0)))))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(r')) * (~(a') * (~x) ^ ~(q') + ~(c') * (~x) ^ ~(j')) ^ ~(p'), ~x) => With([n = ~q + ~r], (~A * (~x) ^ ((~m - ~q) + 1) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ (~p + 1)) / (~a * (~m + ~p * ~q + 1)) + (1 / (~a * (~m + ~p * ~q + 1))) * Antiderivative((~x) ^ ((~m + n) - ~q) * Simp(~a * ~B * (~m + ~p * ~q + 1) - ~A * ~c * (~m + ~p * ~q + 2 * (n - ~q) * (~p + 1) + 1) * (~x) ^ (n - ~q), ~x) * (~a * (~x) ^ ~q + ~c * (~x) ^ (2n - ~q)) ^ ~p, ~x) <-- EqQ(~j, 2n - ~q) && (IGtQ(n, 0) && ((GeQ(~p, -1) && LtQ(~p, 0) || EqQ(~m + ~p * ~q + (n - ~q) * (2 * ~p + 1) + 1, 0)) && (LeQ(~m + ~p * ~q, -((n - ~q))) && NeQ(~m + ~p * ~q + 1, 0))))) <-- FreeQ([~a, ~c, ~A, ~B], ~x) && (Not(IntegerQ(~p)) && RationalQ(~m, ~p, ~q))
    @apply_utils Antiderivative(((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(j'))) / sqrt(~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')), ~x) => (((~x) ^ (~q / 2) * sqrt(~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q)))) / sqrt(~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q))) * Antiderivative(((~x) ^ (~m - ~q / 2) * (~A + ~B * (~x) ^ (~n - ~q))) / sqrt(~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))), ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~m, ~n, ~q], ~x) && (EqQ(~j, ~n - ~q) && (EqQ(~r, 2 * ~n - ~q) && (PosQ(~n - ~q) && ((EqQ(~m, 1 / 2) || EqQ(~m, -1 / 2)) && (EqQ(~n, 3) && EqQ(~q, 1))))))
    #= Antiderivative((~x)^(~m')*((~A)+(~B')*(~x)^(~j'))*((~a')*(~x)^(~q')+(~b')*(~x)^(~n')+(~c')*(~x)^(~r'))^(~p),(~x)*Symbol) :=  sqrt(a*x^q+b*x^n+c*x^(2*n-q))/(x^(q/2)*sqrt(a+b*x^(n-q)+c*x^(2*(n-q))) )* Antiderivative(x^(m+q*p)*(A+B*x^(n-q))*(a+b*x^(n-q)+c*x^(2*(n-q)))^p,x) <--  FreeQ([a,b,c,A,B,m,n,p,q],x) && EqQ(j,n-q) && EqQ(r,2*n-q) &&  IGtQ(p+1/2,0) && PosQ(n-q) =#
    #= Antiderivative((~x)^(~m')*((~A)+(~B')*(~x)^(~j'))*((~a')*(~x)^(~q')+(~b')*(~x)^(~n')+(~c')*(~x)^(~r'))^(~p),(~x)*Symbol) :=  x^(q/2)*sqrt(a+b*x^(n-q)+c*x^(2*(n-q)))/sqrt(a*x^q+b*x^n+c*x^(2*n-q))*  Antiderivative(x^(m+q*p)*(A+B*x^(n-q))*(a+b*x^(n-q)+c*x^(2*(n-q)))^p,x) <--  FreeQ([a,b,c,A,B,m,n,p,q],x) && EqQ(j,n-q) && EqQ(r,2*n-q) &&  ILtQ(p-1/2,0) && PosQ(n-q) =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~q) * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(k') + ~(c') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~a * (~x) ^ ~j + ~b * (~x) ^ ~k + ~c * (~x) ^ ~n) ^ ~p / ((~x) ^ (~j * ~p) * (~a + ~b * (~x) ^ (~k - ~j) + ~c * (~x) ^ (2 * (~k - ~j))) ^ ~p)) * Antiderivative((~x) ^ (~m + ~j * ~p) * (~A + ~B * (~x) ^ (~k - ~j)) * (~a + ~b * (~x) ^ (~k - ~j) + ~c * (~x) ^ (2 * (~k - ~j))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~j, ~k, ~m, ~p], ~x) && (EqQ(~q, ~k - ~j) && (EqQ(~n, 2 * ~k - ~j) && (Not(IntegerQ(~p)) && PosQ(~k - ~j))))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~A + ~(B') * (~u) ^ ~(j')) * (~(a') * (~u) ^ ~(q') + ~(b') * (~u) ^ ~(n') + ~(c') * (~u) ^ ~(r')) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~x) ^ ~m * (~A + ~B * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~A, ~B, ~m, ~n, ~p, ~q], ~x) && (EqQ(~j, ~n - ~q) && (EqQ(~r, 2 * ~n - ~q) && (LinearQ(~u, ~x) && NeQ(~u, ~x))))
end
