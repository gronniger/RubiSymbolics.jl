int_rules_1_2_4_1 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.2.4.1*(a*x^q+b*x^n+c*x^(2*n-q))^p =#
    @apply_utils Antiderivative((~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')) ^ ~p, ~x) => Antiderivative(((~a + ~b + ~c) * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && (EqQ(~n, ~q) && EqQ(~r, ~n))
    @apply_utils Antiderivative((~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')) ^ ~p, ~x) => Antiderivative((~x) ^ (~p * ~q) * (~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && (PosQ(~n - ~q) && IntegerQ(~p)))
    @apply_utils Antiderivative(sqrt(~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')), ~x) => (sqrt(~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) / ((~x) ^ (~q / 2) * sqrt(~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))))) * Antiderivative((~x) ^ (~q / 2) * sqrt(~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && PosQ(~n - ~q))
    @apply_utils Antiderivative(1 / sqrt(~(a') * (~x) ^ 2 + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')), ~x) => (-2 / (~n - 2)) * Subst(Antiderivative(1 / (4 * ~a - (~x) ^ 2), ~x), ~x, (~x * (2 * ~a + ~b * (~x) ^ (~n - 2))) / sqrt(~a * (~x) ^ 2 + ~b * (~x) ^ ~n + ~c * (~x) ^ ~r)) <-- FreeQ([~a, ~b, ~c, ~n, ~r], ~x) && (EqQ(~r, 2 * ~n - 2) && (PosQ(~n - 2) && NeQ((~b) ^ 2 - 4 * ~a * ~c, 0)))
    @apply_utils Antiderivative(1 / sqrt(~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')), ~x) => (((~x) ^ (~q / 2) * sqrt(~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q)))) / sqrt(~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q))) * Antiderivative(1 / ((~x) ^ (~q / 2) * sqrt(~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q)))), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && PosQ(~n - ~q))
    @apply_utils Antiderivative((~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')) ^ ~p, ~x) => (~x * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p) / (~p * (2 * ~n - ~q) + 1) + (((~n - ~q) * ~p) / (~p * (2 * ~n - ~q) + 1)) * Antiderivative((~x) ^ ~q * (2 * ~a + ~b * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && (PosQ(~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && (GtQ(~p, 0) && NeQ(~p * (2 * ~n - ~q) + 1, 0))))))
    @apply_utils Antiderivative((~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')) ^ ~p, ~x) => (-((~x) ^ (-(~q) + 1)) * (((~b) ^ 2 - 2 * ~a * ~c) + ~b * ~c * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1)) / (~a * (~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c)) + (1 / (~a * (~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c))) * Antiderivative((~x) ^ -(~q) * ((~p * ~q + 1) * ((~b) ^ 2 - 2 * ~a * ~c) + (~n - ~q) * (~p + 1) * ((~b) ^ 2 - 4 * ~a * ~c) + ~b * ~c * (~p * ~q + (~n - ~q) * (2 * ~p + 3) + 1) * (~x) ^ (~n - ~q)) * (~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && (PosQ(~n - ~q) && (Not(IntegerQ(~p)) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && LtQ(~p, -1)))))
    @apply_utils Antiderivative((~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')) ^ ~p, ~x) => ((~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p / ((~x) ^ (~p * ~q) * (~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))) ^ ~p)) * Antiderivative((~x) ^ (~p * ~q) * (~a + ~b * (~x) ^ (~n - ~q) + ~c * (~x) ^ (2 * (~n - ~q))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && (PosQ(~n - ~q) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~(a') * (~x) ^ ~(q') + ~(b') * (~x) ^ ~(n') + ~(c') * (~x) ^ ~(r')) ^ ~p, ~x) => Unintegrable((~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p, ~q], ~x) && EqQ(~r, 2 * ~n - ~q)
    @apply_utils Antiderivative((~(a') * (~u) ^ ~(q') + ~(b') * (~u) ^ ~(n') + ~(c') * (~u) ^ ~(r')) ^ ~p, ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a * (~x) ^ ~q + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n - ~q)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~n, ~p, ~q], ~x) && (EqQ(~r, 2 * ~n - ~q) && (LinearQ(~u, ~x) && NeQ(~u, ~x)))
end
