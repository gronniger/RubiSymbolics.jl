int_rules_1_3_2 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.3.2*P(x)*Q(x)^p =#
    @apply_utils Antiderivative(sqrt(~v) / (~d + ~(e') * (~x) ^ 4), ~x) => With([a = Coeff(~v, ~x, 0), b = Coeff(~v, ~x, 2), c = Coeff(~v, ~x, 4)], (a / ~d) * Subst(Antiderivative(1 / ((1 - 2 * b * (~x) ^ 2) + (b ^ 2 - 4 * a * c) * (~x) ^ 4), ~x), ~x, ~x / sqrt(~v)) <-- EqQ(c * ~d + a * ~e, 0) && PosQ(a * c)) <-- FreeQ([~d, ~e], ~x) && PolyQ(~v, (~x) ^ 2, 2)
    @apply_utils Antiderivative(sqrt(~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) / (~d + ~(e') * (~x) ^ 4), ~x) => With([q = sqrt((~b) ^ 2 - 4 * ~a * ~c)], ((-(~a) * sqrt(~b + q)) / (2 * sqrt(2) * Rt(-(~a) * ~c, 2) * ~d)) * atan((sqrt(~b + q) * ~x * ((~b - q) + 2 * ~c * (~x) ^ 2)) / (2 * sqrt(2) * Rt(-(~a) * ~c, 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4))) + ((~a * sqrt(-(~b) + q)) / (2 * sqrt(2) * Rt(-(~a) * ~c, 2) * ~d)) * atanh((sqrt(-(~b) + q) * ~x * (~b + q + 2 * ~c * (~x) ^ 2)) / (2 * sqrt(2) * Rt(-(~a) * ~c, 2) * sqrt(~a + ~b * (~x) ^ 2 + ~c * (~x) ^ 4)))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~c * ~d + ~a * ~e, 0) && NegQ(~a * ~c))
    @apply_utils Antiderivative((~P) ^ ~p * (~Q) ^ ~(q'), ~x) => With([PP = Factor(ReplaceAll(~P, (~x->begin
                                        #= none:1 =#
                                        #= none:3 =#
                                        sqrt(~x)
                                    end)))], Antiderivative(ExpandIntegrand(ReplaceAll(PP, (~x->begin
                                                #= none:4 =#
                                                #= none:6 =#
                                                (~x) ^ 2
                                            end)) ^ ~p * (~Q) ^ ~q, ~x), ~x) <-- Not(SumQ(NonfreeFactors(PP, ~x)))) <-- FreeQ(~q, ~x) && (PolyQ(~P, (~x) ^ 2) && (PolyQ(~Q, ~x) && ILtQ(~p, 0)))
    @apply_utils Antiderivative((~P) ^ ~p * (~Q) ^ ~(q'), ~x) => With([PP = Factor(~P)], Antiderivative(ExpandIntegrand(PP ^ ~p * (~Q) ^ ~q, ~x), ~x) <-- Not(SumQ(NonfreeFactors(PP, ~x)))) <-- FreeQ(~q, ~x) && (PolyQ(~P, ~x) && (PolyQ(~Q, ~x) && (IntegerQ(~p) && NeQ(~P, ~x))))
    @apply_utils Antiderivative((~P) ^ ~p * ~Qm, ~x) => With([PP = Factor(~P)], Antiderivative(ExpandIntegrand(PP ^ ~p * ~Qm, ~x), ~x) <-- QuadraticProductQ(PP, ~x)) <-- PolyQ(~Qm, ~x) && (PolyQ(~P, ~x) && ILtQ(~p, 0))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~a + ~(b') * ~x + ~(d') * (~x) ^ 3) ^ ~(p'), ~x) => (1 / (3 ^ (3 * ~p) * (~a) ^ (2 * ~p))) * Antiderivative((~e + ~f * ~x) ^ ~m * (3 * ~a - ~b * ~x) ^ ~p * (3 * ~a + 2 * ~b * ~x) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~f, ~m], ~x) && (EqQ(4 * (~b) ^ 3 + 27 * (~a) ^ 2 * ~d, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~a + ~(b') * ~x + ~(d') * (~x) ^ 3) ^ ~p, ~x) => ((~a + ~b * ~x + ~d * (~x) ^ 3) ^ ~p / ((3 * ~a - ~b * ~x) ^ ~p * (3 * ~a + 2 * ~b * ~x) ^ (2 * ~p))) * Antiderivative((~e + ~f * ~x) ^ ~m * (3 * ~a - ~b * ~x) ^ ~p * (3 * ~a + 2 * ~b * ~x) ^ (2 * ~p), ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~f, ~m, ~p], ~x) && (EqQ(4 * (~b) ^ 3 + 27 * (~a) ^ 2 * ~d, 0) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~a + ~(b') * ~x + ~(d') * (~x) ^ 3) ^ ~(p'), ~x) => Antiderivative(ExpandIntegrand((~e + ~f * ~x) ^ ~m * (~a + ~b * ~x + ~d * (~x) ^ 3) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~f, ~m], ~x) && (NeQ(4 * (~b) ^ 3 + 27 * (~a) ^ 2 * ~d, 0) && IGtQ(~p, 0))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~a + ~(b') * ~x + ~(d') * (~x) ^ 3) ^ ~p, ~x) => With([r = Rt(-9 * ~a * (~d) ^ 2 + sqrt(3) * ~d * sqrt(4 * (~b) ^ 3 * ~d + 27 * (~a) ^ 2 * (~d) ^ 2), 3)], (1 / (~d) ^ (2 * ~p)) * Antiderivative((~e + ~f * ~x) ^ ~m * Simp(((18 ^ (1 / 3) * ~b * ~d) / (3r) - r / 18 ^ (1 / 3)) + ~d * ~x, ~x) ^ ~p * Simp((((~b * ~d) / 3 + (12 ^ (1 / 3) * (~b) ^ 2 * (~d) ^ 2) / (3 * r ^ 2) + r ^ 2 / (3 * 12 ^ (1 / 3))) - ~d * ((2 ^ (1 / 3) * ~b * ~d) / (3 ^ (1 / 3) * r) - r / 18 ^ (1 / 3)) * ~x) + (~d) ^ 2 * (~x) ^ 2, ~x) ^ ~p, ~x)) <-- FreeQ([~a, ~b, ~d, ~e, ~f, ~m], ~x) && (NeQ(4 * (~b) ^ 3 + 27 * (~a) ^ 2 * ~d, 0) && ILtQ(~p, 0))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~a + ~(b') * ~x + ~(d') * (~x) ^ 3) ^ ~p, ~x) => With([r = Rt(-9 * ~a * (~d) ^ 2 + sqrt(3) * ~d * sqrt(4 * (~b) ^ 3 * ~d + 27 * (~a) ^ 2 * (~d) ^ 2), 3)], ((~a + ~b * ~x + ~d * (~x) ^ 3) ^ ~p / (Simp(((18 ^ (1 / 3) * ~b * ~d) / (3r) - r / 18 ^ (1 / 3)) + ~d * ~x, ~x) ^ ~p * Simp((((~b * ~d) / 3 + (12 ^ (1 / 3) * (~b) ^ 2 * (~d) ^ 2) / (3 * r ^ 2) + r ^ 2 / (3 * 12 ^ (1 / 3))) - ~d * ((2 ^ (1 / 3) * ~b * ~d) / (3 ^ (1 / 3) * r) - r / 18 ^ (1 / 3)) * ~x) + (~d) ^ 2 * (~x) ^ 2, ~x) ^ ~p)) * Antiderivative((~e + ~f * ~x) ^ ~m * Simp(((18 ^ (1 / 3) * ~b * ~d) / (3r) - r / 18 ^ (1 / 3)) + ~d * ~x, ~x) ^ ~p * Simp((((~b * ~d) / 3 + (12 ^ (1 / 3) * (~b) ^ 2 * (~d) ^ 2) / (3 * r ^ 2) + r ^ 2 / (3 * 12 ^ (1 / 3))) - ~d * ((2 ^ (1 / 3) * ~b * ~d) / (3 ^ (1 / 3) * r) - r / 18 ^ (1 / 3)) * ~x) + (~d) ^ 2 * (~x) ^ 2, ~x) ^ ~p, ~x)) <-- FreeQ([~a, ~b, ~d, ~e, ~f, ~m, ~p], ~x) && (NeQ(4 * (~b) ^ 3 + 27 * (~a) ^ 2 * ~d, 0) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~P3) ^ ~(p'), ~x) => With([a = Coeff(~P3, ~x, 0), b = Coeff(~P3, ~x, 1), c = Coeff(~P3, ~x, 2), d = Coeff(~P3, ~x, 3)], Subst(Antiderivative(((3 * d * ~e - c * ~f) / (3d) + ~f * ~x) ^ ~m * Simp((((2 * c ^ 3 - 9 * b * c * d) + 27 * a * d ^ 2) / (27 * d ^ 2) - ((c ^ 2 - 3 * b * d) * ~x) / (3d)) + d * (~x) ^ 3, ~x) ^ ~p, ~x), ~x, ~x + c / (3d)) <-- NeQ(c, 0)) <-- FreeQ([~e, ~f, ~m, ~p], ~x) && PolyQ(~P3, ~x, 3)
    @apply_utils Antiderivative(~x / sqrt(~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(e') * (~x) ^ 4), ~x) => With([Px = ((1 / 320) * (33 * (~b) ^ 2 * ~c + 6 * ~a * (~c) ^ 2 + 40 * (~a) ^ 2 * ~e) - (22 / 5) * ~a * ~c * ~e * (~x) ^ 2) + (22 / 15) * ~b * ~c * ~e * (~x) ^ 3 + (1 / 4) * ~e * (5 * (~c) ^ 2 + 4 * ~a * ~e) * (~x) ^ 4 + (4 / 3) * ~b * (~e) ^ 2 * (~x) ^ 5 + 2 * ~c * (~e) ^ 2 * (~x) ^ 6 + (~e) ^ 3 * (~x) ^ 8], (1 / (8 * Rt(~e, 2))) * log(Px + Dist(1 / (8 * Rt(~e, 2) * ~x), D(Px, ~x), ~x) * sqrt(~a + ~b * ~x + ~c * (~x) ^ 2 + ~e * (~x) ^ 4))) <-- FreeQ([~a, ~b, ~c, ~e], ~x) && (EqQ(71 * (~c) ^ 2 + 100 * ~a * ~e, 0) && EqQ(1152 * (~c) ^ 3 - 125 * (~b) ^ 2 * ~e, 0))
    @apply_utils Antiderivative((~A + ~(B') * ~x) / sqrt(~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => ~B * Subst(Antiderivative(~x / sqrt((((((-3 * (~d) ^ 4 + 16 * ~c * (~d) ^ 2 * ~e) - 64 * ~b * ~d * (~e) ^ 2) + 256 * ~a * (~e) ^ 3) / (256 * (~e) ^ 3) + ((((~d) ^ 3 - 4 * ~c * ~d * ~e) + 8 * ~b * (~e) ^ 2) * ~x) / (8 * (~e) ^ 2)) - ((3 * (~d) ^ 2 - 8 * ~c * ~e) * (~x) ^ 2) / (8 * ~e)) + ~e * (~x) ^ 4), ~x), ~x, ~d / (4 * ~e) + ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B], ~x) && (EqQ(~B * ~d - 4 * ~A * ~e, 0) && (EqQ(~d * ((141 * (~d) ^ 3 - 752 * ~c * ~d * ~e) - 400 * ~b * (~e) ^ 2) + 16 * (~e) ^ 2 * (71 * (~c) ^ 2 + 100 * ~a * ~e), 0) && EqQ(144 * (3 * (~d) ^ 2 - 8 * ~c * ~e) ^ 3 + 125 * (((~d) ^ 3 - 4 * ~c * ~d * ~e) + 8 * ~b * (~e) ^ 2) ^ 2, 0)))
    @apply_utils Antiderivative((~f + ~(g') * (~x) ^ 2) / ((~d + ~(e') * ~x + ~(d') * (~x) ^ 2) * sqrt(~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(b') * (~x) ^ 3 + ~(a') * (~x) ^ 4)), ~x) => ((~a * ~f) / (~d * Rt((~a) ^ 2 * (2 * ~a - ~c), 2))) * atan((~a * ~b + ((4 * (~a) ^ 2 + (~b) ^ 2) - 2 * ~a * ~c) * ~x + ~a * ~b * (~x) ^ 2) / (2 * Rt((~a) ^ 2 * (2 * ~a - ~c), 2) * sqrt(~a + ~b * ~x + ~c * (~x) ^ 2 + ~b * (~x) ^ 3 + ~a * (~x) ^ 4))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(~b * ~d - ~a * ~e, 0) && (EqQ(~f + ~g, 0) && PosQ((~a) ^ 2 * (2 * ~a - ~c))))
    @apply_utils Antiderivative((~f + ~(g') * (~x) ^ 2) / ((~d + ~(e') * ~x + ~(d') * (~x) ^ 2) * sqrt(~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(b') * (~x) ^ 3 + ~(a') * (~x) ^ 4)), ~x) => ((-(~a) * ~f) / (~d * Rt(-((~a) ^ 2) * (2 * ~a - ~c), 2))) * atanh((~a * ~b + ((4 * (~a) ^ 2 + (~b) ^ 2) - 2 * ~a * ~c) * ~x + ~a * ~b * (~x) ^ 2) / (2 * Rt(-((~a) ^ 2) * (2 * ~a - ~c), 2) * sqrt(~a + ~b * ~x + ~c * (~x) ^ 2 + ~b * (~x) ^ 3 + ~a * (~x) ^ 4))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(~b * ~d - ~a * ~e, 0) && (EqQ(~f + ~g, 0) && NegQ((~a) ^ 2 * (2 * ~a - ~c))))
    @apply_utils Antiderivative(~P3 / (~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => With([q = sqrt((8 * (~a) ^ 2 + (~b) ^ 2) - 4 * ~a * ~c), A = Coeff(~P3, ~x, 0), B = Coeff(~P3, ~x, 1), C = Coeff(~P3, ~x, 2), D = Coeff(~P3, ~x, 3)], (1 / q) * Antiderivative(((~b * A - 2 * ~a * B) + 2 * ~a * D + A * q + ((2 * ~a * A - 2 * ~a * C) + ~b * D + D * q) * ~x) / (2 * ~a + (~b + q) * ~x + 2 * ~a * (~x) ^ 2), ~x) - (1 / q) * Antiderivative(((((~b * A - 2 * ~a * B) + 2 * ~a * D) - A * q) + (((2 * ~a * A - 2 * ~a * C) + ~b * D) - D * q) * ~x) / (2 * ~a + (~b - q) * ~x + 2 * ~a * (~x) ^ 2), ~x)) <-- FreeQ([~a, ~b, ~c], ~x) && (PolyQ(~P3, ~x, 3) && (EqQ(~a, ~e) && EqQ(~b, ~d)))
    @apply_utils Antiderivative(((~x) ^ ~(m') * ~P3) / (~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => With([q = sqrt((8 * (~a) ^ 2 + (~b) ^ 2) - 4 * ~a * ~c), A = Coeff(~P3, ~x, 0), B = Coeff(~P3, ~x, 1), C = Coeff(~P3, ~x, 2), D = Coeff(~P3, ~x, 3)], (1 / q) * Antiderivative(((~x) ^ ~m * ((~b * A - 2 * ~a * B) + 2 * ~a * D + A * q + ((2 * ~a * A - 2 * ~a * C) + ~b * D + D * q) * ~x)) / (2 * ~a + (~b + q) * ~x + 2 * ~a * (~x) ^ 2), ~x) - (1 / q) * Antiderivative(((~x) ^ ~m * ((((~b * A - 2 * ~a * B) + 2 * ~a * D) - A * q) + (((2 * ~a * A - 2 * ~a * C) + ~b * D) - D * q) * ~x)) / (2 * ~a + (~b - q) * ~x + 2 * ~a * (~x) ^ 2), ~x)) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (PolyQ(~P3, ~x, 3) && (EqQ(~a, ~e) && EqQ(~b, ~d)))
    @apply_utils Antiderivative((~(A') + ~(B') * ~x + ~(C') * (~x) ^ 2) / (~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => With([q = Rt(~C * (2 * ~e * (~B * ~d - 4 * ~A * ~e) + ~C * ((~d) ^ 2 - 4 * ~c * ~e)), 2)], ((-2 * (~C) ^ 2) / q) * atanh(((~C * ~d - ~B * ~e) + 2 * ~C * ~e * ~x) / q) + ((2 * (~C) ^ 2) / q) * atanh((~C * (((4 * ~B * ~c * ~C - 3 * (~B) ^ 2 * ~d) - 4 * ~A * ~C * ~d) + 12 * ~A * ~B * ~e + 4 * ~C * ((2 * ~c * ~C - ~B * ~d) + 2 * ~A * ~e) * ~x + 4 * ~C * (2 * ~C * ~d - ~B * ~e) * (~x) ^ 2 + 8 * (~C) ^ 2 * ~e * (~x) ^ 3)) / (q * ((~B) ^ 2 - 4 * ~A * ~C)))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B, ~C], ~x) && (EqQ(((~B) ^ 2 * ~d + 2 * ~C * (~b * ~C + ~A * ~d)) - 2 * ~B * (~c * ~C + 2 * ~A * ~e), 0) && (EqQ((((2 * (~B) ^ 2 * ~c * ~C - 8 * ~a * (~C) ^ 3) - (~B) ^ 3 * ~d) - 4 * ~A * ~B * ~C * ~d) + 4 * ~A * ((~B) ^ 2 + 2 * ~A * ~C) * ~e, 0) && PosQ(~C * (2 * ~e * (~B * ~d - 4 * ~A * ~e) + ~C * ((~d) ^ 2 - 4 * ~c * ~e)))))
    @apply_utils Antiderivative((~(A') + ~(C') * (~x) ^ 2) / (~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => With([q = Rt(~C * (-8 * ~A * (~e) ^ 2 + ~C * ((~d) ^ 2 - 4 * ~c * ~e)), 2)], ((-2 * (~C) ^ 2) / q) * atanh((~C * (~d + 2 * ~e * ~x)) / q) + ((2 * (~C) ^ 2) / q) * atanh((~C * (((~A * ~d - 2 * (~c * ~C + ~A * ~e) * ~x) - 2 * ~C * ~d * (~x) ^ 2) - 2 * ~C * ~e * (~x) ^ 3)) / (~A * q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~C], ~x) && (EqQ(~b * ~C + ~A * ~d, 0) && (EqQ(~a * (~C) ^ 2 - (~A) ^ 2 * ~e, 0) && PosQ(~C * (-8 * ~A * (~e) ^ 2 + ~C * ((~d) ^ 2 - 4 * ~c * ~e)))))
    @apply_utils Antiderivative((~(A') + ~(B') * ~x + ~(C') * (~x) ^ 2) / (~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => With([q = Rt(-(~C) * (2 * ~e * (~B * ~d - 4 * ~A * ~e) + ~C * ((~d) ^ 2 - 4 * ~c * ~e)), 2)], ((2 * (~C) ^ 2) / q) * atan(((~C * ~d - ~B * ~e) + 2 * ~C * ~e * ~x) / q) - ((2 * (~C) ^ 2) / q) * atan((~C * (((4 * ~B * ~c * ~C - 3 * (~B) ^ 2 * ~d) - 4 * ~A * ~C * ~d) + 12 * ~A * ~B * ~e + 4 * ~C * ((2 * ~c * ~C - ~B * ~d) + 2 * ~A * ~e) * ~x + 4 * ~C * (2 * ~C * ~d - ~B * ~e) * (~x) ^ 2 + 8 * (~C) ^ 2 * ~e * (~x) ^ 3)) / (q * ((~B) ^ 2 - 4 * ~A * ~C)))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~B, ~C], ~x) && (EqQ(((~B) ^ 2 * ~d + 2 * ~C * (~b * ~C + ~A * ~d)) - 2 * ~B * (~c * ~C + 2 * ~A * ~e), 0) && (EqQ((((2 * (~B) ^ 2 * ~c * ~C - 8 * ~a * (~C) ^ 3) - (~B) ^ 3 * ~d) - 4 * ~A * ~B * ~C * ~d) + 4 * ~A * ((~B) ^ 2 + 2 * ~A * ~C) * ~e, 0) && NegQ(~C * (2 * ~e * (~B * ~d - 4 * ~A * ~e) + ~C * ((~d) ^ 2 - 4 * ~c * ~e)))))
    @apply_utils Antiderivative((~(A') + ~(C') * (~x) ^ 2) / (~a + ~(b') * ~x + ~(c') * (~x) ^ 2 + ~(d') * (~x) ^ 3 + ~(e') * (~x) ^ 4), ~x) => With([q = Rt(-(~C) * (-8 * ~A * (~e) ^ 2 + ~C * ((~d) ^ 2 - 4 * ~c * ~e)), 2)], ((2 * (~C) ^ 2) / q) * atan((~C * ~d + 2 * ~C * ~e * ~x) / q) - ((2 * (~C) ^ 2) / q) * atan((-(~C) * (-(~A) * ~d + 2 * (~c * ~C + ~A * ~e) * ~x + 2 * ~C * ~d * (~x) ^ 2 + 2 * ~C * ~e * (~x) ^ 3)) / (~A * q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~A, ~C], ~x) && (EqQ(~b * ~C + ~A * ~d, 0) && (EqQ(~a * (~C) ^ 2 - (~A) ^ 2 * ~e, 0) && NegQ(~C * (-8 * ~A * (~e) ^ 2 + ~C * ((~d) ^ 2 - 4 * ~c * ~e)))))
    @apply_utils Antiderivative(~Px * (~P4) ^ ~p, ~x) => With([a = Coeff(~P4, ~x, 0), b = Coeff(~P4, ~x, 1), c = Coeff(~P4, ~x, 2), d = Coeff(~P4, ~x, 3), e = Coeff(~P4, ~x, 4)], (1 / a ^ (3 * ~p)) * Antiderivative(ExpandIntegrand((~Px * (a - b * ~x) ^ -(~p)) / (a ^ 5 - b ^ 5 * (~x) ^ 5) ^ -(~p), ~x), ~x) <-- NeQ(a, 0) && (EqQ(c, b ^ 2 / a) && (EqQ(d, b ^ 3 / a ^ 2) && EqQ(e, b ^ 4 / a ^ 3)))) <-- FreeQ(~p, ~x) && (PolyQ(~P4, ~x, 4) && (PolyQ(~Px, ~x) && ILtQ(~p, 0)))
    @apply_utils Antiderivative((~A + ~(B') * (~x) ^ ~n) / (~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ ~n + ~(d') * (~x) ^ ~n2), ~x) => (~A) ^ 2 * (~n - 1) * Subst(Antiderivative(1 / (~a + (~A) ^ 2 * ~b * (~n - 1) ^ 2 * (~x) ^ 2), ~x), ~x, ~x / (~A * (~n - 1) - ~B * (~x) ^ ~n)) <-- FreeQ([~a, ~b, ~c, ~d, ~A, ~B, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (NeQ(~n, 2) && (EqQ(~a * (~B) ^ 2 - (~A) ^ 2 * ~d * (~n - 1) ^ 2, 0) && EqQ(~B * ~c + 2 * ~A * ~d * (~n - 1), 0))))
    @apply_utils Antiderivative(((~x) ^ ~(m') * (~A + ~(B') * (~x) ^ ~(n'))) / (~a + ~(b') * (~x) ^ ~(k') + ~(c') * (~x) ^ ~(n') + ~(d') * (~x) ^ ~n2), ~x) => (((~A) ^ 2 * ((~m - ~n) + 1)) / (~m + 1)) * Subst(Antiderivative(1 / (~a + (~A) ^ 2 * ~b * ((~m - ~n) + 1) ^ 2 * (~x) ^ 2), ~x), ~x, (~x) ^ (~m + 1) / (~A * ((~m - ~n) + 1) + ~B * (~m + 1) * (~x) ^ ~n)) <-- FreeQ([~a, ~b, ~c, ~d, ~A, ~B, ~m, ~n], ~x) && (EqQ(~n2, 2 * ~n) && (EqQ(~k, 2 * (~m + 1)) && (EqQ(~a * (~B) ^ 2 * (~m + 1) ^ 2 - (~A) ^ 2 * ~d * ((~m - ~n) + 1) ^ 2, 0) && EqQ(~B * ~c * (~m + 1) - 2 * ~A * ~d * ((~m - ~n) + 1), 0))))
    @apply_utils Antiderivative((~a + ~(b') * (~x) ^ 2 + ~(c') * (~x) ^ 4) / (~d + ~(e') * (~x) ^ 2 + ~(f') * (~x) ^ 4 + ~(g') * (~x) ^ 6), ~x) => With([q = Rt((-(~a) * ~c * (~f) ^ 2 + 12 * (~a) ^ 2 * (~g) ^ 2 + ~f * (3 * (~c) ^ 2 * ~d - 2 * ~a * ~b * ~g)) / (~c * ~g * (3 * ~c * ~d - ~a * ~f)), 2), r = Rt(((~a * ~c * (~f) ^ 2 + 4 * ~g * (~b * ~c * ~d + (~a) ^ 2 * ~g)) - ~f * (3 * (~c) ^ 2 * ~d + 2 * ~a * ~b * ~g)) / (~c * ~g * (3 * ~c * ~d - ~a * ~f)), 2)], ((~c / (~g * q)) * atan((r + 2 * ~x) / q) - (~c / (~g * q)) * atan((r - 2 * ~x) / q)) - (~c / (~g * q)) * atan((((3 * ~c * ~d - ~a * ~f) * ~x) / (~g * q * (~b * ~c * ~d - 2 * (~a) ^ 2 * ~g) * ((~b * ~c * ~d - ~a * ~b * ~f) + 4 * (~a) ^ 2 * ~g))) * (((~b * (~c) ^ 2 * ~d * ~f - ~a * (~b) ^ 2 * ~f * ~g) - 2 * (~a) ^ 2 * ~c * ~f * ~g) + 6 * (~a) ^ 2 * ~b * (~g) ^ 2 + ~c * (((3 * (~c) ^ 2 * ~d * ~f - ~a * ~c * (~f) ^ 2) - ~b * ~c * ~d * ~g) + 2 * (~a) ^ 2 * (~g) ^ 2) * (~x) ^ 2 + (~c) ^ 2 * ~g * (3 * ~c * ~d - ~a * ~f) * (~x) ^ 4))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(((9 * (~c) ^ 3 * (~d) ^ 2 - ~c * ((~b) ^ 2 + 6 * ~a * ~c) * ~d * ~f) + (~a) ^ 2 * ~c * (~f) ^ 2 + 2 * ~a * ~b * (3 * ~c * ~d + ~a * ~f) * ~g) - 12 * (~a) ^ 3 * (~g) ^ 2, 0) && (EqQ(((3 * (~c) ^ 4 * (~d) ^ 2 * ~e - 3 * (~a) ^ 2 * (~c) ^ 2 * ~d * ~f * ~g) + (~a) ^ 3 * ~c * (~f) ^ 2 * ~g + 2 * (~a) ^ 3 * (~g) ^ 2 * (~b * ~f - 6 * ~a * ~g)) - (~c) ^ 3 * ~d * ((2 * ~b * ~d * ~f + ~a * ~e * ~f) - 12 * ~a * ~d * ~g), 0) && (NeQ(3 * ~c * ~d - ~a * ~f, 0) && (NeQ(~b * ~c * ~d - 2 * (~a) ^ 2 * ~g, 0) && (NeQ((~b * ~c * ~d - ~a * ~b * ~f) + 4 * (~a) ^ 2 * ~g, 0) && PosQ((-(~a) * ~c * (~f) ^ 2 + 12 * (~a) ^ 2 * (~g) ^ 2 + ~f * (3 * (~c) ^ 2 * ~d - 2 * ~a * ~b * ~g)) / (~c * ~g * (3 * ~c * ~d - ~a * ~f))))))))
    @apply_utils Antiderivative((~a + ~(c') * (~x) ^ 4) / (~d + ~(e') * (~x) ^ 2 + ~(f') * (~x) ^ 4 + ~(g') * (~x) ^ 6), ~x) => With([q = Rt((-(~a) * ~c * (~f) ^ 2 + 12 * (~a) ^ 2 * (~g) ^ 2 + 3 * ~f * (~c) ^ 2 * ~d) / (~c * ~g * (3 * ~c * ~d - ~a * ~f)), 2), r = Rt(((~a * ~c * (~f) ^ 2 + 4 * (~a) ^ 2 * (~g) ^ 2) - 3 * (~c) ^ 2 * ~d * ~f) / (~c * ~g * (3 * ~c * ~d - ~a * ~f)), 2)], ((~c / (~g * q)) * atan((r + 2 * ~x) / q) - (~c / (~g * q)) * atan((r - 2 * ~x) / q)) - (~c / (~g * q)) * atan((~c * (3 * ~c * ~d - ~a * ~f) * ~x * ((2 * (~a) ^ 2 * ~f * ~g - ((3 * (~c) ^ 2 * ~d * ~f - ~a * ~c * (~f) ^ 2) + 2 * (~a) ^ 2 * (~g) ^ 2) * (~x) ^ 2) - ~c * (3 * ~c * ~d - ~a * ~f) * ~g * (~x) ^ 4)) / (8 * (~a) ^ 4 * (~g) ^ 3 * q))) <-- FreeQ([~a, ~c, ~d, ~e, ~f, ~g], ~x) && (EqQ(((9 * (~c) ^ 3 * (~d) ^ 2 - 6 * ~a * (~c) ^ 2 * ~d * ~f) + (~a) ^ 2 * ~c * (~f) ^ 2) - 12 * (~a) ^ 3 * (~g) ^ 2, 0) && (EqQ((((3 * (~c) ^ 4 * (~d) ^ 2 * ~e - 3 * (~a) ^ 2 * (~c) ^ 2 * ~d * ~f * ~g) + (~a) ^ 3 * ~c * (~f) ^ 2 * ~g) - 12 * (~a) ^ 4 * (~g) ^ 3) - ~a * (~c) ^ 3 * ~d * (~e * ~f - 12 * ~d * ~g), 0) && (NeQ(3 * ~c * ~d - ~a * ~f, 0) && PosQ((-(~a) * ~c * (~f) ^ 2 + 12 * (~a) ^ 2 * (~g) ^ 2 + 3 * (~c) ^ 2 * ~d * ~f) / (~c * ~g * (3 * ~c * ~d - ~a * ~f))))))
    @apply_utils Antiderivative(~u * (~Q6) ^ ~p, ~x) => With([a = Coeff(~Q6, ~x, 0), b = Coeff(~Q6, ~x, 2), c = Coeff(~Q6, ~x, 3), d = Coeff(~Q6, ~x, 4), e = Coeff(~Q6, ~x, 6)], (1 / (3 ^ (3 * ~p) * a ^ (2 * ~p))) * Antiderivative(ExpandIntegrand(~u * (3a + 3 * Rt(a, 3) ^ 2 * Rt(c, 3) * ~x + b * (~x) ^ 2) ^ ~p * ((3a - 3 * (-1) ^ (1 / 3) * Rt(a, 3) ^ 2 * Rt(c, 3) * ~x) + b * (~x) ^ 2) ^ ~p * (3a + 3 * (-1) ^ (2 / 3) * Rt(a, 3) ^ 2 * Rt(c, 3) * ~x + b * (~x) ^ 2) ^ ~p, ~x), ~x) <-- EqQ(b ^ 2 - 3 * a * d, 0) && EqQ(b ^ 3 - 27 * a ^ 2 * e, 0)) <-- ILtQ(~p, 0) && (PolyQ(~Q6, ~x, 6) && (EqQ(Coeff(~Q6, ~x, 1), 0) && (EqQ(Coeff(~Q6, ~x, 5), 0) && RationalFunctionQ(~u, ~x))))
    @apply_utils Antiderivative(~Pm / ~Qn, ~x) => With([m = Expon(~Pm, ~x), n = Expon(~Qn, ~x)], (Coeff(~Pm, ~x, m) * log(~Qn)) / (n * Coeff(~Qn, ~x, n)) + Simplify(~Pm - (Coeff(~Pm, ~x, m) * D(~Qn, ~x)) / (n * Coeff(~Qn, ~x, n))) * Antiderivative(1 / ~Qn, ~x) <-- EqQ(m, n - 1) && EqQ(D(Simplify(~Pm - (Coeff(~Pm, ~x, m) / (n * Coeff(~Qn, ~x, n))) * D(~Qn, ~x)), ~x), 0)) <-- PolyQ(~Pm, ~x) && PolyQ(~Qn, ~x)
    @apply_utils Antiderivative(~Pm * (~Qn) ^ ~p, ~x) => With([m = Expon(~Pm, ~x), n = Expon(~Qn, ~x)], (Coeff(~Pm, ~x, m) * (~Qn) ^ (~p + 1)) / (n * (~p + 1) * Coeff(~Qn, ~x, n)) + Simplify(~Pm - (Coeff(~Pm, ~x, m) * D(~Qn, ~x)) / (n * Coeff(~Qn, ~x, n))) * Antiderivative((~Qn) ^ ~p, ~x) <-- EqQ(m, n - 1) && EqQ(D(Simplify(~Pm - (Coeff(~Pm, ~x, m) / (n * Coeff(~Qn, ~x, n))) * D(~Qn, ~x)), ~x), 0)) <-- FreeQ(~p, ~x) && (PolyQ(~Pm, ~x) && (PolyQ(~Qn, ~x) && NeQ(~p, -1)))
    @apply_utils Antiderivative(~Pm / ~Qn, ~x) => With([m = Expon(~Pm, ~x), n = Expon(~Qn, ~x)], (Coeff(~Pm, ~x, m) * log(~Qn)) / (n * Coeff(~Qn, ~x, n)) + (1 / (n * Coeff(~Qn, ~x, n))) * Antiderivative(ExpandToSum(n * Coeff(~Qn, ~x, n) * ~Pm - Coeff(~Pm, ~x, m) * D(~Qn, ~x), ~x) / ~Qn, ~x) <-- EqQ(m, n - 1)) <-- PolyQ(~Pm, ~x) && PolyQ(~Qn, ~x)
    @apply_utils Antiderivative(~Pm * (~Qn) ^ ~p, ~x) => With([m = Expon(~Pm, ~x), n = Expon(~Qn, ~x)], (Coeff(~Pm, ~x, m) * (~Qn) ^ (~p + 1)) / (n * (~p + 1) * Coeff(~Qn, ~x, n)) + (1 / (n * Coeff(~Qn, ~x, n))) * Antiderivative(ExpandToSum(n * Coeff(~Qn, ~x, n) * ~Pm - Coeff(~Pm, ~x, m) * D(~Qn, ~x), ~x) * (~Qn) ^ ~p, ~x) <-- EqQ(m, n - 1)) <-- FreeQ(~p, ~x) && (PolyQ(~Pm, ~x) && (PolyQ(~Qn, ~x) && NeQ(~p, -1)))
    @apply_utils Antiderivative(~Pm * (~Qn) ^ ~(p'), ~x) => With([m = Expon(~Pm, ~x), n = Expon(~Qn, ~x)], (Coeff(~Pm, ~x, m) * (~x) ^ ((m - n) + 1) * (~Qn) ^ (~p + 1)) / ((m + n * ~p + 1) * Coeff(~Qn, ~x, n)) + (1 / ((m + n * ~p + 1) * Coeff(~Qn, ~x, n))) * Antiderivative(ExpandToSum((m + n * ~p + 1) * Coeff(~Qn, ~x, n) * ~Pm - Coeff(~Pm, ~x, m) * (~x) ^ (m - n) * (((m - n) + 1) * ~Qn + (~p + 1) * ~x * D(~Qn, ~x)), ~x) * (~Qn) ^ ~p, ~x) <-- LtQ(1, n, m + 1) && m + n * ~p + 1 < 0) <-- FreeQ(~p, ~x) && (PolyQ(~Pm, ~x) && (PolyQ(~Qn, ~x) && LtQ(~p, -1)))
end
