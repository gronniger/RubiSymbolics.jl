int_rules_1_3_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.3.4*Normalizing*algebraic*functions =#
    @apply_utils Antiderivative(~(u') * (~(c') * (~d * (~(a') + ~(b') * ~x)) ^ ~q) ^ ~p, ~x) => ((~c * (~d * (~a + ~b * ~x)) ^ ~q) ^ ~p / (~a + ~b * ~x) ^ (~p * ~q)) * Antiderivative(~u * (~a + ~b * ~x) ^ (~p * ~q), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~q, ~p], ~x) && (Not(IntegerQ(~q)) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative(~(u') * (~(c') * (~(d') * (~(a') + ~(b') * ~x) ^ ~n) ^ ~q) ^ ~p, ~x) => ((~c * (~d * (~a + ~b * ~x) ^ ~n) ^ ~q) ^ ~p / (~a + ~b * ~x) ^ (~n * ~p * ~q)) * Antiderivative(~u * (~a + ~b * ~x) ^ (~n * ~p * ~q), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~q, ~p], ~x) && (Not(IntegerQ(~q)) && Not(IntegerQ(~p)))
    @apply_utils Antiderivative(~(u') * (~(c') * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~q) ^ ~p, ~x) => Simp((~c * (~a + ~b * (~x) ^ ~n) ^ ~q) ^ ~p / (~a + ~b * (~x) ^ ~n) ^ (~p * ~q)) * Antiderivative(~u * (~a + ~b * (~x) ^ ~n) ^ (~p * ~q), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p, ~q], ~x) && GeQ(~a, 0)
    @apply_utils Antiderivative(~(u') * (~(c') * (~a + ~(b') * (~x) ^ ~(n')) ^ ~q) ^ ~p, ~x) => Simp((~c * (~a + ~b * (~x) ^ ~n) ^ ~q) ^ ~p / (1 + (~b * (~x) ^ ~n) / ~a) ^ (~p * ~q)) * Antiderivative(~u * (1 + (~b * (~x) ^ ~n) / ~a) ^ (~p * ~q), ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p, ~q], ~x) && Not(GeQ(~a, 0))
    @apply_utils Antiderivative(~(u') * (~(e') * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(q') * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q')) ^ ~p, ~x) => Antiderivative(~u * (~e * (~d / ~b) ^ ~q * (~a + ~b * (~x) ^ ~n) ^ (2 * ~q)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (IntegerQ(~q) && EqQ(~b * ~c - ~a * ~d, 0))
    @apply_utils Antiderivative(~(u') * (~(e') * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~q * (~c + ~(d') * (~x) ^ ~(n')) ^ ~q) ^ ~p, ~x) => Antiderivative(~u * (~e * ((-((~a) ^ 2) * ~d) / ~b + ~b * ~d * (~x) ^ (2 * ~n)) ^ ~q) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (IntegerQ(~q) && EqQ(~b * ~c + ~a * ~d, 0))
    #= Antiderivative((~u')*(((~a')+(~b')*(~x)^(~n'))*((~c)+(~d')*(~x)^(~n')))^(~p),~x) :=  Antiderivative(u*(a+b*x^n)^p*(c+d*x^n)^p,x) <-- FreeQ([a,b,c,d,n,p],x) &&  EqQ(b+d,0) && GtQ(a,0) && GtQ(c,0) =#
    @apply_utils Antiderivative(~(u') * (~(e') * (~(a') + ~(b') * (~x) ^ ~(n')) * (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => Antiderivative(~u * (~a * ~c * ~e + (~b * ~c + ~a * ~d) * ~e * (~x) ^ ~n + ~b * ~d * ~e * (~x) ^ (2 * ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x)
    @apply_utils Antiderivative(~(u') * ((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => ((~b * ~e) / ~d) ^ ~p * Antiderivative(~u, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && EqQ(~b * ~c - ~a * ~d, 0)
    @apply_utils Antiderivative(~(u') * ((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => Antiderivative((~u * (~a * ~e + ~b * ~e * (~x) ^ ~n) ^ ~p) / (~c + ~d * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (GtQ(~b * ~d * ~e, 0) && GtQ(~c - (~a * ~d) / ~b, 0))
    #= Antiderivative((~u')*((~e')*((~a')+(~b')*(~x)^(~n'))/((~c)+(~d')*(~x)^(~n')))^(~p),~x) :=  Antiderivative(u*(a*e+b*e*x^n)^p/(c+d*x^n)^p,x) <-- FreeQ([a,b,c,d,e,n,p],x) &&  EqQ(b*c+a*d,0) && GtQ(b*e/d,0) && GtQ(c,0) =#
    #= Antiderivative((~u')*((~e')*((~a')+(~b')*(~x)^(~n'))/((~c)+(~d')*(~x)^(~n')))^(~p),~x) :=  Antiderivative(u*(-a*e-b*e*x^n)^p/(-c-d*x^n)^p,x) <-- FreeQ([a,b,c,d,e,n,p],x) &&  EqQ(b*c+a*d,0) && GtQ(b*e/d,0) && LtQ(c,0) =#
    @apply_utils Antiderivative(((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => With([q = Denominator(~p)], ((q * ~e * (~b * ~c - ~a * ~d)) / ~n) * Subst(Antiderivative(((~x) ^ (q * (~p + 1) - 1) * (-(~a) * ~e + ~c * (~x) ^ q) ^ (1 / ~n - 1)) / (~b * ~e - ~d * (~x) ^ q) ^ (1 / ~n + 1), ~x), ~x, ((~e * (~a + ~b * (~x) ^ ~n)) / (~c + ~d * (~x) ^ ~n)) ^ (1 / q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (FractionQ(~p) && IntegerQ(1 / ~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * ((~(e') * (~(a') + ~(b') * ~x)) / (~c + ~(d') * ~x)) ^ ~p, ~x) => With([q = Denominator(~p)], q * ~e * (~b * ~c - ~a * ~d) * Subst(Antiderivative(((~x) ^ (q * (~p + 1) - 1) * (-(~a) * ~e + ~c * (~x) ^ q) ^ ~m) / (~b * ~e - ~d * (~x) ^ q) ^ (~m + 2), ~x), ~x, ((~e * (~a + ~b * ~x)) / (~c + ~d * ~x)) ^ (1 / q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (FractionQ(~p) && IntegerQ(~m))
    @apply_utils Antiderivative((~x) ^ ~(m') * ((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * ((~e * (~a + ~b * ~x)) / (~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && IntegerQ(Simplify((~m + 1) / ~n))
    @apply_utils Antiderivative((~f * ~x) ^ ~m * ((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => Simp((~c * ~x) ^ ~m / (~x) ^ ~m) * Antiderivative((~x) ^ ~m * ((~e * (~a + ~b * (~x) ^ ~n)) / (~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p], ~x) && IntegerQ(Simplify((~m + 1) / ~n))
    @apply_utils Antiderivative((~u) ^ ~(r') * ((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => With([q = Denominator(~p)], ((q * ~e * (~b * ~c - ~a * ~d)) / ~n) * Subst(Antiderivative(SimplifyIntegrand((((~x) ^ (q * (~p + 1) - 1) * (-(~a) * ~e + ~c * (~x) ^ q) ^ (1 / ~n - 1)) / (~b * ~e - ~d * (~x) ^ q) ^ (1 / ~n + 1)) * ReplaceAll(~u, (~x->begin
                                                    #= none:1 =#
                                                    #= none:3 =#
                                                    (-(~a) * ~e + ~c * (~x) ^ q) ^ (1 / ~n) / (~b * ~e - ~d * (~x) ^ q) ^ (1 / ~n)
                                                end)) ^ ~r, ~x), ~x), ~x, ((~e * (~a + ~b * (~x) ^ ~n)) / (~c + ~d * (~x) ^ ~n)) ^ (1 / q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolynomialQ(~u, ~x) && (FractionQ(~p) && (IntegerQ(1 / ~n) && IntegerQ(~r))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~u) ^ ~(r') * ((~(e') * (~(a') + ~(b') * (~x) ^ ~(n'))) / (~c + ~(d') * (~x) ^ ~(n'))) ^ ~p, ~x) => With([q = Denominator(~p)], ((q * ~e * (~b * ~c - ~a * ~d)) / ~n) * Subst(Antiderivative(SimplifyIntegrand((((~x) ^ (q * (~p + 1) - 1) * (-(~a) * ~e + ~c * (~x) ^ q) ^ ((~m + 1) / ~n - 1)) / (~b * ~e - ~d * (~x) ^ q) ^ ((~m + 1) / ~n + 1)) * ReplaceAll(~u, (~x->begin
                                                    #= none:1 =#
                                                    #= none:3 =#
                                                    (-(~a) * ~e + ~c * (~x) ^ q) ^ (1 / ~n) / (~b * ~e - ~d * (~x) ^ q) ^ (1 / ~n)
                                                end)) ^ ~r, ~x), ~x), ~x, ((~e * (~a + ~b * (~x) ^ ~n)) / (~c + ~d * (~x) ^ ~n)) ^ (1 / q))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (PolynomialQ(~u, ~x) && (FractionQ(~p) && (IntegerQ(1 / ~n) && IntegersQ(~m, ~r))))
    @apply_utils Antiderivative(~(u') * (~a + ~(b') / (~c + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(~u * ((~b + ~a * ~c + ~a * ~d * (~x) ^ ~n) / (~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x)
    @apply_utils Antiderivative(~(u') * (~(e') * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(q') * (~c + ~(d') * (~x) ^ ~n) ^ ~(r')) ^ ~p, ~x) => Simp((~e * (~a + ~b * (~x) ^ ~n) ^ ~q * (~c + ~d * (~x) ^ ~n) ^ ~r) ^ ~p / ((~a + ~b * (~x) ^ ~n) ^ (~p * ~q) * (~c + ~d * (~x) ^ ~n) ^ (~p * ~r))) * Antiderivative(~u * (~a + ~b * (~x) ^ ~n) ^ (~p * ~q) * (~c + ~d * (~x) ^ ~n) ^ (~p * ~r), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p, ~q, ~r], ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * (~(c') / ~x) ^ ~n) ^ ~p, ~x) => -(~c) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n) ^ ~p / (~x) ^ 2, ~x), ~x, ~c / ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * (~(c') / ~x) ^ ~n) ^ ~p, ~x) => -((~c) ^ (~m + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, ~c / ~x) <-- FreeQ([~a, ~b, ~c, ~n, ~p], ~x) && IntegerQ(~m)
    @apply_utils Antiderivative((~(d') * ~x) ^ ~m * (~(a') + ~(b') * (~(c') / ~x) ^ ~n) ^ ~p, ~x) => -(~c) * (~d * ~x) ^ ~m * (~c / ~x) ^ ~m * Subst(Antiderivative((~a + ~b * (~x) ^ ~n) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, ~c / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && Not(IntegerQ(~m))
    @apply_utils Antiderivative((~(a') + ~(b') * (~(d') / ~x) ^ ~n + ~(c') * (~(d') / ~x) ^ ~(n2')) ^ ~p, ~x) => -(~d) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ 2, ~x), ~x, ~d / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && EqQ(~n2, 2 * ~n)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~(d') / ~x) ^ ~n + ~(c') * (~(d') / ~x) ^ ~(n2')) ^ ~p, ~x) => -((~d) ^ (~m + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, ~d / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && IntegerQ(~m))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~(d') / ~x) ^ ~n + ~(c') * (~(d') / ~x) ^ ~(n2')) ^ ~p, ~x) => -(~d) * (~e * ~x) ^ ~m * (~d / ~x) ^ ~m * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + ~c * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, ~d / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~n2, 2 * ~n) && Not(IntegerQ(~m)))
    @apply_utils Antiderivative((~(a') + ~(b') * (~(d') / ~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -(~d) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + (~c / (~d) ^ (2 * ~n)) * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ 2, ~x), ~x, ~d / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (EqQ(~n2, -2 * ~n) && IntegerQ(2 * ~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~(d') / ~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -((~d) ^ (~m + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + (~c / (~d) ^ (2 * ~n)) * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, ~d / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (EqQ(~n2, -2 * ~n) && (IntegerQ(2 * ~n) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~(d') / ~x) ^ ~n + ~(c') * (~x) ^ ~(n2')) ^ ~p, ~x) => -(~d) * (~e * ~x) ^ ~m * (~d / ~x) ^ ~m * Subst(Antiderivative((~a + ~b * (~x) ^ ~n + (~c / (~d) ^ (2 * ~n)) * (~x) ^ (2 * ~n)) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, ~d / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && (EqQ(~n2, -2 * ~n) && (Not(IntegerQ(~m)) && IntegerQ(2 * ~n)))
    @apply_utils Antiderivative(~(u') * (~(e') * (~a + ~(b') * (~x) ^ ~(n')) ^ ~(r')) ^ ~p * (~(f') * (~c + ~(d') * (~x) ^ ~(n')) ^ ~s) ^ ~q, ~x) => (((~e * (~a + ~b * (~x) ^ ~n) ^ ~r) ^ ~p * (~f * (~c + ~d * (~x) ^ ~n) ^ ~s) ^ ~q) / ((~a + ~b * (~x) ^ ~n) ^ (~p * ~r) * (~c + ~d * (~x) ^ ~n) ^ (~q * ~s))) * Antiderivative(~u * (~a + ~b * (~x) ^ ~n) ^ (~p * ~r) * (~c + ~d * (~x) ^ ~n) ^ (~q * ~s), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~n, ~p, ~q, ~r, ~s], ~x)
    @apply_utils Antiderivative((~u) ^ ~m, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m, ~x) <-- FreeQ(~m, ~x) && (LinearQ(~u, ~x) && Not(LinearMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~v) ^ ~(n'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ExpandToSum(~v, ~x) ^ ~n, ~x) <-- FreeQ([~m, ~n], ~x) && (LinearQ([~u, ~v], ~x) && Not(LinearMatchQ([~u, ~v], ~x)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~v) ^ ~(n') * (~w) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ExpandToSum(~v, ~x) ^ ~n * ExpandToSum(~w, ~x) ^ ~p, ~x) <-- FreeQ([~m, ~n, ~p], ~x) && (LinearQ([~u, ~v, ~w], ~x) && Not(LinearMatchQ([~u, ~v, ~w], ~x)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~v) ^ ~(n') * (~w) ^ ~(p') * (~z) ^ ~(q'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ExpandToSum(~v, ~x) ^ ~n * ExpandToSum(~w, ~x) ^ ~p * ExpandToSum(~z, ~x) ^ ~q, ~x) <-- FreeQ([~m, ~n, ~p, ~q], ~x) && (LinearQ([~u, ~v, ~w, ~z], ~x) && Not(LinearMatchQ([~u, ~v, ~w, ~z], ~x)))
    @apply_utils Antiderivative((~u) ^ ~p, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~u) ^ ~(p'), ~x) => Antiderivative((~c * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~c, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~u) ^ ~(p') * (~v) ^ ~(q'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p * ExpandToSum(~v, ~x) ^ ~q, ~x) <-- FreeQ([~p, ~q], ~x) && (BinomialQ([~u, ~v], ~x) && (EqQ(BinomialDegree(~u, ~x) - BinomialDegree(~v, ~x), 0) && Not(BinomialMatchQ([~u, ~v], ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~u) ^ ~(p') * (~v) ^ ~(q'), ~x) => Antiderivative((~e * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p * ExpandToSum(~v, ~x) ^ ~q, ~x) <-- FreeQ([~e, ~m, ~p, ~q], ~x) && (BinomialQ([~u, ~v], ~x) && (EqQ(BinomialDegree(~u, ~x) - BinomialDegree(~v, ~x), 0) && Not(BinomialMatchQ([~u, ~v], ~x))))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~v) ^ ~(p') * (~w) ^ ~(q'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ExpandToSum(~v, ~x) ^ ~p * ExpandToSum(~w, ~x) ^ ~q, ~x) <-- FreeQ([~m, ~p, ~q], ~x) && (BinomialQ([~u, ~v, ~w], ~x) && (EqQ(BinomialDegree(~u, ~x) - BinomialDegree(~v, ~x), 0) && (EqQ(BinomialDegree(~u, ~x) - BinomialDegree(~w, ~x), 0) && Not(BinomialMatchQ([~u, ~v, ~w], ~x)))))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~u) ^ ~(p') * (~v) ^ ~(q') * (~z) ^ ~(r'), ~x) => Antiderivative((~g * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p * ExpandToSum(~v, ~x) ^ ~q * ExpandToSum(~z, ~x) ^ ~r, ~x) <-- FreeQ([~g, ~m, ~p, ~q, ~r], ~x) && (BinomialQ([~u, ~v, ~z], ~x) && (EqQ(BinomialDegree(~u, ~x) - BinomialDegree(~v, ~x), 0) && (EqQ(BinomialDegree(~u, ~x) - BinomialDegree(~z, ~x), 0) && Not(BinomialMatchQ([~u, ~v, ~z], ~x)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * ~Pq * (~u) ^ ~(p'), ~x) => Antiderivative((~c * ~x) ^ ~m * ~Pq * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~c, ~m, ~p], ~x) && (PolyQ(~Pq, ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x))))
    @apply_utils Antiderivative((~u) ^ ~p, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (GeneralizedBinomialQ(~u, ~x) && Not(GeneralizedBinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~u) ^ ~(p'), ~x) => Antiderivative((~c * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~c, ~m, ~p], ~x) && (GeneralizedBinomialQ(~u, ~x) && Not(GeneralizedBinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~u) ^ ~p, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (QuadraticQ(~u, ~x) && Not(QuadraticMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~v) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ExpandToSum(~v, ~x) ^ ~p, ~x) <-- FreeQ([~m, ~p], ~x) && (LinearQ(~u, ~x) && (QuadraticQ(~v, ~x) && Not(LinearMatchQ(~u, ~x) && QuadraticMatchQ(~v, ~x))))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~v) ^ ~(n') * (~w) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ExpandToSum(~v, ~x) ^ ~n * ExpandToSum(~w, ~x) ^ ~p, ~x) <-- FreeQ([~m, ~n, ~p], ~x) && (LinearQ([~u, ~v], ~x) && (QuadraticQ(~w, ~x) && Not(LinearMatchQ([~u, ~v], ~x) && QuadraticMatchQ(~w, ~x))))
    @apply_utils Antiderivative((~u) ^ ~(p') * (~v) ^ ~(q'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p * ExpandToSum(~v, ~x) ^ ~q, ~x) <-- FreeQ([~p, ~q], ~x) && (QuadraticQ([~u, ~v], ~x) && Not(QuadraticMatchQ([~u, ~v], ~x)))
    @apply_utils Antiderivative((~z) ^ ~(m') * (~u) ^ ~(p') * (~v) ^ ~(q'), ~x) => Antiderivative(ExpandToSum(~z, ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p * ExpandToSum(~v, ~x) ^ ~q, ~x) <-- FreeQ([~m, ~p, ~q], ~x) && (LinearQ(~z, ~x) && (QuadraticQ([~u, ~v], ~x) && Not(LinearMatchQ(~z, ~x) && QuadraticMatchQ([~u, ~v], ~x))))
    @apply_utils Antiderivative(~Pq * (~u) ^ ~(p'), ~x) => Antiderivative(~Pq * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (PolyQ(~Pq, ~x) && (QuadraticQ(~u, ~x) && Not(QuadraticMatchQ(~u, ~x))))
    @apply_utils Antiderivative((~u) ^ ~(m') * ~Pq * (~v) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * ~Pq * ExpandToSum(~v, ~x) ^ ~p, ~x) <-- FreeQ([~m, ~p], ~x) && (PolyQ(~Pq, ~x) && (LinearQ(~u, ~x) && (QuadraticQ(~v, ~x) && Not(LinearMatchQ(~u, ~x) && QuadraticMatchQ(~v, ~x)))))
    @apply_utils Antiderivative((~u) ^ ~p, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (TrinomialQ(~u, ~x) && Not(TrinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(d') * ~x) ^ ~(m') * (~u) ^ ~(p'), ~x) => Antiderivative((~d * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~d, ~m, ~p], ~x) && (TrinomialQ(~u, ~x) && Not(TrinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~u) ^ ~(q') * (~v) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~q * ExpandToSum(~v, ~x) ^ ~p, ~x) <-- FreeQ([~p, ~q], ~x) && (BinomialQ(~u, ~x) && (TrinomialQ(~v, ~x) && Not(BinomialMatchQ(~u, ~x) && TrinomialMatchQ(~v, ~x))))
    @apply_utils Antiderivative((~u) ^ ~(q') * (~v) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~q * ExpandToSum(~v, ~x) ^ ~p, ~x) <-- FreeQ([~p, ~q], ~x) && (BinomialQ(~u, ~x) && (BinomialQ(~v, ~x) && Not(BinomialMatchQ(~u, ~x) && BinomialMatchQ(~v, ~x))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~z) ^ ~(q') * (~u) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * ExpandToSum(~z, ~x) ^ ~q * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~f, ~m, ~p, ~q], ~x) && (BinomialQ(~z, ~x) && (TrinomialQ(~u, ~x) && Not(BinomialMatchQ(~z, ~x) && TrinomialMatchQ(~u, ~x))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * (~z) ^ ~(q') * (~u) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * ExpandToSum(~z, ~x) ^ ~q * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~f, ~m, ~p, ~q], ~x) && (BinomialQ(~z, ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~z, ~x) && BinomialMatchQ(~u, ~x))))
    @apply_utils Antiderivative(~Pq * (~u) ^ ~(p'), ~x) => Antiderivative(~Pq * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (PolyQ(~Pq, ~x) && (TrinomialQ(~u, ~x) && Not(TrinomialMatchQ(~u, ~x))))
    @apply_utils Antiderivative((~(d') * ~x) ^ ~(m') * ~Pq * (~u) ^ ~(p'), ~x) => Antiderivative((~d * ~x) ^ ~m * ~Pq * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~d, ~m, ~p], ~x) && (PolyQ(~Pq, ~x) && (TrinomialQ(~u, ~x) && Not(TrinomialMatchQ(~u, ~x))))
    @apply_utils Antiderivative((~u) ^ ~p, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (GeneralizedTrinomialQ(~u, ~x) && Not(GeneralizedTrinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(d') * ~x) ^ ~(m') * (~u) ^ ~(p'), ~x) => Antiderivative((~d * ~x) ^ ~m * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~d, ~m, ~p], ~x) && (GeneralizedTrinomialQ(~u, ~x) && Not(GeneralizedTrinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative(~z * (~u) ^ ~(p'), ~x) => Antiderivative(ExpandToSum(~z, ~x) * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ(~p, ~x) && (BinomialQ(~z, ~x) && (GeneralizedTrinomialQ(~u, ~x) && (EqQ(BinomialDegree(~z, ~x) - GeneralizedTrinomialDegree(~u, ~x), 0) && Not(BinomialMatchQ(~z, ~x) && GeneralizedTrinomialMatchQ(~u, ~x)))))
    @apply_utils Antiderivative((~(f') * ~x) ^ ~(m') * ~z * (~u) ^ ~(p'), ~x) => Antiderivative((~f * ~x) ^ ~m * ExpandToSum(~z, ~x) * ExpandToSum(~u, ~x) ^ ~p, ~x) <-- FreeQ([~f, ~m, ~p], ~x) && (BinomialQ(~z, ~x) && (GeneralizedTrinomialQ(~u, ~x) && (EqQ(BinomialDegree(~z, ~x) - GeneralizedTrinomialDegree(~u, ~x), 0) && Not(BinomialMatchQ(~z, ~x) && GeneralizedTrinomialMatchQ(~u, ~x)))))
end
