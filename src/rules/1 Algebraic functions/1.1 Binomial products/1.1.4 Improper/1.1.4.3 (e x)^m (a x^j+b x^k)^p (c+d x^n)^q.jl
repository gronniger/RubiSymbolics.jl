int_rules_1_1_4_3 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.1.4.3*(e*x)^m*(a*x^j+b*x^k)^p*(c+d*x^n)^q =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') * (~x) ^ ~j + ~(b') * (~x) ^ ~(k')) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a * (~x) ^ Simplify(~j / ~n) + ~b * (~x) ^ Simplify(~k / ~n)) ^ ~p * (~c + ~d * ~x) ^ ~q, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~j, ~k, ~m, ~n, ~p, ~q], ~x) && (Not(IntegerQ(~p)) && (NeQ(~k, ~j) && (IntegerQ(Simplify(~j / ~n)) && (IntegerQ(Simplify(~k / ~n)) && (IntegerQ(Simplify((~m + 1) / ~n)) && NeQ((~n) ^ 2, 1))))))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') * (~x) ^ ~j + ~(b') * (~x) ^ ~(k')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~k) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~k, ~m, ~n, ~p, ~q], ~x) && (Not(IntegerQ(~p)) && (NeQ(~k, ~j) && (IntegerQ(Simplify(~j / ~n)) && (IntegerQ(Simplify(~k / ~n)) && (IntegerQ(Simplify((~m + 1) / ~n)) && NeQ((~n) ^ 2, 1))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(jn')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')), ~x) => (~c * (~e) ^ (~j - 1) * (~e * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ (~p + 1)) / (~a * (~m + ~j * ~p + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~m, ~n, ~p], ~x) && (EqQ(~jn, ~j + ~n) && (Not(IntegerQ(~p)) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(~a * ~d * (~m + ~j * ~p + 1) - ~b * ~c * (~m + ~n + ~p * (~j + ~n) + 1), 0) && ((GtQ(~e, 0) || IntegersQ(~j)) && NeQ(~m + ~j * ~p + 1, 0))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(jn')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')), ~x) => (-((~e) ^ (~j - 1)) * (~b * ~c - ~a * ~d) * (~e * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ (~p + 1)) / (~a * ~b * ~n * (~p + 1)) - (((~e) ^ ~j * (~a * ~d * (~m + ~j * ~p + 1) - ~b * ~c * (~m + ~n + ~p * (~j + ~n) + 1))) / (~a * ~b * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ (~m - ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~m, ~n], ~x) && (EqQ(~jn, ~j + ~n) && (Not(IntegerQ(~p)) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && (GtQ(~j, 0) && (LeQ(~j, ~m) && (GtQ(~e, 0) || IntegerQ(~j))))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(jn')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')), ~x) => (~c * (~e) ^ (~j - 1) * (~e * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ (~p + 1)) / (~a * (~m + ~j * ~p + 1)) + ((~a * ~d * (~m + ~j * ~p + 1) - ~b * ~c * (~m + ~n + ~p * (~j + ~n) + 1)) / (~a * (~e) ^ ~n * (~m + ~j * ~p + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~p], ~x) && (EqQ(~jn, ~j + ~n) && (Not(IntegerQ(~p)) && (NeQ(~b * ~c - ~a * ~d, 0) && (GtQ(~n, 0) && ((LtQ(~m + ~j * ~p, -1) || IntegersQ(~m - 1 / 2, ~p - 1 / 2) && (LtQ(~p, 0) && LtQ(~m, -(~n) * ~p - 1))) && ((GtQ(~e, 0) || IntegersQ(~j, ~n)) && (NeQ(~m + ~j * ~p + 1, 0) && NeQ((~m - ~n) + ~j * ~p + 1, 0))))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(jn')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')), ~x) => (~d * (~e) ^ (~j - 1) * (~e * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ (~p + 1)) / (~b * (~m + ~n + ~p * (~j + ~n) + 1)) - ((~a * ~d * (~m + ~j * ~p + 1) - ~b * ~c * (~m + ~n + ~p * (~j + ~n) + 1)) / (~b * (~m + ~n + ~p * (~j + ~n) + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~m, ~n, ~p], ~x) && (EqQ(~jn, ~j + ~n) && (Not(IntegerQ(~p)) && (NeQ(~b * ~c - ~a * ~d, 0) && (NeQ(~m + ~n + ~p * (~j + ~n) + 1, 0) && (GtQ(~e, 0) || IntegerQ(~j))))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') * (~x) ^ ~j + ~(b') * (~x) ^ ~(k')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~a * (~x) ^ Simplify(~j / (~m + 1)) + ~b * (~x) ^ Simplify(~k / (~m + 1))) ^ ~p * (~c + ~d * (~x) ^ Simplify(~n / (~m + 1))) ^ ~q, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~j, ~k, ~m, ~n, ~p, ~q], ~x) && (Not(IntegerQ(~p)) && (NeQ(~k, ~j) && (IntegerQ(Simplify(~j / ~n)) && (IntegerQ(Simplify(~k / ~n)) && (NeQ(~m, -1) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n))))))))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') * (~x) ^ ~j + ~(b') * (~x) ^ ~(k')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~k) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~k, ~m, ~n, ~p, ~q], ~x) && (Not(IntegerQ(~p)) && (NeQ(~k, ~j) && (IntegerQ(Simplify(~j / ~n)) && (IntegerQ(Simplify(~k / ~n)) && (NeQ(~m, -1) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n))))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(jn')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m) * (~a * (~x) ^ ~j + ~b * (~x) ^ (~j + ~n)) ^ FracPart(~p)) / ((~x) ^ (FracPart(~m) + ~j * FracPart(~p)) * (~a + ~b * (~x) ^ ~n) ^ FracPart(~p))) * Antiderivative((~x) ^ (~m + ~j * ~p) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~j, ~m, ~n, ~p, ~q], ~x) && (EqQ(~jn, ~j + ~n) && (Not(IntegerQ(~p)) && (NeQ(~b * ~c - ~a * ~d, 0) && Not(EqQ(~n, 1) && EqQ(~j, 1)))))
end
