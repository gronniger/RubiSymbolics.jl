int_rules_1_1_4_2 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.1.4.2*(c*x)^m*(a*x^j+b*x^n)^p =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (1 / ~n) * Subst(Antiderivative((~a * (~x) ^ Simplify(~j / ~n) + ~b * ~x) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (IntegerQ(Simplify(~j / ~n)) && EqQ(Simplify((~m - ~n) + 1), 0))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => (-((~c) ^ (~j - 1)) * (~c * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~n - ~j) * (~p + 1)) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (EqQ(((~m + ~n * ~p + ~n) - ~j) + 1, 0) && (IntegerQ(~j) || GtQ(~c, 0)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => (-((~c) ^ (~j - 1)) * (~c * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~n - ~j) * (~p + 1)) + (((~c) ^ ~j * (((~m + ~n * ~p + ~n) - ~j) + 1)) / (~a * (~n - ~j) * (~p + 1))) * Antiderivative((~c * ~x) ^ (~m - ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (ILtQ(Simplify((((~m + ~n * ~p + ~n) - ~j) + 1) / (~n - ~j)), 0) && (LtQ(~p, -1) && (IntegerQ(~j) || GtQ(~c, 0))))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c) ^ (~j - 1) * (~c * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~m + ~j * ~p + 1)) - ((~b * (((~m + ~n * ~p + ~n) - ~j) + 1)) / (~a * (~c) ^ (~n - ~j) * (~m + ~j * ~p + 1))) * Antiderivative((~c * ~x) ^ ((~m + ~n) - ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (ILtQ(Simplify((((~m + ~n * ~p + ~n) - ~j) + 1) / (~n - ~j)), 0) && (NeQ(~m + ~j * ~p + 1, 0) && (IntegersQ(~j, ~n) || GtQ(~c, 0))))))
    @apply_utils Antiderivative((~c * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => (((~c) ^ IntPart(~m) * (~c * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && ILtQ(Simplify((((~m + ~n * ~p + ~n) - ~j) + 1) / (~n - ~j)), 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a * (~x) ^ Simplify(~j / ~n) + ~b * ~x) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (IntegerQ(Simplify(~j / ~n)) && (IntegerQ(Simplify((~m + 1) / ~n)) && NeQ((~n) ^ 2, 1)))))
    @apply_utils Antiderivative((~c * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((~c) ^ IntPart(~m) * (~c * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (IntegerQ(Simplify(~j / ~n)) && (IntegerQ(Simplify((~m + 1) / ~n)) && NeQ((~n) ^ 2, 1)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~m * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c * ~x) ^ (~m + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p) / (~c * (~m + ~j * ~p + 1)) - ((~b * ~p * (~n - ~j)) / ((~c) ^ ~n * (~m + ~j * ~p + 1))) * Antiderivative((~c * ~x) ^ (~m + ~n) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c], ~x) && (Not(IntegerQ(~p)) && (LtQ(0, ~j, ~n) && ((IntegersQ(~j, ~n) || GtQ(~c, 0)) && (GtQ(~p, 0) && LtQ(~m + ~j * ~p + 1, 0)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c * ~x) ^ (~m + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p) / (~c * (~m + ~n * ~p + 1)) + ((~a * (~n - ~j) * ~p) / ((~c) ^ ~j * (~m + ~n * ~p + 1))) * Antiderivative((~c * ~x) ^ (~m + ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (Not(IntegerQ(~p)) && (LtQ(0, ~j, ~n) && ((IntegersQ(~j, ~n) || GtQ(~c, 0)) && (GtQ(~p, 0) && NeQ(~m + ~n * ~p + 1, 0)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c) ^ (~n - 1) * (~c * ~x) ^ ((~m - ~n) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * (~n - ~j) * (~p + 1)) - (((~c) ^ ~n * (((~m + ~j * ~p) - ~n) + ~j + 1)) / (~b * (~n - ~j) * (~p + 1))) * Antiderivative((~c * ~x) ^ (~m - ~n) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c], ~x) && (Not(IntegerQ(~p)) && (LtQ(0, ~j, ~n) && ((IntegersQ(~j, ~n) || GtQ(~c, 0)) && (LtQ(~p, -1) && GtQ(~m + ~j * ~p + 1, ~n - ~j)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => (-((~c) ^ (~j - 1)) * (~c * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~n - ~j) * (~p + 1)) + (((~c) ^ ~j * (((~m + ~n * ~p + ~n) - ~j) + 1)) / (~a * (~n - ~j) * (~p + 1))) * Antiderivative((~c * ~x) ^ (~m - ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~m], ~x) && (Not(IntegerQ(~p)) && (LtQ(0, ~j, ~n) && ((IntegersQ(~j, ~n) || GtQ(~c, 0)) && LtQ(~p, -1))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c) ^ (~n - 1) * (~c * ~x) ^ ((~m - ~n) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * (~m + ~n * ~p + 1)) - ((~a * (~c) ^ (~n - ~j) * (((~m + ~j * ~p) - ~n) + ~j + 1)) / (~b * (~m + ~n * ~p + 1))) * Antiderivative((~c * ~x) ^ (~m - (~n - ~j)) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~m, ~p], ~x) && (Not(IntegerQ(~p)) && (LtQ(0, ~j, ~n) && ((IntegersQ(~j, ~n) || GtQ(~c, 0)) && (GtQ(((~m + ~j * ~p + 1) - ~n) + ~j, 0) && NeQ(~m + ~n * ~p + 1, 0)))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c) ^ (~j - 1) * (~c * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~m + ~j * ~p + 1)) - ((~b * (((~m + ~n * ~p + ~n) - ~j) + 1)) / (~a * (~c) ^ (~n - ~j) * (~m + ~j * ~p + 1))) * Antiderivative((~c * ~x) ^ ((~m + ~n) - ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~m, ~p], ~x) && (Not(IntegerQ(~p)) && (LtQ(0, ~j, ~n) && ((IntegersQ(~j, ~n) || GtQ(~c, 0)) && LtQ(~m + ~j * ~p + 1, 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~a * (~x) ^ Simplify(~j / (~m + 1)) + ~b * (~x) ^ Simplify(~n / (~m + 1))) ^ ~p, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (IntegerQ(Simplify(~j / ~n)) && (NeQ(~m, -1) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n)))))))
    @apply_utils Antiderivative((~c * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((~c) ^ IntPart(~m) * (~c * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && (IntegerQ(Simplify(~j / ~n)) && (NeQ(~m, -1) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n)))))))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => ((~c * ~x) ^ (~m + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p) / (~c * ~p * (~n - ~j)) + (~a / (~c) ^ ~j) * Antiderivative((~c * ~x) ^ (~m + ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n], ~x) && (IGtQ(~p + 1 / 2, 0) && (NeQ(~n, ~j) && (EqQ(Simplify(~m + ~j * ~p + 1), 0) && (IntegerQ(~j) || GtQ(~c, 0)))))
    @apply_utils Antiderivative((~x) ^ ~(m') / sqrt(~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')), ~x) => (-2 / (~n - ~j)) * Subst(Antiderivative(1 / (1 - ~a * (~x) ^ 2), ~x), ~x, (~x) ^ (~j / 2) / sqrt(~a * (~x) ^ ~j + ~b * (~x) ^ ~n)) <-- FreeQ([~a, ~b, ~j, ~n], ~x) && (EqQ(~m, ~j / 2 - 1) && NeQ(~n, ~j))
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => (-((~c) ^ (~j - 1)) * (~c * ~x) ^ ((~m - ~j) + 1) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~n - ~j) * (~p + 1)) + (((~c) ^ ~j * (((~m + ~n * ~p + ~n) - ~j) + 1)) / (~a * (~n - ~j) * (~p + 1))) * Antiderivative((~c * ~x) ^ (~m - ~j) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n], ~x) && (ILtQ(~p + 1 / 2, 0) && (NeQ(~n, ~j) && (EqQ(Simplify(~m + ~j * ~p + 1), 0) && (IntegerQ(~j) || GtQ(~c, 0)))))
    @apply_utils Antiderivative((~c * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((~c) ^ IntPart(~m) * (~c * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (IntegerQ(~p + 1 / 2) && (NeQ(~n, ~j) && EqQ(Simplify(~m + ~j * ~p + 1), 0)))
    #= Antiderivative((~x)^(~m')*((~a')*(~x)^(~j')+(~b')*(~x)^(~n'))^(~p),~x) :=  (a*x^j+b*x^n)^(p+1)/(b*p*(n-j)*x^(n+j*p))*HypergeometricFunctions._₂F₁(1,1,1-p,- a/(b*x^(n-j))) <-- FreeQ([a,b,j,m,n,p],x) && NeQ(n,j) &&  EqQ(m+j*p+1,0) =#
    #= Antiderivative((~x)^(~m')*((~a')*(~x)^(~j')+(~b')*(~x)^(~n'))^(~p),~x) :=  (a*x^j+b*x^n)^(p+1)/(b*(p-1)*(n-j)*x^(2*n+j*(p-1)))*HypergeometricFunctions._₂F₁( 1,2,2-p,-a/(b*x^(n-j))) <-- FreeQ([a,b,j,m,n,p],x) && NeQ(n,j) &&  EqQ(m+n+(p-1)*j+1,0) =#
    #= Antiderivative((~x)^(~m')*((~a')*(~x)^(~j')+(~b')*(~x)^(~n'))^(~p),~x) :=  (x^(m-j+1)*(a*x^j+b*x^n)^(p+1))/(a*(m+j*p+1))*HypergeometricFunctions._₂F₁(1,(m+ n*p+1)/(n-j)+1,(m+j*p+1)/(n-j)+1,-b*x^(n-j)/a) <--  FreeQ([a,b,j,m,n,p],x) && NeQ(n,j) && NeQ(m+j*p+1,0) &&  NeQ(m+n+(p-1)*j+1,0) =#
    @apply_utils Antiderivative((~(c') * ~x) ^ ~(m') * (~(a') * (~x) ^ ~(j') + ~(b') * (~x) ^ ~(n')) ^ ~p, ~x) => (((~c) ^ IntPart(~m) * (~c * ~x) ^ FracPart(~m) * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ FracPart(~p)) / ((~x) ^ (FracPart(~m) + ~j * FracPart(~p)) * (~a + ~b * (~x) ^ (~n - ~j)) ^ FracPart(~p))) * Antiderivative((~x) ^ (~m + ~j * ~p) * (~a + ~b * (~x) ^ (~n - ~j)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~j, ~m, ~n, ~p], ~x) && (Not(IntegerQ(~p)) && (NeQ(~n, ~j) && PosQ(~n - ~j)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~(a') * (~v) ^ ~(j') + ~(b') * (~v) ^ ~(n')) ^ ~(p'), ~x) => ((~u) ^ ~m / (Coefficient(~v, ~x, 1) * (~v) ^ ~m)) * Subst(Antiderivative((~x) ^ ~m * (~a * (~x) ^ ~j + ~b * (~x) ^ ~n) ^ ~p, ~x), ~x, ~v) <-- FreeQ([~a, ~b, ~j, ~m, ~n, ~p], ~x) && LinearPairQ(~u, ~v, ~x)
end
