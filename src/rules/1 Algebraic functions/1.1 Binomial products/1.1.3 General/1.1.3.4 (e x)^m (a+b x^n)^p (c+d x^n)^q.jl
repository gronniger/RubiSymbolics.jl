int_rules_1_1_3_4 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.1.3.4*(e*x)^m*(a+b*x^n)^p*(c+d*x^n)^q =#
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => ((~e) ^ ~m / (~n * (~b) ^ (Simplify((~m + 1) / ~n) - 1))) * Subst(Antiderivative((~b * ~x) ^ ((~p + Simplify((~m + 1) / ~n)) - 1) * (~c + ~d * ~x) ^ ~q, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && ((IntegerQ(~m) || GtQ(~e, 0)) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(b') * (~x) ^ ~(n')) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => (((~e) ^ ~m * (~b) ^ IntPart(~p) * (~b * (~x) ^ ~n) ^ FracPart(~p)) / (~x) ^ (~n * FracPart(~p))) * Antiderivative((~x) ^ (~m + ~n * ~p) * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && ((IntegerQ(~m) || GtQ(~e, 0)) && Not(IntegerQ(Simplify((~m + 1) / ~n))))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(b') * (~x) ^ ~(n')) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && Not(IntegerQ(~m))
    @apply_utils Antiderivative(~x / ((~a + ~(b') * (~x) ^ 2) ^ (1 / 4) * (~c + ~(d') * (~x) ^ 2)), ~x) => (-1 / (sqrt(2) * Rt(~a, 4) * ~d)) * atan((Rt(~a, 4) ^ 2 - sqrt(~a + ~b * (~x) ^ 2)) / (sqrt(2) * Rt(~a, 4) * (~a + ~b * (~x) ^ 2) ^ (1 / 4))) - (1 / (sqrt(2) * Rt(~a, 4) * ~d)) * atanh((Rt(~a, 4) ^ 2 + sqrt(~a + ~b * (~x) ^ 2)) / (sqrt(2) * Rt(~a, 4) * (~a + ~b * (~x) ^ 2) ^ (1 / 4))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - 2 * ~a * ~d, 0) && PosQ(~a))
    @apply_utils Antiderivative((~x) ^ ~m / ((~a + ~(b') * (~x) ^ 2) ^ (1 / 4) * (~c + ~(d') * (~x) ^ 2)), ~x) => Antiderivative(ExpandIntegrand((~x) ^ ~m / ((~a + ~b * (~x) ^ 2) ^ (1 / 4) * (~c + ~d * (~x) ^ 2)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - 2 * ~a * ~d, 0) && (IntegerQ(~m) && (PosQ(~a) || IntegerQ(~m / 2))))
    @apply_utils Antiderivative((~x) ^ 2 / ((~a + ~(b') * (~x) ^ 2) ^ (3 / 4) * (~c + ~(d') * (~x) ^ 2)), ~x) => (-(~b) / (~a * ~d * Rt((~b) ^ 2 / ~a, 4) ^ 3)) * atan((~b + Rt((~b) ^ 2 / ~a, 4) ^ 2 * sqrt(~a + ~b * (~x) ^ 2)) / (Rt((~b) ^ 2 / ~a, 4) ^ 3 * ~x * (~a + ~b * (~x) ^ 2) ^ (1 / 4))) + (~b / (~a * ~d * Rt((~b) ^ 2 / ~a, 4) ^ 3)) * atanh((~b - Rt((~b) ^ 2 / ~a, 4) ^ 2 * sqrt(~a + ~b * (~x) ^ 2)) / (Rt((~b) ^ 2 / ~a, 4) ^ 3 * ~x * (~a + ~b * (~x) ^ 2) ^ (1 / 4))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - 2 * ~a * ~d, 0) && PosQ((~b) ^ 2 / ~a))
    @apply_utils Antiderivative((~x) ^ 2 / ((~a + ~(b') * (~x) ^ 2) ^ (3 / 4) * (~c + ~(d') * (~x) ^ 2)), ~x) => (-(~b) / (sqrt(2) * ~a * ~d * Rt(-((~b) ^ 2) / ~a, 4) ^ 3)) * atan((Rt(-((~b) ^ 2) / ~a, 4) * ~x) / (sqrt(2) * (~a + ~b * (~x) ^ 2) ^ (1 / 4))) + (~b / (sqrt(2) * ~a * ~d * Rt(-((~b) ^ 2) / ~a, 4) ^ 3)) * atanh((Rt(-((~b) ^ 2) / ~a, 4) * ~x) / (sqrt(2) * (~a + ~b * (~x) ^ 2) ^ (1 / 4))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - 2 * ~a * ~d, 0) && NegQ((~b) ^ 2 / ~a))
    @apply_utils Antiderivative((~x) ^ ~m / ((~a + ~(b') * (~x) ^ 2) ^ (3 / 4) * (~c + ~(d') * (~x) ^ 2)), ~x) => Antiderivative(ExpandIntegrand((~x) ^ ~m / ((~a + ~b * (~x) ^ 2) ^ (3 / 4) * (~c + ~d * (~x) ^ 2)), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (EqQ(~b * ~c - 2 * ~a * ~d, 0) && (IntegerQ(~m) && (PosQ(~a) || IntegerQ(~m / 2))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => (1 / ~n) * Subst(Antiderivative((~a + ~b * ~x) ^ ~p * (~c + ~d * ~x) ^ ~q, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && EqQ((~m - ~n) + 1, 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => Antiderivative((~x) ^ (~m + ~n * (~p + ~q)) * (~b + ~a * (~x) ^ -(~n)) ^ ~p * (~d + ~c * (~x) ^ -(~n)) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IntegersQ(~p, ~q) && NegQ(~n)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * ~x) ^ ~p * (~c + ~d * ~x) ^ ~q, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => Antiderivative(ExpandIntegrand((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~p, 0) && IGtQ(~q, 0)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~c * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * ~e * (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(~a * ~d * (~m + 1) - ~b * ~c * (~m + ~n * (~p + 1) + 1), 0) && NeQ(~m, -1)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~c * (~e * ~x) ^ (~m + 1) * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ (~p + 1) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ (~p + 1)) / (~a1 * ~a2 * ~e * (~m + 1)) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && (EqQ(~a1 * ~a2 * ~d * (~m + 1) - ~b1 * ~b2 * ~c * (~m + ~n * (~p + 1) + 1), 0) && NeQ(~m, -1))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~c * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * ~e * (~m + 1)) + (~d / (~e) ^ ~n) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(~m + ~n * (~p + 1) + 1, 0) && ((IntegerQ(~n) || GtQ(~e, 0)) && (GtQ(~n, 0) && LtQ(~m, -1) || LtQ(~n, 0) && GtQ(~m + ~n, -1)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => ((~b * ~c - ~a * ~d) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * ~b * ~e * (~m + 1)) + (~d / ~b) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(~m + ~n * (~p + 1) + 1, 0) && NeQ(~m, -1)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~c * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * ~e * (~m + 1)) + ((~a * ~d * (~m + 1) - ~b * ~c * (~m + ~n * (~p + 1) + 1)) / (~a * (~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && ((IntegerQ(~n) || GtQ(~e, 0)) && ((GtQ(~n, 0) && LtQ(~m, -1) || LtQ(~n, 0) && GtQ(~m + ~n, -1)) && Not(ILtQ(~p, -1)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~c * (~e * ~x) ^ (~m + 1) * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ (~p + 1) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ (~p + 1)) / (~a1 * ~a2 * ~e * (~m + 1)) + ((~a1 * ~a2 * ~d * (~m + 1) - ~b1 * ~b2 * ~c * (~m + ~n * (~p + 1) + 1)) / (~a1 * ~a2 * (~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ ~p * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ ~p, ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~e, ~p], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && ((IntegerQ(~n) || GtQ(~e, 0)) && ((GtQ(~n, 0) && LtQ(~m, -1) || LtQ(~n, 0) && GtQ(~m + ~n, -1)) && Not(ILtQ(~p, -1))))))
    @apply_utils Antiderivative((~x) ^ ~m * (~a + ~(b') * (~x) ^ 2) ^ ~p * (~c + ~(d') * (~x) ^ 2), ~x) => ((-(~a)) ^ (~m / 2 - 1) * (~b * ~c - ~a * ~d) * ~x * (~a + ~b * (~x) ^ 2) ^ (~p + 1)) / (2 * (~b) ^ (~m / 2 + 1) * (~p + 1)) + (1 / (2 * (~b) ^ (~m / 2 + 1) * (~p + 1))) * Antiderivative((~a + ~b * (~x) ^ 2) ^ (~p + 1) * ExpandToSum(2 * ~b * (~p + 1) * (~x) ^ 2 * Together(((~b) ^ (~m / 2) * (~x) ^ (~m - 2) * (~c + ~d * (~x) ^ 2) - (-(~a)) ^ (~m / 2 - 1) * (~b * ~c - ~a * ~d)) / (~a + ~b * (~x) ^ 2)) - (-(~a)) ^ (~m / 2 - 1) * (~b * ~c - ~a * ~d), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && (IGtQ(~m / 2, 0) && (IntegerQ(~p) || EqQ(~m + 2 * ~p + 1, 0)))))
    @apply_utils Antiderivative((~x) ^ ~m * (~a + ~(b') * (~x) ^ 2) ^ ~p * (~c + ~(d') * (~x) ^ 2), ~x) => ((-(~a)) ^ (~m / 2 - 1) * (~b * ~c - ~a * ~d) * ~x * (~a + ~b * (~x) ^ 2) ^ (~p + 1)) / (2 * (~b) ^ (~m / 2 + 1) * (~p + 1)) + (1 / (2 * (~b) ^ (~m / 2 + 1) * (~p + 1))) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ 2) ^ (~p + 1) * ExpandToSum(2 * ~b * (~p + 1) * Together(((~b) ^ (~m / 2) * (~c + ~d * (~x) ^ 2) - (-(~a)) ^ (~m / 2 - 1) * (~b * ~c - ~a * ~d) * (~x) ^ (-(~m) + 2)) / (~a + ~b * (~x) ^ 2)) - (-(~a)) ^ (~m / 2 - 1) * (~b * ~c - ~a * ~d) * (~x) ^ -(~m), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && (ILtQ(~m / 2, 0) && (IntegerQ(~p) || EqQ(~m + 2 * ~p + 1, 0)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (-((~b * ~c - ~a * ~d)) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * ~b * ~e * ~n * (~p + 1)) - ((~a * ~d * (~m + 1) - ~b * ~c * (~m + ~n * (~p + 1) + 1)) / (~a * ~b * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && (Not(IntegerQ(~p + 1 / 2)) && NeQ(~p, -5 / 4) || (Not(RationalQ(~m)) || IGtQ(~n, 0) && (ILtQ(~p + 1 / 2, 0) && LeQ(-1, ~m, -(~n) * (~p + 1)))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (-((~b1 * ~b2 * ~c - ~a1 * ~a2 * ~d)) * (~e * ~x) ^ (~m + 1) * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ (~p + 1) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ (~p + 1)) / (~a1 * ~a2 * ~b1 * ~b2 * ~e * ~n * (~p + 1)) - ((~a1 * ~a2 * ~d * (~m + 1) - ~b1 * ~b2 * ~c * (~m + ~n * (~p + 1) + 1)) / (~a1 * ~a2 * ~b1 * ~b2 * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ (~p + 1) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ (~p + 1), ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~e, ~m, ~n], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && (LtQ(~p, -1) && (Not(IntegerQ(~p + 1 / 2)) && NeQ(~p, -5 / 4) || (Not(RationalQ(~m)) || IGtQ(~n, 0) && (ILtQ(~p + 1 / 2, 0) && LeQ(-1, ~m, -(~n) * (~p + 1))))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~d * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~e * (~m + ~n * (~p + 1) + 1)) - ((~a * ~d * (~m + 1) - ~b * ~c * (~m + ~n * (~p + 1) + 1)) / (~b * (~m + ~n * (~p + 1) + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && NeQ(~m + ~n * (~p + 1) + 1, 0))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n), ~x) => (~d * (~e * ~x) ^ (~m + 1) * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ (~p + 1) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ (~p + 1)) / (~b1 * ~b2 * ~e * (~m + ~n * (~p + 1) + 1)) - ((~a1 * ~a2 * ~d * (~m + 1) - ~b1 * ~b2 * ~c * (~m + ~n * (~p + 1) + 1)) / (~b1 * ~b2 * (~m + ~n * (~p + 1) + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a1 + ~b1 * (~x) ^ (~n / 2)) ^ ~p * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ ~p, ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && NeQ(~m + ~n * (~p + 1) + 1, 0)))
    @apply_utils Antiderivative(((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p) / (~c + ~(d') * (~x) ^ ~n), ~x) => Antiderivative(ExpandIntegrand(((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p) / (~c + ~d * (~x) ^ ~n), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (IGtQ(~p, 0) && (IntegerQ(~m) || (IGtQ(2 * (~m + 1), 0) || Not(RationalQ(~m)))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ 2, ~x) => ((~c) ^ 2 * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * ~e * (~m + 1)) - (1 / (~a * (~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * Simp((~b * (~c) ^ 2 * ~n * (~p + 1) + ~c * (~b * ~c - 2 * ~a * ~d) * (~m + 1)) - ~a * (~m + 1) * (~d) ^ 2 * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~m, -1) && GtQ(~n, 0))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ 2, ~x) => (-((~b * ~c - ~a * ~d) ^ 2) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~a * (~b) ^ 2 * ~e * ~n * (~p + 1)) + (1 / (~a * (~b) ^ 2 * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * Simp((~b * ~c - ~a * ~d) ^ 2 * (~m + 1) + (~b) ^ 2 * (~c) ^ 2 * ~n * (~p + 1) + ~a * ~b * (~d) ^ 2 * ~n * (~p + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && LtQ(~p, -1)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ 2, ~x) => ((~d) ^ 2 * (~e * ~x) ^ (~m + ~n + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * (~e) ^ (~n + 1) * (~m + ~n * (~p + 2) + 1)) + (1 / (~b * (~m + ~n * (~p + 2) + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * Simp(~b * (~c) ^ 2 * (~m + ~n * (~p + 2) + 1) + ~d * ((2 * ~b * ~c - ~a * ~d) * (~m + ~n + 1) + 2 * ~b * ~c * ~n * (~p + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && NeQ(~m + ~n * (~p + 2) + 1, 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => With([k = GCD(~m + 1, ~n)], (1 / k) * Subst(Antiderivative((~x) ^ ((~m + 1) / k - 1) * (~a + ~b * (~x) ^ (~n / k)) ^ ~p * (~c + ~d * (~x) ^ (~n / k)) ^ ~q, ~x), ~x, (~x) ^ k) <-- k != 1) <-- FreeQ([~a, ~b, ~c, ~d, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => With([k = Denominator(~m)], (k / ~e) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + (~b * (~x) ^ (k * ~n)) / (~e) ^ ~n) ^ ~p * (~c + (~d * (~x) ^ (k * ~n)) / (~e) ^ ~n) ^ ~q, ~x), ~x, (~e * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (FractionQ(~m) && IntegerQ(~p))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e) ^ (~n - 1) * (~e * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~b * ~n * (~p + 1)) - ((~e) ^ ~n / (~b * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * ((~m - ~n) + 1) + ~d * (~m + ~n * (~q - 1) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GtQ(~q, 0) && (GtQ((~m - ~n) + 1, 0) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-((~c * ~b - ~a * ~d)) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1)) / (~a * ~b * ~e * ~n * (~p + 1)) + (1 / (~a * ~b * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 2) * Simp(~c * (~c * ~b * ~n * (~p + 1) + (~c * ~b - ~a * ~d) * (~m + 1)) + ~d * (~c * ~b * ~n * (~p + 1) + (~c * ~b - ~a * ~d) * (~m + ~n * (~q - 1) + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GtQ(~q, 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-((~e * ~x) ^ (~m + 1)) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a * ~e * ~n * (~p + 1)) + (1 / (~a * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * (~m + ~n * (~p + 1) + 1) + ~d * (~m + ~n * (~p + ~q + 1) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (LtQ(0, ~q, 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-(~a) * (~e) ^ (2 * ~n - 1) * (~e * ~x) ^ ((~m - 2 * ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~b * ~n * (~b * ~c - ~a * ~d) * (~p + 1)) + ((~e) ^ (2 * ~n) / (~b * ~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~e * ~x) ^ (~m - 2 * ~n) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~a * ~c * ((~m - 2 * ~n) + 1) + (~a * ~d * ((~m - ~n) + ~n * ~q + 1) + ~b * ~c * ~n * (~p + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GtQ((~m - ~n) + 1, ~n) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e) ^ (~n - 1) * (~e * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~n * (~b * ~c - ~a * ~d) * (~p + 1)) - ((~e) ^ ~n / (~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~e * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~c * ((~m - ~n) + 1) + ~d * (~m + ~n * (~p + ~q + 1) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GeQ(~n, (~m - ~n) + 1) && (GtQ((~m - ~n) + 1, 0) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-(~b) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~a * ~e * ~n * (~b * ~c - ~a * ~d) * (~p + 1)) + (1 / (~a * ~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~c * ~b * (~m + 1) + ~n * (~b * ~c - ~a * ~d) * (~p + 1) + ~d * ~b * (~m + ~n * (~p + ~q + 2) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~e * (~m + 1)) - (~n / ((~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ (~p - 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~b * ~c * ~p + ~a * ~d * ~q + ~b * ~d * (~p + ~q) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ(~q, 0) && (LtQ(~m, -1) && (GtQ(~p, 0) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (~c * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1)) / (~a * ~e * (~m + 1)) - (1 / (~a * (~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 2) * Simp(~c * (~c * ~b - ~a * ~d) * (~m + 1) + ~c * ~n * (~b * ~c * (~p + 1) + ~a * ~d * (~q - 1)) + ~d * ((~c * ~b - ~a * ~d) * (~m + 1) + ~c * ~b * ~n * (~p + ~q)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ(~q, 1) && (LtQ(~m, -1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a * ~e * (~m + 1)) - (1 / (~a * (~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * ~b * (~m + 1) + ~n * (~b * ~c * (~p + 1) + ~a * ~d * ~q) + ~d * (~b * (~m + 1) + ~b * ~n * (~p + ~q + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(0, ~q, 1) && (LtQ(~m, -1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~e * (~m + ~n * (~p + ~q) + 1)) + (~n / (~m + ~n * (~p + ~q) + 1)) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p - 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * ~c * (~p + ~q) + (~q * (~b * ~c - ~a * ~d) + ~a * ~d * (~p + ~q)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ(~q, 0) && (GtQ(~p, 0) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (~d * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1)) / (~b * ~e * (~m + ~n * (~p + ~q) + 1)) + (1 / (~b * (~m + ~n * (~p + ~q) + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 2) * Simp(~c * ((~c * ~b - ~a * ~d) * (~m + 1) + ~c * ~b * ~n * (~p + ~q)) + (~d * (~c * ~b - ~a * ~d) * (~m + 1) + ~d * ~n * (~q - 1) * (~b * ~c - ~a * ~d) + ~c * ~b * ~d * ~n * (~p + ~q)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ(~q, 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e) ^ (~n - 1) * (~e * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~b * (~m + ~n * (~p + ~q) + 1)) - ((~e) ^ ~n / (~b * (~m + ~n * (~p + ~q) + 1))) * Antiderivative((~e * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * ~c * ((~m - ~n) + 1) + (~a * ~d * ((~m - ~n) + 1) - ~n * ~q * (~b * ~c - ~a * ~d)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ(~q, 0) && (GtQ((~m - ~n) + 1, 0) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e) ^ (2 * ~n - 1) * (~e * ~x) ^ ((~m - 2 * ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~b * ~d * (~m + ~n * (~p + ~q) + 1)) - ((~e) ^ (2 * ~n) / (~b * ~d * (~m + ~n * (~p + ~q) + 1))) * Antiderivative((~e * ~x) ^ (~m - 2 * ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~a * ~c * ((~m - 2 * ~n) + 1) + (~a * ~d * (~m + ~n * (~q - 1) + 1) + ~b * ~c * (~m + ~n * (~p - 1) + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ((~m - ~n) + 1, ~n) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~a * ~c * ~e * (~m + 1)) - (1 / (~a * ~c * (~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp((~b * ~c + ~a * ~d) * (~m + ~n + 1) + ~n * (~b * ~c * ~p + ~a * ~d * ~q) + ~b * ~d * (~m + ~n * (~p + ~q + 2) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~m, -1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') / ((~a + ~(b') * (~x) ^ ~n) * (~c + ~(d') * (~x) ^ ~n)), ~x) => ((-(~a) * (~e) ^ ~n) / (~b * ~c - ~a * ~d)) * Antiderivative((~e * ~x) ^ (~m - ~n) / (~a + ~b * (~x) ^ ~n), ~x) + ((~c * (~e) ^ ~n) / (~b * ~c - ~a * ~d)) * Antiderivative((~e * ~x) ^ (~m - ~n) / (~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && LeQ(~n, ~m, 2 * ~n - 1)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') / ((~a + ~(b') * (~x) ^ ~n) * (~c + ~(d') * (~x) ^ ~n)), ~x) => (~b / (~b * ~c - ~a * ~d)) * Antiderivative((~e * ~x) ^ ~m / (~a + ~b * (~x) ^ ~n), ~x) - (~d / (~b * ~c - ~a * ~d)) * Antiderivative((~e * ~x) ^ ~m / (~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && IGtQ(~n, 0))
    @apply_utils Antiderivative(((~(e') * ~x) ^ ~m * (~c + ~(d') * (~x) ^ ~n) ^ ~(q')) / (~a + ~(b') * (~x) ^ ~n), ~x) => ((~e) ^ ~n / ~b) * Antiderivative((~e * ~x) ^ (~m - ~n) * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) - ((~a * (~e) ^ ~n) / ~b) * Antiderivative(((~e * ~x) ^ (~m - ~n) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a + ~b * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LeQ(~n, ~m, 2 * ~n - 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, -1, ~q, ~x))))
    @apply_utils Antiderivative((~x * (~a + ~(b') * (~x) ^ ~n) ^ ~p) / (~c + ~(d') * (~x) ^ ~n), ~x) => (~b / ~d) * Antiderivative(~x * (~a + ~b * (~x) ^ ~n) ^ (~p - 1), ~x) - ((~b * ~c - ~a * ~d) / ~d) * Antiderivative((~x * (~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / (~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (GtQ(~p, 0) && IntBinomialQ(~a, ~b, ~c, ~d, 1, 1, ~n, ~p, -1, ~x))))
    @apply_utils Antiderivative((~x * (~a + ~(b') * (~x) ^ ~n) ^ ~p) / (~c + ~(d') * (~x) ^ ~n), ~x) => (~b / (~b * ~c - ~a * ~d)) * Antiderivative(~x * (~a + ~b * (~x) ^ ~n) ^ (~p - 1), ~x) - (~d / (~b * ~c - ~a * ~d)) * Antiderivative((~x * (~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~n, 0) && (LtQ(~p, -1) && IntBinomialQ(~a, ~b, ~c, ~d, 1, 1, ~n, ~p, -1, ~x))))
    @apply_utils Antiderivative(~x / ((~a + ~(b') * (~x) ^ 3) * sqrt(~c + ~(d') * (~x) ^ 3)), ~x) => With([q = Rt(~d / ~c, 3)], (((q * atanh(sqrt(~c + ~d * (~x) ^ 3) / Rt(~c, 2))) / (9 * 2 ^ (2 / 3) * ~b * Rt(~c, 2)) + (q * atan(sqrt(~c + ~d * (~x) ^ 3) / (sqrt(3) * Rt(~c, 2)))) / (3 * 2 ^ (2 / 3) * sqrt(3) * ~b * Rt(~c, 2))) - (q * atan((sqrt(3) * Rt(~c, 2) * (1 + 2 ^ (1 / 3) * q * ~x)) / sqrt(~c + ~d * (~x) ^ 3))) / (3 * 2 ^ (2 / 3) * sqrt(3) * ~b * Rt(~c, 2))) - (q * atanh((Rt(~c, 2) * (1 - 2 ^ (1 / 3) * q * ~x)) / sqrt(~c + ~d * (~x) ^ 3))) / (3 * 2 ^ (2 / 3) * ~b * Rt(~c, 2))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(4 * ~b * ~c - ~a * ~d, 0) && PosQ(~c)))
    @apply_utils Antiderivative(~x / ((~a + ~(b') * (~x) ^ 3) * sqrt(~c + ~(d') * (~x) ^ 3)), ~x) => With([q = Rt(~d / ~c, 3)], (((-q * atan(sqrt(~c + ~d * (~x) ^ 3) / Rt(-(~c), 2))) / (9 * 2 ^ (2 / 3) * ~b * Rt(-(~c), 2)) - (q * atanh(sqrt(~c + ~d * (~x) ^ 3) / (sqrt(3) * Rt(-(~c), 2)))) / (3 * 2 ^ (2 / 3) * sqrt(3) * ~b * Rt(-(~c), 2))) - (q * atanh((sqrt(3) * Rt(-(~c), 2) * (1 + 2 ^ (1 / 3) * q * ~x)) / sqrt(~c + ~d * (~x) ^ 3))) / (3 * 2 ^ (2 / 3) * sqrt(3) * ~b * Rt(-(~c), 2))) - (q * atan((Rt(-(~c), 2) * (1 - 2 ^ (1 / 3) * q * ~x)) / sqrt(~c + ~d * (~x) ^ 3))) / (3 * 2 ^ (2 / 3) * ~b * Rt(-(~c), 2))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(4 * ~b * ~c - ~a * ~d, 0) && NegQ(~c)))
    @apply_utils Antiderivative(~x / ((~a + ~(b') * (~x) ^ 3) * sqrt(~c + ~(d') * (~x) ^ 3)), ~x) => With([q = Rt(~d / ~c, 3)], (((~d * q) / (4 * ~b)) * Antiderivative((~x) ^ 2 / ((8 * ~c - ~d * (~x) ^ 3) * sqrt(~c + ~d * (~x) ^ 3)), ~x) - (q ^ 2 / (12 * ~b)) * Antiderivative((1 + q * ~x) / ((2 - q * ~x) * sqrt(~c + ~d * (~x) ^ 3)), ~x)) + (1 / (12 * ~b * ~c)) * Antiderivative(((2 * ~c * q ^ 2 - 2 * ~d * ~x) - ~d * q * (~x) ^ 2) / ((4 + 2 * q * ~x + q ^ 2 * (~x) ^ 2) * sqrt(~c + ~d * (~x) ^ 3)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && EqQ(8 * ~b * ~c + ~a * ~d, 0))
    @apply_utils Antiderivative(~x / ((~c + ~(d') * (~x) ^ 3) * sqrt(~a + ~(b') * (~x) ^ 3)), ~x) => With([q = Rt(~b / ~a, 3), r = Simplify((~b * ~c - 10 * ~a * ~d) / (6 * ~a * ~d))], (((-q * (2 - r) * atan(((1 - r) * sqrt(~a + ~b * (~x) ^ 3)) / (sqrt(2) * Rt(~a, 2) * r ^ (3 / 2)))) / (3 * sqrt(2) * Rt(~a, 2) * ~d * r ^ (3 / 2)) - (q * (2 - r) * atan((Rt(~a, 2) * sqrt(r) * (1 + r) * (1 + q * ~x)) / (sqrt(2) * sqrt(~a + ~b * (~x) ^ 3)))) / (2 * sqrt(2) * Rt(~a, 2) * ~d * r ^ (3 / 2))) - (q * (2 - r) * atanh((Rt(~a, 2) * (1 - r) * sqrt(r) * (1 + q * ~x)) / (sqrt(2) * sqrt(~a + ~b * (~x) ^ 3)))) / (6 * sqrt(2) * Rt(~a, 2) * ~d * sqrt(r))) - (q * (2 - r) * atanh((Rt(~a, 2) * sqrt(r) * ((1 + r) - 2 * q * ~x)) / (sqrt(2) * sqrt(~a + ~b * (~x) ^ 3)))) / (3 * sqrt(2) * Rt(~a, 2) * ~d * sqrt(r))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(((~b) ^ 2 * (~c) ^ 2 - 20 * ~a * ~b * ~c * ~d) - 8 * (~a) ^ 2 * (~d) ^ 2, 0) && PosQ(~a)))
    @apply_utils Antiderivative(~x / ((~c + ~(d') * (~x) ^ 3) * sqrt(~a + ~(b') * (~x) ^ 3)), ~x) => With([q = Rt(~b / ~a, 3), r = Simplify((~b * ~c - 10 * ~a * ~d) / (6 * ~a * ~d))], (((q * (2 - r) * atanh(((1 - r) * sqrt(~a + ~b * (~x) ^ 3)) / (sqrt(2) * Rt(-(~a), 2) * r ^ (3 / 2)))) / (3 * sqrt(2) * Rt(-(~a), 2) * ~d * r ^ (3 / 2)) - (q * (2 - r) * atanh((Rt(-(~a), 2) * sqrt(r) * (1 + r) * (1 + q * ~x)) / (sqrt(2) * sqrt(~a + ~b * (~x) ^ 3)))) / (2 * sqrt(2) * Rt(-(~a), 2) * ~d * r ^ (3 / 2))) - (q * (2 - r) * atan((Rt(-(~a), 2) * (1 - r) * sqrt(r) * (1 + q * ~x)) / (sqrt(2) * sqrt(~a + ~b * (~x) ^ 3)))) / (6 * sqrt(2) * Rt(-(~a), 2) * ~d * sqrt(r))) - (q * (2 - r) * atan((Rt(-(~a), 2) * sqrt(r) * ((1 + r) - 2 * q * ~x)) / (sqrt(2) * sqrt(~a + ~b * (~x) ^ 3)))) / (3 * sqrt(2) * Rt(-(~a), 2) * ~d * sqrt(r))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(((~b) ^ 2 * (~c) ^ 2 - 20 * ~a * ~b * ~c * ~d) - 8 * (~a) ^ 2 * (~d) ^ 2, 0) && NegQ(~a)))
    @apply_utils Antiderivative(~x / ((~a + ~(b') * (~x) ^ 3) ^ (1 / 3) * (~c + ~(d') * (~x) ^ 3)), ~x) => With([q = Rt(~b / ~a, 3)], (-(q ^ 2) / (3 * ~d)) * Antiderivative(1 / ((1 - q * ~x) * (~a + ~b * (~x) ^ 3) ^ (1 / 3)), ~x) + (q / ~d) * Subst(Antiderivative(1 / (1 + 2 * ~a * (~x) ^ 3), ~x), ~x, (1 + q * ~x) / (~a + ~b * (~x) ^ 3) ^ (1 / 3))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && EqQ(~b * ~c + ~a * ~d, 0))
    @apply_utils Antiderivative(~x / ((~a + ~(b') * (~x) ^ 3) ^ (2 / 3) * (~c + ~(d') * (~x) ^ 3)), ~x) => With([q = Rt((~b * ~c - ~a * ~d) / ~c, 3)], (-(atan((1 + (2 * q * ~x) / (~a + ~b * (~x) ^ 3) ^ (1 / 3)) / sqrt(3))) / (sqrt(3) * ~c * q ^ 2) + log(~c + ~d * (~x) ^ 3) / (6 * ~c * q ^ 2)) - log(q * ~x - (~a + ~b * (~x) ^ 3) ^ (1 / 3)) / (2 * ~c * q ^ 2)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && NeQ(~b * ~c - ~a * ~d, 0)
    @apply_utils Antiderivative((~x) ^ 2 / ((~a + ~(b') * (~x) ^ 4) * sqrt(~c + ~(d') * (~x) ^ 4)), ~x) => With([r = Numerator(Rt(-(~a) / ~b, 2)), s = Denominator(Rt(-(~a) / ~b, 2))], (s / (2 * ~b)) * Antiderivative(1 / ((r + s * (~x) ^ 2) * sqrt(~c + ~d * (~x) ^ 4)), ~x) - (s / (2 * ~b)) * Antiderivative(1 / ((r - s * (~x) ^ 2) * sqrt(~c + ~d * (~x) ^ 4)), ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && NeQ(~b * ~c - ~a * ~d, 0)
    @apply_utils Antiderivative(((~x) ^ 2 * sqrt(~c + ~(d') * (~x) ^ 4)) / (~a + ~(b') * (~x) ^ 4), ~x) => (~d / ~b) * Antiderivative((~x) ^ 2 / sqrt(~c + ~d * (~x) ^ 4), ~x) + ((~b * ~c - ~a * ~d) / ~b) * Antiderivative((~x) ^ 2 / ((~a + ~b * (~x) ^ 4) * sqrt(~c + ~d * (~x) ^ 4)), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && NeQ(~b * ~c - ~a * ~d, 0)
    @apply_utils Antiderivative((~x) ^ 2 / (sqrt(~a + ~(b') * (~x) ^ 2) * sqrt(~c + ~(d') * (~x) ^ 2)), ~x) => (~x * sqrt(~a + ~b * (~x) ^ 2)) / (~b * sqrt(~c + ~d * (~x) ^ 2)) - (~c / ~b) * Antiderivative(sqrt(~a + ~b * (~x) ^ 2) / (~c + ~d * (~x) ^ 2) ^ (3 / 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (PosQ(~b / ~a) && (PosQ(~d / ~c) && Not(SimplerSqrtQ(~b / ~a, ~d / ~c)))))
    @apply_utils Antiderivative((~x) ^ ~n / (sqrt(~a + ~(b') * (~x) ^ ~n) * sqrt(~c + ~(d') * (~x) ^ ~n)), ~x) => (1 / ~b) * Antiderivative(sqrt(~a + ~b * (~x) ^ ~n) / sqrt(~c + ~d * (~x) ^ ~n), ~x) - (~a / ~b) * Antiderivative(1 / (sqrt(~a + ~b * (~x) ^ ~n) * sqrt(~c + ~d * (~x) ^ ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && ((EqQ(~n, 2) || EqQ(~n, 4)) && Not(EqQ(~n, 2) && SimplerSqrtQ(-(~b) / ~a, -(~d) / ~c))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q'), ~x) => With([k = Denominator(~p)], ((k * (~a) ^ (~p + (~m + 1) / ~n)) / ~n) * Subst(Antiderivative(((~x) ^ ((k * (~m + 1)) / ~n - 1) * (~c - (~b * ~c - ~a * ~d) * (~x) ^ k) ^ ~q) / (1 - ~b * (~x) ^ k) ^ (~p + ~q + (~m + 1) / ~n + 1), ~x), ~x, (~x) ^ (~n / k) / (~a + ~b * (~x) ^ ~n) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (IGtQ(~n, 0) && (RationalQ(~m, ~p) && (IntegersQ(~p + (~m + 1) / ~n, ~q) && LtQ(-1, ~p, 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => -(Subst(Antiderivative(((~a + ~b * (~x) ^ -(~n)) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (ILtQ(~n, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => With([g = Denominator(~m)], (-g / ~e) * Subst(Antiderivative(((~a + ~b * (~e) ^ -(~n) * (~x) ^ (-g * ~n)) ^ ~p * (~c + ~d * (~e) ^ -(~n) * (~x) ^ (-g * ~n)) ^ ~q) / (~x) ^ (g * (~m + 1) + 1), ~x), ~x, 1 / (~e * ~x) ^ (1 / g))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~p, ~q], ~x) && (ILtQ(~n, 0) && FractionQ(~m))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => -((~e * ~x) ^ ~m) * ((~x) ^ -1) ^ ~m * Subst(Antiderivative(((~a + ~b * (~x) ^ -(~n)) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (ILtQ(~n, 0) && Not(RationalQ(~m))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => With([g = Denominator(~n)], g * Subst(Antiderivative((~x) ^ (g * (~m + 1) - 1) * (~a + ~b * (~x) ^ (g * ~n)) ^ ~p * (~c + ~d * (~x) ^ (g * ~n)) ^ ~q, ~x), ~x, (~x) ^ (1 / g))) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && FractionQ(~n))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && FractionQ(~n))
    #= Antiderivative((~x)^(~m')*((~a)+(~b')*(~x)^(~n))^(~p)*((~c)+(~d')*(~x)^(~n))^(~q),~x) :=  -1/(m+1)*Subst(Antiderivative((a+b*x^Simplify(-n/(m+1)))^p*(c+d*x^Simplify(-n/(m+ 1)))^q/x^2,x),x,x^(-(m+1))) <-- FreeQ([a,b,c,d,m,n],x) &&  NeQ(b*c-a*d,0) && NeQ(m,-1) && ILtQ(Simplify(n/(m+1)+1),0) && GeQ(p,-1) && LtQ(p,0) && GeQ(q,-1) && LtQ(q,0) && Not(IntegerQ(n)) =#
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ Simplify(~n / (~m + 1))) ^ ~p * (~c + ~d * (~x) ^ Simplify(~n / (~m + 1))) ^ ~q, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n))))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IntegerQ(Simplify(~n / (~m + 1))) && Not(IntegerQ(~n))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-((~c * ~b - ~a * ~d)) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1)) / (~a * ~b * ~e * ~n * (~p + 1)) + (1 / (~a * ~b * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 2) * Simp(~c * (~c * ~b * ~n * (~p + 1) + (~c * ~b - ~a * ~d) * (~m + 1)) + ~d * (~c * ~b * ~n * (~p + 1) + (~c * ~b - ~a * ~d) * (~m + ~n * (~q - 1) + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && (GtQ(~q, 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-((~e * ~x) ^ (~m + 1)) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a * ~e * ~n * (~p + 1)) + (1 / (~a * ~n * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * (~m + ~n * (~p + 1) + 1) + ~d * (~m + ~n * (~p + ~q + 1) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && (LtQ(0, ~q, 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (-(~b) * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~a * ~e * ~n * (~b * ~c - ~a * ~d) * (~p + 1)) + (1 / (~a * ~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~c * ~b * (~m + 1) + ~n * (~b * ~c - ~a * ~d) * (~p + 1) + ~d * ~b * (~m + ~n * (~p + ~q + 2) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (LtQ(~p, -1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => ((~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~e * (~m + ~n * (~p + ~q) + 1)) + (~n / (~m + ~n * (~p + ~q) + 1)) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p - 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~a * ~c * (~p + ~q) + (~q * (~b * ~c - ~a * ~d) + ~a * ~d * (~p + ~q)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (GtQ(~q, 0) && (GtQ(~p, 0) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (~d * (~e * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1)) / (~b * ~e * (~m + ~n * (~p + ~q) + 1)) + (1 / (~b * (~m + ~n * (~p + ~q) + 1))) * Antiderivative((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 2) * Simp(~c * ((~c * ~b - ~a * ~d) * (~m + 1) + ~c * ~b * ~n * (~p + ~q)) + (~d * (~c * ~b - ~a * ~d) * (~m + 1) + ~d * ~n * (~q - 1) * (~b * ~c - ~a * ~d) + ~c * ~b * ~d * ~n * (~p + ~q)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (GtQ(~q, 1) && IntBinomialQ(~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q, ~x)))
    @apply_utils Antiderivative((~x) ^ ~m / ((~a + ~(b') * (~x) ^ ~n) * (~c + ~(d') * (~x) ^ ~n)), ~x) => (-(~a) / (~b * ~c - ~a * ~d)) * Antiderivative((~x) ^ (~m - ~n) / (~a + ~b * (~x) ^ ~n), ~x) + (~c / (~b * ~c - ~a * ~d)) * Antiderivative((~x) ^ (~m - ~n) / (~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (EqQ(~m, ~n) || EqQ(~m, 2 * ~n - 1)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') / ((~a + ~(b') * (~x) ^ ~n) * (~c + ~(d') * (~x) ^ ~n)), ~x) => (~b / (~b * ~c - ~a * ~d)) * Antiderivative((~e * ~x) ^ ~m / (~a + ~b * (~x) ^ ~n), ~x) - (~d / (~b * ~c - ~a * ~d)) * Antiderivative((~e * ~x) ^ ~m / (~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n, ~m], ~x) && NeQ(~b * ~c - ~a * ~d, 0)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => Antiderivative(ExpandIntegrand((~e * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (IGtQ(~p, -2) && (IGtQ(~q, -2) || EqQ(~q, -3) && IntegerQ((~m - 1) / 2))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (((~a) ^ ~p * (~c) ^ ~q * (~e * ~x) ^ (~m + 1)) / (~e * (~m + 1))) * AppellF1((~m + 1) / ~n, -(~p), -(~q), 1 + (~m + 1) / ~n, (-(~b) * (~x) ^ ~n) / ~a, (-(~d) * (~x) ^ ~n) / ~c) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (NeQ(~m, -1) && (NeQ(~m, ~n - 1) && ((IntegerQ(~p) || GtQ(~a, 0)) && (IntegerQ(~q) || GtQ(~c, 0))))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q, ~x) => (((~a) ^ IntPart(~p) * (~a + ~b * (~x) ^ ~n) ^ FracPart(~p)) / (1 + (~b * (~x) ^ ~n) / ~a) ^ FracPart(~p)) * Antiderivative((~e * ~x) ^ ~m * (1 + (~b * (~x) ^ ~n) / ~a) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (NeQ(~m, -1) && (NeQ(~m, ~n - 1) && Not(IntegerQ(~p) || GtQ(~a, 0)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * (~v) ^ ~n) ^ ~(p') * (~(c') + ~(d') * (~v) ^ ~n) ^ ~(q'), ~x) => (1 / Coefficient(~v, ~x, 1) ^ (~m + 1)) * Subst(Antiderivative(SimplifyIntegrand((~x - Coefficient(~v, ~x, 0)) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x), ~x), ~x, ~v) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p, ~q], ~x) && (LinearQ(~v, ~x) && (IntegerQ(~m) && NeQ(~v, ~x)))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~(a') + ~(b') * (~v) ^ ~n) ^ ~(p') * (~(c') + ~(d') * (~v) ^ ~n) ^ ~(q'), ~x) => ((~u) ^ ~m / (Coefficient(~v, ~x, 1) * (~v) ^ ~m)) * Subst(Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x), ~x, ~v) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p, ~q], ~x) && LinearPairQ(~u, ~v, ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~(q'), ~x) => Antiderivative((~x) ^ (~m - ~n * ~q) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~d + ~c * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (EqQ(~mn, -(~n)) && (IntegerQ(~q) && (PosQ(~n) || Not(IntegerQ(~p)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~q, ~x) => (((~x) ^ (~n * FracPart(~q)) * (~c + ~d * (~x) ^ -(~n)) ^ FracPart(~q)) / (~d + ~c * (~x) ^ ~n) ^ FracPart(~q)) * Antiderivative((~x) ^ (~m - ~n * ~q) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~d + ~c * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p, ~q], ~x) && (EqQ(~mn, -(~n)) && (Not(IntegerQ(~q)) && Not(IntegerQ(~p))))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~(q'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p, ~q], ~x) && EqQ(~mn, -(~n))
    #= IntBinomialQ(a,b,c,d,e,m,n,p,q,x)*returns*True*iff  (e*x)^m*(a+b*x^n)^p*(c+d*x^n)^q*is*integrable*wrt*x*in*terms*of  non-Appell*functions. =#IntBinomialQ((~a), (~b), (~c), (~d), (~e), (~m), (~n), (~p), (~q), ~x) := IntegersQ(p, q) || IGtQ(p, 0) || IGtQ(q, 0) || EqQ(n, 2) && (IntegersQ(m, 2*p, 2*q) || IntegersQ(2*m, p, 2*q) || IntegersQ(2*m, 2*p, q)) || EqQ(n, 4) && (IntegersQ(m, p, 2*q) || IntegersQ(m, 2*p, q)) || EqQ(n, 2) && IntegersQ(m/2, p + 1/3, q) && (EqQ(b*c + 3*a*d, 0) || EqQ(b*c - 9*a*d, 0)) || EqQ(n, 2) && IntegersQ(m/2, q + 1/3, p) && (EqQ(a*d + 3*b*c, 0) || EqQ(a*d - 9*b*c, 0)) || EqQ(n, 3) && IntegersQ((m - 1)/3, q, p - 1/2) && (EqQ(b*c - 4*a*d, 0) || EqQ(b*c + 8*a*d, 0) || EqQ(b^2*c^2 - 20*a*b*c*d - 8*a^2*d^2, 0)) || EqQ(n, 3) && IntegersQ((m - 1)/3, p, q - 1/2) && (EqQ(4*b*c - a*d, 0) || EqQ(8*b*c + a*d, 0) || EqQ(8*b^2*c^2 + 20*a*b*c*d - a^2*d^2, 0)) || EqQ(n, 3) && (IntegersQ(m, q, 3*p) || IntegersQ(m, p, 3*q)) && EqQ(b*c + a*d, 0) || EqQ(n, 3) && (IntegersQ((m + 2)/3, p + 2/3, q) || IntegersQ((m + 2)/3, q + 2/3, p)) || EqQ(n, 3) && (IntegersQ(m/3, p + 1/3, q) || IntegersQ(m/3, q + 1/3, p))
    @apply_utils Antiderivative(~(u') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => Antiderivative(~u * (~a1 * ~a2 + ~b1 * ~b2 * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~n, ~p, ~q], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && (IntegerQ(~p) || GtQ(~a1, 0) && GtQ(~a2, 0))))
    @apply_utils Antiderivative(~(u') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(n') + ~(e') * (~x) ^ ~(n2')) ^ ~(q'), ~x) => Antiderivative(~u * (~a1 * ~a2 + ~b1 * ~b2 * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n + ~e * (~x) ^ (2 * ~n)) ^ ~q, ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~n2, 2 * ~n) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && (IntegerQ(~p) || GtQ(~a1, 0) && GtQ(~a2, 0)))))
    @apply_utils Antiderivative(~(u') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~p * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~p * (~c + ~(d') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (((~a1 + ~b1 * (~x) ^ (~n / 2)) ^ FracPart(~p) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ FracPart(~p)) / (~a1 * ~a2 + ~b1 * ~b2 * (~x) ^ ~n) ^ FracPart(~p)) * Antiderivative(~u * (~a1 * ~a2 + ~b1 * ~b2 * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~n, ~p, ~q], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~a2 * ~b1 + ~a1 * ~b2, 0) && Not(EqQ(~n, 2) && IGtQ(~q, 0))))
    @apply_utils Antiderivative(~(u') * (~a1 + ~(b1') * (~x) ^ ~(non2')) ^ ~(p') * (~a2 + ~(b2') * (~x) ^ ~(non2')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(n') + ~(e') * (~x) ^ ~(n2')) ^ ~(q'), ~x) => (((~a1 + ~b1 * (~x) ^ (~n / 2)) ^ FracPart(~p) * (~a2 + ~b2 * (~x) ^ (~n / 2)) ^ FracPart(~p)) / (~a1 * ~a2 + ~b1 * ~b2 * (~x) ^ ~n) ^ FracPart(~p)) * Antiderivative(~u * (~a1 * ~a2 + ~b1 * ~b2 * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n + ~e * (~x) ^ (2 * ~n)) ^ ~q, ~x) <-- FreeQ([~a1, ~b1, ~a2, ~b2, ~c, ~d, ~e, ~n, ~p, ~q], ~x) && (EqQ(~non2, ~n / 2) && (EqQ(~n2, 2 * ~n) && EqQ(~a2 * ~b1 + ~a1 * ~b2, 0)))
end
