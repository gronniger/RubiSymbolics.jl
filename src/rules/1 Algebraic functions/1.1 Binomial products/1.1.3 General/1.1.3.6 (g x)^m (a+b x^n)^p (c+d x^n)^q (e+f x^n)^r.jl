int_rules_1_1_3_6 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 1.1.3.6*(g*x)^m*(a+b*x^n)^p*(c+d*x^n)^q*(e+f*x^n)^r =#
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => ((~g) ^ ~m / (~n * (~b) ^ (Simplify((~m + 1) / ~n) - 1))) * Subst(Antiderivative((~b * ~x) ^ ((~p + Simplify((~m + 1) / ~n)) - 1) * (~c + ~d * ~x) ^ ~q * (~e + ~f * ~x) ^ ~r, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && ((IntegerQ(~m) || GtQ(~g, 0)) && IntegerQ(Simplify((~m + 1) / ~n)))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~(b') * (~x) ^ ~(n')) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (((~g) ^ ~m * (~b) ^ IntPart(~p) * (~b * (~x) ^ ~n) ^ FracPart(~p)) / (~x) ^ (~n * FracPart(~p))) * Antiderivative((~x) ^ (~m + ~n * ~p) * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && ((IntegerQ(~m) || GtQ(~g, 0)) && Not(IntegerQ(Simplify((~m + 1) / ~n))))
    @apply_utils Antiderivative((~g * ~x) ^ ~m * (~(b') * (~x) ^ ~(n')) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (((~g) ^ IntPart(~m) * (~g * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && Not(IntegerQ(~m))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => Antiderivative(ExpandIntegrand((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n], ~x) && (IGtQ(~p, -2) && (IGtQ(~q, 0) && IGtQ(~r, 0)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (1 / ~n) * Subst(Antiderivative((~a + ~b * ~x) ^ ~p * (~c + ~d * ~x) ^ ~q * (~e + ~f * ~x) ^ ~r, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x) && EqQ((~m - ~n) + 1, 0)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => Antiderivative((~x) ^ (~m + ~n * (~p + ~q + ~r)) * (~b + ~a * (~x) ^ -(~n)) ^ ~p * (~d + ~c * (~x) ^ -(~n)) ^ ~q * (~f + ~e * (~x) ^ -(~n)) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (IntegersQ(~p, ~q, ~r) && NegQ(~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * ~x) ^ ~p * (~c + ~d * ~x) ^ ~q * (~e + ~f * ~x) ^ ~r, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x) && IntegerQ(Simplify((~m + 1) / ~n))
    @apply_utils Antiderivative((~g * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (((~g) ^ IntPart(~m) * (~g * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && IntegerQ(Simplify((~m + 1) / ~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => With([k = GCD(~m + 1, ~n)], (1 / k) * Subst(Antiderivative((~x) ^ ((~m + 1) / k - 1) * (~a + ~b * (~x) ^ (~n / k)) ^ ~p * (~c + ~d * (~x) ^ (~n / k)) ^ ~q * (~e + ~f * (~x) ^ (~n / k)) ^ ~r, ~x), ~x, (~x) ^ k) <-- k != 1) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~p, ~q, ~r], ~x) && (IGtQ(~n, 0) && IntegerQ(~m))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q * (~e + ~(f') * (~x) ^ ~n) ^ ~r, ~x) => With([k = Denominator(~m)], (k / ~g) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + (~b * (~x) ^ (k * ~n)) / (~g) ^ ~n) ^ ~p * (~c + (~d * (~x) ^ (k * ~n)) / (~g) ^ ~n) ^ ~q * (~e + (~f * (~x) ^ (k * ~n)) / (~g) ^ ~n) ^ ~r, ~x), ~x, (~g * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p, ~q, ~r], ~x) && (IGtQ(~n, 0) && FractionQ(~m))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (-((~b * ~e - ~a * ~f)) * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a * ~b * ~g * ~n * (~p + 1)) + (1 / (~a * ~b * ~n * (~p + 1))) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * (~b * ~e * ~n * (~p + 1) + (~b * ~e - ~a * ~f) * (~m + 1)) + ~d * (~b * ~e * ~n * (~p + 1) + (~b * ~e - ~a * ~f) * (~m + ~n * ~q + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m], ~x) && (IGtQ(~n, 0) && (LtQ(~p, -1) && (GtQ(~q, 0) && Not(EqQ(~q, 1) && SimplerQ(~b * ~c - ~a * ~d, ~b * ~e - ~a * ~f)))))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q * (~e + ~(f') * (~x) ^ ~n), ~x) => ((~g) ^ (~n - 1) * (~b * ~e - ~a * ~f) * (~g * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~b * ~n * (~b * ~c - ~a * ~d) * (~p + 1)) - ((~g) ^ ~n / (~b * ~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~g * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~c * (~b * ~e - ~a * ~f) * ((~m - ~n) + 1) + (~d * (~b * ~e - ~a * ~f) * (~m + ~n * ~q + 1) - ~b * ~n * (~c * ~f - ~d * ~e) * (~p + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~q], ~x) && (IGtQ(~n, 0) && (LtQ(~p, -1) && GtQ((~m - ~n) + 1, 0)))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q * (~e + ~(f') * (~x) ^ ~n), ~x) => (-((~b * ~e - ~a * ~f)) * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~a * ~g * ~n * (~b * ~c - ~a * ~d) * (~p + 1)) + (1 / (~a * ~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~c * (~b * ~e - ~a * ~f) * (~m + 1) + ~e * ~n * (~b * ~c - ~a * ~d) * (~p + 1) + ~d * (~b * ~e - ~a * ~f) * (~m + ~n * (~p + ~q + 2) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~q], ~x) && (IGtQ(~n, 0) && LtQ(~p, -1))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (~e * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a * ~g * (~m + 1)) - (1 / (~a * (~g) ^ ~n * (~m + 1))) * Antiderivative((~g * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * (~b * ~e - ~a * ~f) * (~m + 1) + ~e * ~n * (~b * ~c * (~p + 1) + ~a * ~d * ~q) + ~d * ((~b * ~e - ~a * ~f) * (~m + 1) + ~b * ~e * ~n * (~p + ~q + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p], ~x) && (IGtQ(~n, 0) && (GtQ(~q, 0) && (LtQ(~m, -1) && Not(EqQ(~q, 1) && SimplerQ(~e + ~f * (~x) ^ ~n, ~c + ~d * (~x) ^ ~n)))))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (~f * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~b * ~g * (~m + ~n * (~p + ~q + 1) + 1)) + (1 / (~b * (~m + ~n * (~p + ~q + 1) + 1))) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * ((~b * ~e - ~a * ~f) * (~m + 1) + ~b * ~e * ~n * (~p + ~q + 1)) + (~d * (~b * ~e - ~a * ~f) * (~m + 1) + ~f * ~n * ~q * (~b * ~c - ~a * ~d) + ~b * ~e * ~d * ~n * (~p + ~q + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~p], ~x) && (IGtQ(~n, 0) && (GtQ(~q, 0) && Not(EqQ(~q, 1) && SimplerQ(~e + ~f * (~x) ^ ~n, ~c + ~d * (~x) ^ ~n))))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (~f * (~g) ^ (~n - 1) * (~g * ~x) ^ ((~m - ~n) + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~b * ~d * (~m + ~n * (~p + ~q + 1) + 1)) - ((~g) ^ ~n / (~b * ~d * (~m + ~n * (~p + ~q + 1) + 1))) * Antiderivative((~g * ~x) ^ (~m - ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~a * ~f * ~c * ((~m - ~n) + 1) + (~a * ~f * ~d * (~m + ~n * ~q + 1) + ~b * (~f * ~c * (~m + ~n * ~p + 1) - ~e * ~d * (~m + ~n * (~p + ~q + 1) + 1))) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p, ~q], ~x) && (IGtQ(~n, 0) && GtQ(~m, ~n - 1))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (~e * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~a * ~c * ~g * (~m + 1)) + (1 / (~a * ~c * (~g) ^ ~n * (~m + 1))) * Antiderivative((~g * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(((~a * ~f * ~c * (~m + 1) - ~e * (~b * ~c + ~a * ~d) * (~m + ~n + 1)) - ~e * ~n * (~b * ~c * ~p + ~a * ~d * ~q)) - ~b * ~e * ~d * (~m + ~n * (~p + ~q + 2) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p, ~q], ~x) && (IGtQ(~n, 0) && LtQ(~m, -1))
    @apply_utils Antiderivative(((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~e + ~(f') * (~x) ^ ~n)) / (~c + ~(d') * (~x) ^ ~n), ~x) => Antiderivative(ExpandIntegrand(((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~e + ~f * (~x) ^ ~n)) / (~c + ~d * (~x) ^ ~n), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~p], ~x) && IGtQ(~n, 0)
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => ~e * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) + (~f / (~e) ^ ~n) * Antiderivative((~g * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~p, ~q], ~x) && IGtQ(~n, 0)
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => ~e * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ (~r - 1), ~x) + (~f / (~e) ^ ~n) * Antiderivative((~g * ~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ (~r - 1), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~p, ~q], ~x) && (IGtQ(~n, 0) && IGtQ(~r, 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => -(Subst(Antiderivative(((~a + ~b * (~x) ^ -(~n)) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q * (~e + ~f * (~x) ^ -(~n)) ^ ~r) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~p, ~q, ~r], ~x) && (ILtQ(~n, 0) && IntegerQ(~m))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => With([k = Denominator(~m)], (-k / ~g) * Subst(Antiderivative(((~a + ~b * (~g) ^ -(~n) * (~x) ^ (-k * ~n)) ^ ~p * (~c + ~d * (~g) ^ -(~n) * (~x) ^ (-k * ~n)) ^ ~q * (~e + ~f * (~g) ^ -(~n) * (~x) ^ (-k * ~n)) ^ ~r) / (~x) ^ (k * (~m + 1) + 1), ~x), ~x, 1 / (~g * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~p, ~q, ~r], ~x) && (ILtQ(~n, 0) && FractionQ(~m))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => -((~g * ~x) ^ ~m) * ((~x) ^ -1) ^ ~m * Subst(Antiderivative(((~a + ~b * (~x) ^ -(~n)) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q * (~e + ~f * (~x) ^ -(~n)) ^ ~r) / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~p, ~q, ~r], ~x) && (ILtQ(~n, 0) && Not(RationalQ(~m)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => With([k = Denominator(~n)], k * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + ~b * (~x) ^ (k * ~n)) ^ ~p * (~c + ~d * (~x) ^ (k * ~n)) ^ ~q * (~e + ~f * (~x) ^ (k * ~n)) ^ ~r, ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~p, ~q, ~r], ~x) && FractionQ(~n)
    @apply_utils Antiderivative((~g * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (((~g) ^ IntPart(~m) * (~g * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~p, ~q, ~r], ~x) && FractionQ(~n)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~a + ~b * (~x) ^ Simplify(~n / (~m + 1))) ^ ~p * (~c + ~d * (~x) ^ Simplify(~n / (~m + 1))) ^ ~q * (~e + ~f * (~x) ^ Simplify(~n / (~m + 1))) ^ ~r, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x) && IntegerQ(Simplify(~n / (~m + 1)))
    @apply_utils Antiderivative((~g * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => (((~g) ^ IntPart(~m) * (~g * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && IntegerQ(Simplify(~n / (~m + 1)))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (-((~b * ~e - ~a * ~f)) * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~a * ~b * ~g * ~n * (~p + 1)) + (1 / (~a * ~b * ~n * (~p + 1))) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * (~b * ~e * ~n * (~p + 1) + (~b * ~e - ~a * ~f) * (~m + 1)) + ~d * (~b * ~e * ~n * (~p + 1) + (~b * ~e - ~a * ~f) * (~m + ~n * ~q + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n], ~x) && (LtQ(~p, -1) && (GtQ(~q, 0) && Not(EqQ(~q, 1) && SimplerQ(~b * ~c - ~a * ~d, ~b * ~e - ~a * ~f))))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q * (~e + ~(f') * (~x) ^ ~n), ~x) => (-((~b * ~e - ~a * ~f)) * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ (~q + 1)) / (~a * ~g * ~n * (~b * ~c - ~a * ~d) * (~p + 1)) + (1 / (~a * ~n * (~b * ~c - ~a * ~d) * (~p + 1))) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q * Simp(~c * (~b * ~e - ~a * ~f) * (~m + 1) + ~e * ~n * (~b * ~c - ~a * ~d) * (~p + 1) + ~d * (~b * ~e - ~a * ~f) * (~m + ~n * (~p + ~q + 2) + 1) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~q], ~x) && LtQ(~p, -1)
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n), ~x) => (~f * (~g * ~x) ^ (~m + 1) * (~a + ~b * (~x) ^ ~n) ^ (~p + 1) * (~c + ~d * (~x) ^ ~n) ^ ~q) / (~b * ~g * (~m + ~n * (~p + ~q + 1) + 1)) + (1 / (~b * (~m + ~n * (~p + ~q + 1) + 1))) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ (~q - 1) * Simp(~c * ((~b * ~e - ~a * ~f) * (~m + 1) + ~b * ~e * ~n * (~p + ~q + 1)) + (~d * (~b * ~e - ~a * ~f) * (~m + 1) + ~f * ~n * ~q * (~b * ~c - ~a * ~d) + ~b * ~e * ~d * ~n * (~p + ~q + 1)) * (~x) ^ ~n, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p], ~x) && (GtQ(~q, 0) && Not(EqQ(~q, 1) && SimplerQ(~e + ~f * (~x) ^ ~n, ~c + ~d * (~x) ^ ~n)))
    @apply_utils Antiderivative(((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~e + ~(f') * (~x) ^ ~n)) / (~c + ~(d') * (~x) ^ ~n), ~x) => Antiderivative(ExpandIntegrand(((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~e + ~f * (~x) ^ ~n)) / (~c + ~d * (~x) ^ ~n), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~p * (~c + ~(d') * (~x) ^ ~n) ^ ~q * (~e + ~(f') * (~x) ^ ~n), ~x) => ~e * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) + ((~f * (~g * ~x) ^ ~m) / (~x) ^ ~m) * Antiderivative((~x) ^ (~m + ~n) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~(q') * (~e + ~(f') * (~x) ^ ~(n')) ^ ~(r'), ~x) => Antiderivative((~x) ^ (~m - ~n * ~q) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~d + ~c * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~r], ~x) && (EqQ(~mn, -(~n)) && IntegerQ(~q))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~(q') * (~e + ~(f') * (~x) ^ ~(n')) ^ ~(r'), ~x) => Antiderivative((~x) ^ (~m + ~n * (~p + ~r)) * (~b + ~a * (~x) ^ -(~n)) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q * (~f + ~e * (~x) ^ -(~n)) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~q], ~x) && (EqQ(~mn, -(~n)) && (IntegerQ(~p) && IntegerQ(~r)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~q * (~e + ~(f') * (~x) ^ ~(n')) ^ ~(r'), ~x) => (((~x) ^ (~n * FracPart(~q)) * (~c + ~d * (~x) ^ -(~n)) ^ FracPart(~q)) / (~d + ~c * (~x) ^ ~n) ^ FracPart(~q)) * Antiderivative((~x) ^ (~m - ~n * ~q) * (~a + ~b * (~x) ^ ~n) ^ ~p * (~d + ~c * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x) && (EqQ(~mn, -(~n)) && Not(IntegerQ(~q)))
    @apply_utils Antiderivative((~g * ~x) ^ ~m * (~a + ~(b') * (~x) ^ ~(n')) ^ ~(p') * (~c + ~(d') * (~x) ^ ~(mn')) ^ ~(q') * (~e + ~(f') * (~x) ^ ~(n')) ^ ~(r'), ~x) => (((~g) ^ IntPart(~m) * (~g * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ -(~n)) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && EqQ(~mn, -(~n))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e + ~(f') * (~x) ^ ~n) ^ ~(r'), ~x) => Unintegrable((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~m, ~n, ~p, ~q, ~r], ~x)
    @apply_utils Antiderivative((~u) ^ ~(m') * (~(a') + ~(b') * (~v) ^ ~n) ^ ~(p') * (~(c') + ~(d') * (~v) ^ ~n) ^ ~(q') * (~e + ~(f') * (~v) ^ ~n) ^ ~(r'), ~x) => ((~u) ^ ~m / (Coefficient(~v, ~x, 1) * (~v) ^ ~m)) * Subst(Antiderivative((~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e + ~f * (~x) ^ ~n) ^ ~r, ~x), ~x, ~v) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n, ~p, ~q, ~r], ~x) && LinearPairQ(~u, ~v, ~x)
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e1 + ~(f1') * (~x) ^ ~(n2')) ^ ~(r') * (~e2 + ~(f2') * (~x) ^ ~(n2')) ^ ~(r'), ~x) => Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e1 * ~e2 + ~f1 * ~f2 * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e1, ~f1, ~e2, ~f2, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && (EqQ(~n2, ~n / 2) && (EqQ(~e2 * ~f1 + ~e1 * ~f2, 0) && (IntegerQ(~r) || GtQ(~e1, 0) && GtQ(~e2, 0))))
    @apply_utils Antiderivative((~(g') * ~x) ^ ~(m') * (~a + ~(b') * (~x) ^ ~n) ^ ~(p') * (~c + ~(d') * (~x) ^ ~n) ^ ~(q') * (~e1 + ~(f1') * (~x) ^ ~(n2')) ^ ~(r') * (~e2 + ~(f2') * (~x) ^ ~(n2')) ^ ~(r'), ~x) => (((~e1 + ~f1 * (~x) ^ (~n / 2)) ^ FracPart(~r) * (~e2 + ~f2 * (~x) ^ (~n / 2)) ^ FracPart(~r)) / (~e1 * ~e2 + ~f1 * ~f2 * (~x) ^ ~n) ^ FracPart(~r)) * Antiderivative((~g * ~x) ^ ~m * (~a + ~b * (~x) ^ ~n) ^ ~p * (~c + ~d * (~x) ^ ~n) ^ ~q * (~e1 * ~e2 + ~f1 * ~f2 * (~x) ^ ~n) ^ ~r, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e1, ~f1, ~e2, ~f2, ~g, ~m, ~n, ~p, ~q, ~r], ~x) && (EqQ(~n2, ~n / 2) && EqQ(~e2 * ~f1 + ~e1 * ~f2, 0))
end
