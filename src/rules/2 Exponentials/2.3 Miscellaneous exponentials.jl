int_rules_2_3 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 2.3*Miscellaneous*exponentials =#
    @apply_utils Antiderivative(((~F) ^ (~(c') * (~(a') + ~(b') * ~x))) ^ ~(n'), ~x) => ((~F) ^ (~c * (~a + ~b * ~x))) ^ ~n / (~b * ~c * ~n * log(~F)) <-- FreeQ([~F, ~a, ~b, ~c, ~n], ~x)
    @apply_utils Antiderivative(~u * (~F) ^ (~(c') * ~v), ~x) => Antiderivative(ExpandIntegrand(~u * (~F) ^ (~c * ExpandToSum(~v, ~x)), ~x), ~x) <-- FreeQ([~F, ~c], ~x) && (PolynomialQ(~u, ~x) && (LinearQ(~v, ~x) && TrueQ($UseGamma)))
    @apply_utils Antiderivative(~u * (~F) ^ (~(c') * ~v), ~x) => Antiderivative(ExpandIntegrand((~F) ^ (~c * ExpandToSum(~v, ~x)), ~u, ~x), ~x) <-- FreeQ([~F, ~c], ~x) && (PolynomialQ(~u, ~x) && (LinearQ(~v, ~x) && Not(TrueQ($UseGamma))))
    @apply_utils Antiderivative((~u) ^ ~(m') * (~F) ^ (~(c') * ~v) * ~w, ~x) => With([b = Coefficient(~v, ~x, 1), d = Coefficient(~u, ~x, 0), e = Coefficient(~u, ~x, 1), f = Coefficient(~w, ~x, 0), g = Coefficient(~w, ~x, 1)], (g * (~u) ^ (~m + 1) * (~F) ^ (~c * ~v)) / (b * ~c * e * log(~F)) <-- EqQ(e * g * (~m + 1) - b * ~c * (e * f - d * g) * log(~F), 0)) <-- FreeQ([~F, ~c, ~m], ~x) && LinearQ([~u, ~v, ~w], ~x)
    @apply_utils Antiderivative(~w * (~u) ^ ~(m') * (~F) ^ (~(c') * ~v), ~x) => Antiderivative(ExpandIntegrand(~w * NormalizePowerOfLinear(~u, ~x) ^ ~m * (~F) ^ (~c * ExpandToSum(~v, ~x)), ~x), ~x) <-- FreeQ([~F, ~c], ~x) && (PolynomialQ(~w, ~x) && (LinearQ(~v, ~x) && (PowerOfLinearQ(~u, ~x) && (IntegerQ(~m) && TrueQ($UseGamma)))))
    @apply_utils Antiderivative(~w * (~u) ^ ~(m') * (~F) ^ (~(c') * ~v), ~x) => Antiderivative(ExpandIntegrand((~F) ^ (~c * ExpandToSum(~v, ~x)), ~w * NormalizePowerOfLinear(~u, ~x) ^ ~m, ~x), ~x) <-- FreeQ([~F, ~c], ~x) && (PolynomialQ(~w, ~x) && (LinearQ(~v, ~x) && (PowerOfLinearQ(~u, ~x) && (IntegerQ(~m) && Not(TrueQ($UseGamma))))))
    @apply_utils Antiderivative(~w * (~u) ^ ~(m') * (~F) ^ (~(c') * ~v), ~x) => Module([uu = NormalizePowerOfLinear(~u, ~x), z], z = If(PowerQ(uu) && FreeQ(uu(2), ~x), uu(1) ^ (~m * uu(2)), uu ^ ~m); (uu ^ ~m / z) * Antiderivative(ExpandIntegrand(~w * z * (~F) ^ (~c * ExpandToSum(~v, ~x)), ~x), ~x)) <-- FreeQ([~F, ~c, ~m], ~x) && (PolynomialQ(~w, ~x) && (LinearQ(~v, ~x) && (PowerOfLinearQ(~u, ~x) && Not(IntegerQ(~m)))))
    @apply_utils Antiderivative((~F) ^ (~(c') * (~(a') + ~(b') * ~x)) * log(~(d') * ~x) ^ ~(n') * (~e + ~(h') * (~(f') + ~(g') * ~x) * log(~(d') * ~x)), ~x) => (~e * ~x * (~F) ^ (~c * (~a + ~b * ~x)) * log(~d * ~x) ^ (~n + 1)) / (~n + 1) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~n], ~x) && (EqQ(~e - ~f * ~h * (~n + 1), 0) && (EqQ(~g * ~h * (~n + 1) - ~b * ~c * ~e * log(~F), 0) && NeQ(~n, -1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~F) ^ (~(c') * (~(a') + ~(b') * ~x)) * log(~(d') * ~x) ^ ~(n') * (~e + ~(h') * (~(f') + ~(g') * ~x) * log(~(d') * ~x)), ~x) => (~e * (~x) ^ (~m + 1) * (~F) ^ (~c * (~a + ~b * ~x)) * log(~d * ~x) ^ (~n + 1)) / (~n + 1) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n], ~x) && (EqQ(~e * (~m + 1) - ~f * ~h * (~n + 1), 0) && (EqQ(~g * ~h * (~n + 1) - ~b * ~c * ~e * log(~F), 0) && NeQ(~n, -1)))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x)), ~x) => (~F) ^ (~a + ~b * (~c + ~d * ~x)) / (~b * ~d * log(~F)) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x)
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ 2), ~x) => ((~F) ^ ~a * sqrt(pi) * erfi((~c + ~d * ~x) * Rt(~b * log(~F), 2))) / (2 * ~d * Rt(~b * log(~F), 2)) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && PosQ(~b)
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ 2), ~x) => ((~F) ^ ~a * sqrt(pi) * erf((~c + ~d * ~x) * Rt(-(~b) * log(~F), 2))) / (2 * ~d * Rt(-(~b) * log(~F), 2)) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && NegQ(~b)
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~c + ~d * ~x) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / ~d - ~b * ~n * log(~F) * Antiderivative((~c + ~d * ~x) ^ ~n * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && (IntegerQ(2 / ~n) && ILtQ(~n, 0))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => With([k = Denominator(~n)], (k / ~d) * Subst(Antiderivative((~x) ^ (k - 1) * (~F) ^ (~a + ~b * (~x) ^ (k * ~n)), ~x), ~x, (~c + ~d * ~x) ^ (1 / k))) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && (IntegerQ(2 / ~n) && Not(IntegerQ(~n)))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => (-((~F) ^ ~a) * (~c + ~d * ~x) * Gamma(1 / ~n, -(~b) * (~c + ~d * ~x) ^ ~n * log(~F))) / (~d * ~n * (-(~b) * (~c + ~d * ~x) ^ ~n * log(~F)) ^ (1 / ~n)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~n], ~x) && Not(IntegerQ(2 / ~n))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~e + ~f * ~x) ^ ~n * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / (~b * ~f * ~n * (~c + ~d * ~x) ^ ~n * log(~F)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && (EqQ(~m, ~n - 1) && EqQ(~d * ~e - ~c * ~f, 0))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n) / (~(e') + ~(f') * ~x), ~x) => ((~F) ^ ~a * ExpIntegralEi(~b * (~c + ~d * ~x) ^ ~n * log(~F))) / (~f * ~n) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && EqQ(~d * ~e - ~c * ~f, 0)
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => (1 / (~d * (~m + 1))) * Subst(Antiderivative((~F) ^ (~a + ~b * (~x) ^ 2), ~x), ~x, (~c + ~d * ~x) ^ (~m + 1)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~m, ~n], ~x) && EqQ(~n, 2 * (~m + 1))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~c + ~d * ~x) ^ ((~m - ~n) + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / (~b * ~d * ~n * log(~F)) - (((~m - ~n) + 1) / (~b * ~n * log(~F))) * Antiderivative((~c + ~d * ~x) ^ (~m - ~n) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && (IntegerQ((2 * (~m + 1)) / ~n) && (LtQ(0, (~m + 1) / ~n, 5) && (IntegerQ(~n) && (LtQ(0, ~n, ~m + 1) || LtQ(~m, ~n, 0)))))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~c + ~d * ~x) ^ ((~m - ~n) + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / (~b * ~d * ~n * log(~F)) - (((~m - ~n) + 1) / (~b * ~n * log(~F))) * Antiderivative((~c + ~d * ~x) ^ Simplify(~m - ~n) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~m, ~n], ~x) && (IntegerQ(2 * Simplify((~m + 1) / ~n)) && (LtQ(0, Simplify((~m + 1) / ~n), 5) && (Not(RationalQ(~m)) && SumSimplerQ(~m, -(~n)))))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~c + ~d * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / (~d * (~m + 1)) - ((~b * ~n * log(~F)) / (~m + 1)) * Antiderivative((~c + ~d * ~x) ^ (~m + ~n) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && (IntegerQ((2 * (~m + 1)) / ~n) && (LtQ(-4, (~m + 1) / ~n, 5) && (IntegerQ(~n) && (GtQ(~n, 0) && LtQ(~m, -1) || GtQ(-(~n), 0) && LeQ(-(~n), ~m + 1)))))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~c + ~d * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / (~d * (~m + 1)) - ((~b * ~n * log(~F)) / (~m + 1)) * Antiderivative((~c + ~d * ~x) ^ Simplify(~m + ~n) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~m, ~n], ~x) && (IntegerQ(2 * Simplify((~m + 1) / ~n)) && (LtQ(-4, Simplify((~m + 1) / ~n), 5) && (Not(RationalQ(~m)) && SumSimplerQ(~m, ~n))))
    @apply_utils Antiderivative((~(c') + ~(d') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => With([k = Denominator(~n)], (k / ~d) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~F) ^ (~a + ~b * (~x) ^ (k * ~n)), ~x), ~x, (~c + ~d * ~x) ^ (1 / k))) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~m, ~n], ~x) && (IntegerQ((2 * (~m + 1)) / ~n) && (LtQ(0, (~m + 1) / ~n, 5) && Not(IntegerQ(~n))))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~e + ~f * ~x) ^ ~m / (~c + ~d * ~x) ^ ~m) * Antiderivative((~c + ~d * ~x) ^ ~m * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (EqQ(~d * ~e - ~c * ~f, 0) && (IntegerQ(2 * Simplify((~m + 1) / ~n)) && (Not(IntegerQ(~m)) && (NeQ(~f, ~d) && NeQ(~c * ~e, 0)))))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => With([p = Simplify((~m + 1) / ~n)], ((-((~F) ^ ~a) * (~f / ~d) ^ ~m) / (~d * ~n * (-(~b) * log(~F)) ^ p)) * Simplify(FunctionExpand(Gamma(p, -(~b) * (~c + ~d * ~x) ^ ~n * log(~F)))) <-- IGtQ(p, 0)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && (EqQ(~d * ~e - ~c * ~f, 0) && Not(TrueQ($UseGamma)))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((-((~F) ^ ~a) * (~e + ~f * ~x) ^ (~m + 1)) / (~f * ~n * (-(~b) * (~c + ~d * ~x) ^ ~n * log(~F)) ^ ((~m + 1) / ~n))) * Gamma((~m + 1) / ~n, -(~b) * (~c + ~d * ~x) ^ ~n * log(~F)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~m, ~n], ~x) && EqQ(~d * ~e - ~c * ~f, 0)
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ 2), ~x) => ((~f * (~e + ~f * ~x) ^ (~m - 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ 2)) / (2 * ~b * (~d) ^ 2 * log(~F)) + ((~d * ~e - ~c * ~f) / ~d) * Antiderivative((~e + ~f * ~x) ^ (~m - 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ 2), ~x)) - (((~m - 1) * (~f) ^ 2) / (2 * ~b * (~d) ^ 2 * log(~F))) * Antiderivative((~e + ~f * ~x) ^ (~m - 2) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f], ~x) && (NeQ(~d * ~e - ~c * ~f, 0) && (FractionQ(~m) && GtQ(~m, 1)))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ 2), ~x) => ((~f * (~e + ~f * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ 2)) / ((~m + 1) * (~f) ^ 2) + ((2 * ~b * ~d * (~d * ~e - ~c * ~f) * log(~F)) / ((~f) ^ 2 * (~m + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ 2), ~x)) - ((2 * ~b * (~d) ^ 2 * log(~F)) / ((~f) ^ 2 * (~m + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m + 2) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f], ~x) && (NeQ(~d * ~e - ~c * ~f, 0) && LtQ(~m, -1))
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => ((~e + ~f * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n)) / (~f * (~m + 1)) - ((~b * ~d * ~n * log(~F)) / (~f * (~m + 1))) * Antiderivative((~e + ~f * ~x) ^ (~m + 1) * (~c + ~d * ~x) ^ (~n - 1) * (~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f], ~x) && (NeQ(~d * ~e - ~c * ~f, 0) && (IGtQ(~n, 2) && LtQ(~m, -1)))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') / (~(c') + ~(d') * ~x)) / (~(e') + ~(f') * ~x), ~x) => (~d / ~f) * Antiderivative((~F) ^ (~a + ~b / (~c + ~d * ~x)) / (~c + ~d * ~x), ~x) - ((~d * ~e - ~c * ~f) / ~f) * Antiderivative((~F) ^ (~a + ~b / (~c + ~d * ~x)) / ((~c + ~d * ~x) * (~e + ~f * ~x)), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f], ~x) && NeQ(~d * ~e - ~c * ~f, 0)
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') / (~(c') + ~(d') * ~x)), ~x) => ((~e + ~f * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b / (~c + ~d * ~x))) / (~f * (~m + 1)) + ((~b * ~d * log(~F)) / (~f * (~m + 1))) * Antiderivative(((~e + ~f * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b / (~c + ~d * ~x))) / (~c + ~d * ~x) ^ 2, ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f], ~x) && (NeQ(~d * ~e - ~c * ~f, 0) && ILtQ(~m, -1))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n) / (~(e') + ~(f') * ~x), ~x) => Unintegrable((~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n) / (~e + ~f * ~x), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && NeQ(~d * ~e - ~c * ~f, 0)
    @apply_utils Antiderivative((~u) ^ ~(m') * (~F) ^ ~v, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * (~F) ^ ExpandToSum(~v, ~x), ~x) <-- FreeQ([~F, ~m], ~x) && (LinearQ(~u, ~x) && (BinomialQ(~v, ~x) && Not(LinearMatchQ(~u, ~x) && BinomialMatchQ(~v, ~x))))
    @apply_utils Antiderivative(~u * (~F) ^ (~(a') + ~(b') * (~(c') + ~(d') * ~x) ^ ~n), ~x) => Antiderivative(ExpandLinearProduct((~F) ^ (~a + ~b * (~c + ~d * ~x) ^ ~n), ~u, ~c, ~d, ~x), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~n], ~x) && PolynomialQ(~u, ~x)
    @apply_utils Antiderivative(~(u') * (~F) ^ (~(a') + ~(b') * ~v), ~x) => Antiderivative(~u * (~F) ^ (~a + ~b * NormalizePowerOfLinear(~v, ~x)), ~x) <-- FreeQ([~F, ~a, ~b], ~x) && (PolynomialQ(~u, ~x) && (PowerOfLinearQ(~v, ~x) && Not(PowerOfLinearMatchQ(~v, ~x))))
    #= Antiderivative((~u')*(~F)^((~a')+(~b')*(~v)^(~n)),~x) :=  Antiderivative(u*F^(a+b*ExpandToSum(v,x)^n),x) <-- FreeQ([F,a,b,n],x) &&  PolynomialQ(u,x) && LinearQ(v,x) && Not(LinearMatchQ(v,x)) =#
    #= Antiderivative((~u')*(~F)^(~u),~x) := Antiderivative(u*F^ExpandToSum(u,x),x) <--  FreeQ(F,x) && PolynomialQ(u,x) && BinomialQ(u,x) &&  Not(BinomialMatchQ(u,x)) =#
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') / (~(c') + ~(d') * ~x)) / ((~(e') + ~(f') * ~x) * (~(g') + ~(h') * ~x)), ~x) => (-(~d) / (~f * (~d * ~g - ~c * ~h))) * Subst(Antiderivative((~F) ^ ((~a - (~b * ~h) / (~d * ~g - ~c * ~h)) + (~d * ~b * ~x) / (~d * ~g - ~c * ~h)) / ~x, ~x), ~x, (~g + ~h * ~x) / (~c + ~d * ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f], ~x) && EqQ(~d * ~e - ~c * ~f, 0)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(e') + (~(f') * (~(a') + ~(b') * ~x)) / (~(c') + ~(d') * ~x)), ~x) => (~F) ^ (~e + (~f * ~b) / ~d) * Antiderivative((~g + ~h * ~x) ^ ~m, ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m], ~x) && EqQ(~b * ~c - ~a * ~d, 0)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(e') + (~(f') * (~(a') + ~(b') * ~x)) / (~(c') + ~(d') * ~x)), ~x) => Antiderivative((~g + ~h * ~x) ^ ~m * (~F) ^ ((~d * ~e + ~b * ~f) / ~d - (~f * (~b * ~c - ~a * ~d)) / (~d * (~c + ~d * ~x))), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && EqQ(~d * ~g - ~c * ~h, 0))
    @apply_utils Antiderivative((~F) ^ (~(e') + (~(f') * (~(a') + ~(b') * ~x)) / (~(c') + ~(d') * ~x)) / (~(g') + ~(h') * ~x), ~x) => (~d / ~h) * Antiderivative((~F) ^ (~e + (~f * (~a + ~b * ~x)) / (~c + ~d * ~x)) / (~c + ~d * ~x), ~x) - ((~d * ~g - ~c * ~h) / ~h) * Antiderivative((~F) ^ (~e + (~f * (~a + ~b * ~x)) / (~c + ~d * ~x)) / ((~c + ~d * ~x) * (~g + ~h * ~x)), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && NeQ(~d * ~g - ~c * ~h, 0))
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~m * (~F) ^ (~(e') + (~(f') * (~(a') + ~(b') * ~x)) / (~(c') + ~(d') * ~x)), ~x) => ((~g + ~h * ~x) ^ (~m + 1) * (~F) ^ (~e + (~f * (~a + ~b * ~x)) / (~c + ~d * ~x))) / (~h * (~m + 1)) - ((~f * (~b * ~c - ~a * ~d) * log(~F)) / (~h * (~m + 1))) * Antiderivative(((~g + ~h * ~x) ^ (~m + 1) * (~F) ^ (~e + (~f * (~a + ~b * ~x)) / (~c + ~d * ~x))) / (~c + ~d * ~x) ^ 2, ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h], ~x) && (NeQ(~b * ~c - ~a * ~d, 0) && (NeQ(~d * ~g - ~c * ~h, 0) && ILtQ(~m, -1)))
    @apply_utils Antiderivative((~F) ^ (~(e') + (~(f') * (~(a') + ~(b') * ~x)) / (~(c') + ~(d') * ~x)) / ((~(g') + ~(h') * ~x) * (~(i') + ~(j') * ~x)), ~x) => (-(~d) / (~h * (~d * ~i - ~c * ~j))) * Subst(Antiderivative((~F) ^ ((~e + (~f * (~b * ~i - ~a * ~j)) / (~d * ~i - ~c * ~j)) - ((~b * ~c - ~a * ~d) * ~f * ~x) / (~d * ~i - ~c * ~j)) / ~x, ~x), ~x, (~i + ~j * ~x) / (~c + ~d * ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h], ~x) && EqQ(~d * ~g - ~c * ~h, 0)
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => (~F) ^ (~a - (~b) ^ 2 / (4 * ~c)) * Antiderivative((~F) ^ ((~b + 2 * ~c * ~x) ^ 2 / (4 * ~c)), ~x) <-- FreeQ([~F, ~a, ~b, ~c], ~x)
    @apply_utils Antiderivative((~F) ^ ~v, ~x) => Antiderivative((~F) ^ ExpandToSum(~v, ~x), ~x) <-- FreeQ(~F, ~x) && (QuadraticQ(~v, ~x) && Not(QuadraticMatchQ(~v, ~x)))
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => (~e * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2)) / (2 * ~c * log(~F)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && EqQ(~b * ~e - 2 * ~c * ~d, 0)
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => (~e * (~d + ~e * ~x) ^ (~m - 1) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2)) / (2 * ~c * log(~F)) - (((~m - 1) * (~e) ^ 2) / (2 * ~c * log(~F))) * Antiderivative((~d + ~e * ~x) ^ (~m - 2) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~b * ~e - 2 * ~c * ~d, 0) && GtQ(~m, 1))
    @apply_utils Antiderivative((~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2) / (~(d') + ~(e') * ~x), ~x) => (1 / (2 * ~e)) * (~F) ^ (~a - (~b) ^ 2 / (4 * ~c)) * ExpIntegralEi(((~b + 2 * ~c * ~x) ^ 2 * log(~F)) / (4 * ~c)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && EqQ(~b * ~e - 2 * ~c * ~d, 0)
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => ((~d + ~e * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2)) / (~e * (~m + 1)) - ((2 * ~c * log(~F)) / ((~e) ^ 2 * (~m + 1))) * Antiderivative((~d + ~e * ~x) ^ (~m + 2) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~b * ~e - 2 * ~c * ~d, 0) && LtQ(~m, -1))
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => (~e * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2)) / (2 * ~c * log(~F)) - ((~b * ~e - 2 * ~c * ~d) / (2 * ~c)) * Antiderivative((~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && NeQ(~b * ~e - 2 * ~c * ~d, 0)
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => ((~e * (~d + ~e * ~x) ^ (~m - 1) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2)) / (2 * ~c * log(~F)) - ((~b * ~e - 2 * ~c * ~d) / (2 * ~c)) * Antiderivative((~d + ~e * ~x) ^ (~m - 1) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x)) - (((~m - 1) * (~e) ^ 2) / (2 * ~c * log(~F))) * Antiderivative((~d + ~e * ~x) ^ (~m - 2) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && (NeQ(~b * ~e - 2 * ~c * ~d, 0) && GtQ(~m, 1))
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~m * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => (((~d + ~e * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2)) / (~e * (~m + 1)) - (((~b * ~e - 2 * ~c * ~d) * log(~F)) / ((~e) ^ 2 * (~m + 1))) * Antiderivative((~d + ~e * ~x) ^ (~m + 1) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x)) - ((2 * ~c * log(~F)) / ((~e) ^ 2 * (~m + 1))) * Antiderivative((~d + ~e * ~x) ^ (~m + 2) * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && (NeQ(~b * ~e - 2 * ~c * ~d, 0) && LtQ(~m, -1))
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~(m') * (~F) ^ (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => Unintegrable((~d + ~e * ~x) ^ ~m * (~F) ^ (~a + ~b * ~x + ~c * (~x) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~m], ~x)
    @apply_utils Antiderivative((~u) ^ ~(m') * (~F) ^ ~v, ~x) => Antiderivative(ExpandToSum(~u, ~x) ^ ~m * (~F) ^ ExpandToSum(~v, ~x), ~x) <-- FreeQ([~F, ~m], ~x) && (LinearQ(~u, ~x) && (QuadraticQ(~v, ~x) && Not(LinearMatchQ(~u, ~x) && QuadraticMatchQ(~v, ~x))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x)) * (~(a') + ~(b') * (~F) ^ ~v) ^ ~p, ~x) => With([u = IntHide((~F) ^ (~e * (~c + ~d * ~x)) * (~a + ~b * (~F) ^ ~v) ^ ~p, ~x)], Dist((~x) ^ ~m, u, ~x) - ~m * Antiderivative((~x) ^ (~m - 1) * u, ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e], ~x) && (EqQ(~v, 2 * ~e * (~c + ~d * ~x)) && (GtQ(~m, 0) && ILtQ(~p, 0)))
    @apply_utils Antiderivative(((~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(n') * (~a + ~(b') * ((~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(n')) ^ ~(p'), ~x) => (1 / (~d * ~e * ~n * log(~F))) * Subst(Antiderivative((~a + ~b * ~x) ^ ~p, ~x), ~x, ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x)
    @apply_utils Antiderivative(((~G) ^ (~(h') * (~(f') + ~(g') * ~x))) ^ ~(m') * (~a + ~(b') * ((~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(n')) ^ ~(p'), ~x) => (((~G) ^ (~h * (~f + ~g * ~x))) ^ ~m / ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n) * Antiderivative(((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n * (~a + ~b * ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n) ^ ~p, ~x) <-- FreeQ([~F, ~G, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n, ~p], ~x) && EqQ(~d * ~e * ~n * log(~F), ~g * ~h * ~m * log(~G))
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => With([m = FullSimplify((~g * ~h * log(~G)) / (~d * ~e * log(~F)))], ((Denominator(m) * (~G) ^ (~f * ~h - (~c * ~g * ~h) / ~d)) / (~d * ~e * log(~F))) * Subst(Antiderivative((~x) ^ (Numerator(m) - 1) * (~a + ~b * (~x) ^ Denominator(m)) ^ ~p, ~x), ~x, (~F) ^ ((~e * (~c + ~d * ~x)) / Denominator(m))) <-- LeQ(m, -1) || GeQ(m, 1)) <-- FreeQ([~F, ~G, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~p], ~x)
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => With([m = FullSimplify((~d * ~e * log(~F)) / (~g * ~h * log(~G)))], (Denominator(m) / (~g * ~h * log(~G))) * Subst(Antiderivative((~x) ^ (Denominator(m) - 1) * (~a + ~b * (~F) ^ (~c * ~e - (~d * ~e * ~f) / ~g) * (~x) ^ Numerator(m)) ^ ~p, ~x), ~x, (~G) ^ ((~h * (~f + ~g * ~x)) / Denominator(m))) <-- LtQ(m, -1) || GtQ(m, 1)) <-- FreeQ([~F, ~G, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~p], ~x)
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => Antiderivative(expand((~G) ^ (~h * (~f + ~g * ~x)) * (~a + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p, ~x), ~x) <-- FreeQ([~F, ~G, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h], ~x) && IGtQ(~p, 0)
    # Missing due to parse error: Antiderivative((~G)^((~h')*((~f') + (~g')*(~x)))*((~a) + (~b')*(~F)^((~e')*((~c') + (~d')*(~x))))^(~p), ~x) := a^p*G^(h*(f + g*x))/(g*h*log(G))* HypergeometricFunctions._₂F₁(-p, g*h*log(G)/(d*e*log(F)), g*h*log(G)/(d*e*log(F)) + 1, Simplify(-b/a*F^(e*(c + d*x)))) <-- FreeQ([F, G, a, b, c, d, e, f, g, h, p], x) && (ILtQ(p, 0) || GtQ(a, 0))
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~p, ~x) => ((~a + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p / (1 + (~b / ~a) * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p) * Antiderivative((~G) ^ (~h * (~f + ~g * ~x)) * (1 + (~b / ~a) * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p, ~x) <-- FreeQ([~F, ~G, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~p], ~x) && Not(ILtQ(~p, 0) || GtQ(~a, 0))
    @apply_utils Antiderivative((~G) ^ (~(h') * ~u) * (~a + ~(b') * (~F) ^ (~(e') * ~v)) ^ ~p, ~x) => Antiderivative((~G) ^ (~h * ExpandToSum(~u, ~x)) * (~a + ~b * (~F) ^ (~e * ExpandToSum(~v, ~x))) ^ ~p, ~x) <-- FreeQ([~F, ~G, ~a, ~b, ~e, ~h, ~p], ~x) && (LinearQ([~u, ~v], ~x) && Not(LinearMatchQ([~u, ~v], ~x)))
    #= Antiderivative(((~c')+(~d')*(~x))^(~m')*(~F)^((~g')*((~e')+(~f')*(~x)))/((~a)+(~b')*(~F)^((~h')*((~e')+(~f') *(~x)))),~x) := 1/b*Antiderivative((c+d*x)^m*F^((g-h)*(e+f*x)),x) - a/b*Antiderivative((c+d*x)^m*F^((g-h)*(e+f*x))/(a+b*F^(h*(e+f*x))),x) <--  FreeQ([F,a,b,c,d,e,f,g,h,m],x) && LeQ(0,g/h-1,g/h) =#
    #= Antiderivative(((~c')+(~d')*(~x))^(~m')*(~F)^((~g')*((~e')+(~f')*(~x)))/((~a)+(~b')*(~F)^((~h')*((~e')+(~f') *(~x)))),~x) := 1/a*Antiderivative((c+d*x)^m*F^(g*(e+f*x)),x) - b/a*Antiderivative((c+d*x)^m*F^((g+h)*(e+f*x))/(a+b*F^(h*(e+f*x))),x) <--  FreeQ([F,a,b,c,d,e,f,g,h,m],x) && LeQ(g/h,g/h+1,0) =#
    @apply_utils Antiderivative((~(e') + ~(f') * ~x) ^ ~(m') * (~(a') + ~(b') * (~F) ^ ~u) ^ ~(p') * (~(c') + ~(d') * (~F) ^ ~v) ^ ~(q'), ~x) => With([w = ExpandIntegrand((~e + ~f * ~x) ^ ~m, (~a + ~b * (~F) ^ ~u) ^ ~p * (~c + ~d * (~F) ^ ~v) ^ ~q, ~x)], Antiderivative(w, ~x) <-- SumQ(w)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~m], ~x) && (IntegersQ(~p, ~q) && (LinearQ([~u, ~v], ~x) && RationalQ(Simplify(~u / ~v))))
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~H) ^ (~(t') * (~(r') + ~(s') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => With([m = FullSimplify((~g * ~h * log(~G) + ~s * ~t * log(~H)) / (~d * ~e * log(~F)))], ((Denominator(m) * (~G) ^ (~f * ~h - (~c * ~g * ~h) / ~d) * (~H) ^ (~r * ~t - (~c * ~s * ~t) / ~d)) / (~d * ~e * log(~F))) * Subst(Antiderivative((~x) ^ (Numerator(m) - 1) * (~a + ~b * (~x) ^ Denominator(m)) ^ ~p, ~x), ~x, (~F) ^ ((~e * (~c + ~d * ~x)) / Denominator(m))) <-- RationalQ(m)) <-- FreeQ([~F, ~G, ~H, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~r, ~s, ~t, ~p], ~x)
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~H) ^ (~(t') * (~(r') + ~(s') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => (~G) ^ ((~f - (~c * ~g) / ~d) * ~h) * Antiderivative((~H) ^ (~t * (~r + ~s * ~x)) * (~b + ~a * (~F) ^ (-(~e) * (~c + ~d * ~x))) ^ ~p, ~x) <-- FreeQ([~F, ~G, ~H, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~r, ~s, ~t], ~x) && (EqQ(~d * ~e * ~p * log(~F) + ~g * ~h * log(~G), 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~G) ^ (~(h') * (~(f') + ~(g') * ~x)) * (~H) ^ (~(t') * (~(r') + ~(s') * ~x)) * (~a + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => Antiderivative(expand((~G) ^ (~h * (~f + ~g * ~x)) * (~H) ^ (~t * (~r + ~s * ~x)) * (~a + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p, ~x), ~x) <-- FreeQ([~F, ~G, ~H, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~r, ~s, ~t], ~x) && IGtQ(~p, 0)
    # Missing due to parse error: Antiderivative((~G)^((~h')*((~f') + (~g')*(~x)))* (~H)^((~t')*((~r') + (~s')*(~x)))*((~a) + (~b')*(~F)^((~e')*((~c') + (~d')*(~x))))^(~p), ~x) := a^p*G^(h*(f + g*x))*H^(t*(r + s*x))/(g*h*log(G) + s*t*log(H))* HypergeometricFunctions._₂F₁(-p, (g*h*log(G) + s*t*log(H))/(d*e* log(F)), (g*h*log(G) + s*t*log(H))/(d*e*log(F)) + 1, Simplify(-b/a*F^(e*(c + d*x)))) <-- FreeQ([F, G, H, a, b, c, d, e, f, g, h, r, s, t], x) && ILtQ(p, 0)
    # Missing due to parse error: Antiderivative((~G)^((~h')*((~f') + (~g')*(~x)))* (~H)^((~t')*((~r') + (~s')*(~x)))*((~a) + (~b')*(~F)^((~e')*((~c') + (~d')*(~x))))^(~p), ~x) := G^(h*(f + g*x))* H^(t*(r + s*x))*(a + b*F^(e*(c + d*x)))^ p/((g*h*log(G) + s*t*log(H))*((a + b*F^(e*(c + d*x)))/a)^p)* HypergeometricFunctions._₂F₁(-p, (g*h*log(G) + s*t*log(H))/(d*e* log(F)), (g*h*log(G) + s*t*log(H))/(d*e*log(F)) + 1, Simplify(-b/a*F^(e*(c + d*x)))) <-- FreeQ([F, G, H, a, b, c, d, e, f, g, h, r, s, t, p], x) && Not(IntegerQ(p))
    @apply_utils Antiderivative((~G) ^ (~(h') * ~u) * (~H) ^ (~(t') * ~w) * (~a + ~(b') * (~F) ^ (~(e') * ~v)) ^ ~p, ~x) => Antiderivative((~G) ^ (~h * ExpandToSum(~u, ~x)) * (~H) ^ (~t * ExpandToSum(~w, ~x)) * (~a + ~b * (~F) ^ (~e * ExpandToSum(~v, ~x))) ^ ~p, ~x) <-- FreeQ([~F, ~G, ~H, ~a, ~b, ~e, ~h, ~t, ~p], ~x) && (LinearQ([~u, ~v, ~w], ~x) && Not(LinearMatchQ([~u, ~v, ~w], ~x)))
    @apply_utils Antiderivative((~F) ^ (~(e') * (~(c') + ~(d') * ~x)) * (~(a') * (~x) ^ ~(n') + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => (~a * (~x) ^ ~n + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ (~p + 1) / (~b * ~d * ~e * (~p + 1) * log(~F)) - ((~a * ~n) / (~b * ~d * ~e * log(~F))) * Antiderivative((~x) ^ (~n - 1) * (~a * (~x) ^ ~n + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p, ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~n, ~p], ~x) && NeQ(~p, -1)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x)) * (~(a') * (~x) ^ ~(n') + ~(b') * (~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(p'), ~x) => (((~x) ^ ~m * (~a * (~x) ^ ~n + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ (~p + 1)) / (~b * ~d * ~e * (~p + 1) * log(~F)) - ((~a * ~n) / (~b * ~d * ~e * log(~F))) * Antiderivative((~x) ^ ((~m + ~n) - 1) * (~a * (~x) ^ ~n + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ ~p, ~x)) - (~m / (~b * ~d * ~e * (~p + 1) * log(~F))) * Antiderivative((~x) ^ (~m - 1) * (~a * (~x) ^ ~n + ~b * (~F) ^ (~e * (~c + ~d * ~x))) ^ (~p + 1), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && NeQ(~p, -1)
    @apply_utils Antiderivative((~(f') + ~(g') * ~x) ^ ~(m') / (~(a') + ~(b') * (~F) ^ ~u + ~(c') * (~F) ^ ~v), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], ((2 * ~c) / q) * Antiderivative((~f + ~g * ~x) ^ ~m / ((~b - q) + 2 * ~c * (~F) ^ ~u), ~x) - ((2 * ~c) / q) * Antiderivative((~f + ~g * ~x) ^ ~m / (~b + q + 2 * ~c * (~F) ^ ~u), ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~f, ~g], ~x) && (EqQ(~v, 2 * ~u) && (LinearQ(~u, ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IGtQ(~m, 0))))
    @apply_utils Antiderivative(((~(f') + ~(g') * ~x) ^ ~(m') * (~F) ^ ~u) / (~(a') + ~(b') * (~F) ^ ~u + ~(c') * (~F) ^ ~v), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], ((2 * ~c) / q) * Antiderivative(((~f + ~g * ~x) ^ ~m * (~F) ^ ~u) / ((~b - q) + 2 * ~c * (~F) ^ ~u), ~x) - ((2 * ~c) / q) * Antiderivative(((~f + ~g * ~x) ^ ~m * (~F) ^ ~u) / (~b + q + 2 * ~c * (~F) ^ ~u), ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~f, ~g], ~x) && (EqQ(~v, 2 * ~u) && (LinearQ(~u, ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IGtQ(~m, 0))))
    @apply_utils Antiderivative(((~(f') + ~(g') * ~x) ^ ~(m') * (~h + ~(i') * (~F) ^ ~u)) / (~(a') + ~(b') * (~F) ^ ~u + ~(c') * (~F) ^ ~v), ~x) => With([q = Rt((~b) ^ 2 - 4 * ~a * ~c, 2)], (Simplify((2 * ~c * ~h - ~b * ~i) / q) + ~i) * Antiderivative((~f + ~g * ~x) ^ ~m / ((~b - q) + 2 * ~c * (~F) ^ ~u), ~x) - (Simplify((2 * ~c * ~h - ~b * ~i) / q) - ~i) * Antiderivative((~f + ~g * ~x) ^ ~m / (~b + q + 2 * ~c * (~F) ^ ~u), ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~f, ~g, ~h, ~i], ~x) && (EqQ(~v, 2 * ~u) && (LinearQ(~u, ~x) && (NeQ((~b) ^ 2 - 4 * ~a * ~c, 0) && IGtQ(~m, 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') / (~(a') * (~F) ^ (~(c') + ~(d') * ~x) + ~(b') * (~F) ^ ~v), ~x) => With([u = IntHide(1 / (~a * (~F) ^ (~c + ~d * ~x) + ~b * (~F) ^ ~v), ~x)], (~x) ^ ~m * u - ~m * Antiderivative((~x) ^ (~m - 1) * u, ~x)) <-- FreeQ([~F, ~a, ~b, ~c, ~d], ~x) && (EqQ(~v, -((~c + ~d * ~x))) && GtQ(~m, 0))
    @apply_utils Antiderivative(~u / (~a + ~(b') * (~F) ^ ~v + ~(c') * (~F) ^ ~w), ~x) => Antiderivative((~u * (~F) ^ ~v) / (~c + ~a * (~F) ^ ~v + ~b * (~F) ^ (2 * ~v)), ~x) <-- FreeQ([~F, ~a, ~b, ~c], ~x) && (EqQ(~w, -(~v)) && (LinearQ(~v, ~x) && If(RationalQ(Coefficient(~v, ~x, 1)), GtQ(Coefficient(~v, ~x, 1), 0), LtQ(LeafCount(~v), LeafCount(~w)))))
    @apply_utils Antiderivative((~F) ^ (~(g') * (~(d') + ~(e') * ~x) ^ ~(n')) / (~(a') + ~(b') * ~x + ~(c') * (~x) ^ 2), ~x) => Antiderivative(ExpandIntegrand((~F) ^ (~g * (~d + ~e * ~x) ^ ~n), 1 / (~a + ~b * ~x + ~c * (~x) ^ 2), ~x), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~g, ~n], ~x)
    @apply_utils Antiderivative((~F) ^ (~(g') * (~(d') + ~(e') * ~x) ^ ~(n')) / (~a + ~(c') * (~x) ^ 2), ~x) => Antiderivative(ExpandIntegrand((~F) ^ (~g * (~d + ~e * ~x) ^ ~n), 1 / (~a + ~c * (~x) ^ 2), ~x), ~x) <-- FreeQ([~F, ~a, ~c, ~d, ~e, ~g, ~n], ~x)
    @apply_utils Antiderivative(((~u) ^ ~(m') * (~F) ^ (~(g') * (~(d') + ~(e') * ~x) ^ ~(n'))) / (~(a') + ~(b') * ~x + ~c * (~x) ^ 2), ~x) => Antiderivative(ExpandIntegrand((~F) ^ (~g * (~d + ~e * ~x) ^ ~n), (~u) ^ ~m / (~a + ~b * ~x + ~c * (~x) ^ 2), ~x), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~g, ~n], ~x) && (PolynomialQ(~u, ~x) && IntegerQ(~m))
    @apply_utils Antiderivative(((~u) ^ ~(m') * (~F) ^ (~(g') * (~(d') + ~(e') * ~x) ^ ~(n'))) / (~a + ~c * (~x) ^ 2), ~x) => Antiderivative(ExpandIntegrand((~F) ^ (~g * (~d + ~e * ~x) ^ ~n), (~u) ^ ~m / (~a + ~c * (~x) ^ 2), ~x), ~x) <-- FreeQ([~F, ~a, ~c, ~d, ~e, ~g, ~n], ~x) && (PolynomialQ(~u, ~x) && IntegerQ(~m))
    @apply_utils Antiderivative((~F) ^ ((~(a') + ~(b') * (~x) ^ 4) / (~x) ^ 2), ~x) => (sqrt(pi) * exp(2 * sqrt(-(~a) * log(~F)) * sqrt(-(~b) * log(~F))) * erf((sqrt(-(~a) * log(~F)) + sqrt(-(~b) * log(~F)) * (~x) ^ 2) / ~x)) / (4 * sqrt(-(~b) * log(~F))) - (sqrt(pi) * exp(-2 * sqrt(-(~a) * log(~F)) * sqrt(-(~b) * log(~F))) * erf((sqrt(-(~a) * log(~F)) - sqrt(-(~b) * log(~F)) * (~x) ^ 2) / ~x)) / (4 * sqrt(-(~b) * log(~F))) <-- FreeQ([~F, ~a, ~b], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (ℯ ^ ~x + (~x) ^ ~(m')) ^ ~n, ~x) => -((ℯ ^ ~x + (~x) ^ ~m) ^ (~n + 1)) / (~n + 1) + Antiderivative((ℯ ^ ~x + (~x) ^ ~m) ^ (~n + 1), ~x) + ~m * Antiderivative((~x) ^ (~m - 1) * (ℯ ^ ~x + (~x) ^ ~m) ^ ~n, ~x) <-- RationalQ(~m, ~n) && (GtQ(~m, 0) && (LtQ(~n, 0) && NeQ(~n, -1)))
    @apply_utils Antiderivative(~(u') * (~F) ^ (~(a') * (~(v') + ~(b') * log(~z))), ~x) => Antiderivative(~u * (~F) ^ (~a * ~v) * (~z) ^ (~a * ~b * log(~F)), ~x) <-- FreeQ([~F, ~a, ~b], ~x)
    @apply_utils Antiderivative((~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n')) ^ 2)), ~x) => ((~d + ~e * ~x) / (~e * ~n * (~c * (~d + ~e * ~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative(ℯ ^ (~a * ~f * log(~F) + ~x / ~n + ~b * ~f * log(~F) * (~x) ^ 2), ~x), ~x, log(~c * (~d + ~e * ~x) ^ ~n)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n')) ^ 2)), ~x) => ((~g + ~h * ~x) ^ (~m + 1) / (~h * ~n * (~c * (~d + ~e * ~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative(ℯ ^ (~a * ~f * log(~F) + ((~m + 1) * ~x) / ~n + ~b * ~f * log(~F) * (~x) ^ 2), ~x), ~x, log(~c * (~d + ~e * ~x) ^ ~n)) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n], ~x) && EqQ(~e * ~g - ~d * ~h, 0)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n')) ^ 2)), ~x) => (1 / (~e) ^ (~m + 1)) * Subst(Antiderivative(ExpandIntegrand((~F) ^ (~f * (~a + ~b * log(~c * (~x) ^ ~n) ^ 2)), ((~e * ~g - ~d * ~h) + ~h * ~x) ^ ~m, ~x), ~x), ~x, ~d + ~e * ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~n], ~x) && IGtQ(~m, 0)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n')) ^ 2)), ~x) => Unintegrable((~g + ~h * ~x) ^ ~m * (~F) ^ (~f * (~a + ~b * log(~c * (~d + ~e * ~x) ^ ~n) ^ 2)), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n], ~x)
    @apply_utils Antiderivative((~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n'))) ^ 2), ~x) => (~c) ^ (2 * ~a * ~b * ~f * log(~F)) * Antiderivative((~d + ~e * ~x) ^ (2 * ~a * ~b * ~f * ~n * log(~F)) * (~F) ^ ((~a) ^ 2 * ~f + (~b) ^ 2 * ~f * log(~c * (~d + ~e * ~x) ^ ~n) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && IntegerQ(2 * ~a * ~b * ~f * log(~F))
    @apply_utils Antiderivative((~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n'))) ^ 2), ~x) => ((~c * (~d + ~e * ~x) ^ ~n) ^ (2 * ~a * ~b * ~f * log(~F)) / (~d + ~e * ~x) ^ (2 * ~a * ~b * ~f * ~n * log(~F))) * Antiderivative((~d + ~e * ~x) ^ (2 * ~a * ~b * ~f * ~n * log(~F)) * (~F) ^ ((~a) ^ 2 * ~f + (~b) ^ 2 * ~f * log(~c * (~d + ~e * ~x) ^ ~n) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~n], ~x) && Not(IntegerQ(2 * ~a * ~b * ~f * log(~F)))
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n'))) ^ 2), ~x) => (((~h) ^ ~m * (~c) ^ (2 * ~a * ~b * ~f * log(~F))) / (~e) ^ ~m) * Antiderivative((~d + ~e * ~x) ^ (~m + 2 * ~a * ~b * ~f * ~n * log(~F)) * (~F) ^ ((~a) ^ 2 * ~f + (~b) ^ 2 * ~f * log(~c * (~d + ~e * ~x) ^ ~n) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n], ~x) && (EqQ(~e * ~g - ~d * ~h, 0) && (IntegerQ(2 * ~a * ~b * ~f * log(~F)) && (IntegerQ(~m) || EqQ(~h, ~e))))
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n'))) ^ 2), ~x) => (((~g + ~h * ~x) ^ ~m * (~c * (~d + ~e * ~x) ^ ~n) ^ (2 * ~a * ~b * ~f * log(~F))) / (~d + ~e * ~x) ^ (~m + 2 * ~a * ~b * ~f * ~n * log(~F))) * Antiderivative((~d + ~e * ~x) ^ (~m + 2 * ~a * ~b * ~f * ~n * log(~F)) * (~F) ^ ((~a) ^ 2 * ~f + (~b) ^ 2 * ~f * log(~c * (~d + ~e * ~x) ^ ~n) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n], ~x) && EqQ(~e * ~g - ~d * ~h, 0)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n'))) ^ 2), ~x) => (1 / (~e) ^ (~m + 1)) * Subst(Antiderivative(ExpandIntegrand((~F) ^ (~f * (~a + ~b * log(~c * (~x) ^ ~n)) ^ 2), ((~e * ~g - ~d * ~h) + ~h * ~x) ^ ~m, ~x), ~x), ~x, ~d + ~e * ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~n], ~x) && IGtQ(~m, 0)
    @apply_utils Antiderivative((~(g') + ~(h') * ~x) ^ ~(m') * (~F) ^ (~(f') * (~(a') + ~(b') * log(~(c') * (~(d') + ~(e') * ~x) ^ ~(n'))) ^ 2), ~x) => Unintegrable((~g + ~h * ~x) ^ ~m * (~F) ^ (~f * (~a + ~b * log(~c * (~d + ~e * ~x) ^ ~n)) ^ 2), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n], ~x)
    @apply_utils Antiderivative(log(~a + ~(b') * ((~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(n')), ~x) => (1 / (~d * ~e * ~n * log(~F))) * Subst(Antiderivative(log(~a + ~b * ~x) / ~x, ~x), ~x, ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~n], ~x) && GtQ(~a, 0)
    @apply_utils Antiderivative(log(~a + ~(b') * ((~F) ^ (~(e') * (~(c') + ~(d') * ~x))) ^ ~(n')), ~x) => ~x * log(~a + ~b * ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n) - ~b * ~d * ~e * ~n * log(~F) * Antiderivative((~x * ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n) / (~a + ~b * ((~F) ^ (~e * (~c + ~d * ~x))) ^ ~n), ~x) <-- FreeQ([~F, ~a, ~b, ~c, ~d, ~e, ~n], ~x) && Not(GtQ(~a, 0))
    #= Antiderivative((~u')*((~a')*(~F)^(~v))^(~n),~x) := a^n*Antiderivative(u*F^(n*v),x) <--  FreeQ([F,a],x) && IntegerQ(n) =#
    @apply_utils Antiderivative(~(u') * (~(a') * (~F) ^ ~v) ^ ~n, ~x) => ((~a * (~F) ^ ~v) ^ ~n / (~F) ^ (~n * ~v)) * Antiderivative(~u * (~F) ^ (~n * ~v), ~x) <-- FreeQ([~F, ~a, ~n], ~x) && Not(IntegerQ(~n))
    @apply_utils Antiderivative(~u, ~x) => With([v = FunctionOfExponential(~u, ~x)], (v / D(v, ~x)) * Subst(Antiderivative(FunctionOfExponentialFunction(~u, ~x) / ~x, ~x), ~x, v)) <-- FunctionOfExponentialQ(~u, ~x) && (Not(MatchQ(~u, ~w * (~(a') * (~v) ^ ~n) ^ ~m <-- FreeQ([a, m, n], ~x) && IntegerQ(m * n))) && Not(MatchQ(~u, ℯ ^ (~(c') * (~(a') + ~(b') * ~x)) * (~F)(~v) <-- FreeQ([a, b, c], ~x) && InverseFunctionQ(F(~x)))))
    @apply_utils Antiderivative(~(u') * (~(a') * (~F) ^ ~v + ~(b') * (~F) ^ ~w) ^ ~n, ~x) => Antiderivative(~u * (~F) ^ (~n * ~v) * (~a + ~b * (~F) ^ ExpandToSum(~w - ~v, ~x)) ^ ~n, ~x) <-- FreeQ([~F, ~a, ~b, ~n], ~x) && (ILtQ(~n, 0) && LinearQ([~v, ~w], ~x))
    @apply_utils Antiderivative(~(u') * (~(a') * (~F) ^ ~v + ~(b') * (~G) ^ ~w) ^ ~n, ~x) => Antiderivative(~u * (~F) ^ (~n * ~v) * (~a + ~b * ℯ ^ ExpandToSum(log(~G) * ~w - log(~F) * ~v, ~x)) ^ ~n, ~x) <-- FreeQ([~F, ~G, ~a, ~b, ~n], ~x) && (ILtQ(~n, 0) && LinearQ([~v, ~w], ~x))
    @apply_utils Antiderivative(~(u') * (~(a') * (~F) ^ ~v + ~(b') * (~F) ^ ~w) ^ ~n, ~x) => ((~a * (~F) ^ ~v + ~b * (~F) ^ ~w) ^ ~n / ((~F) ^ (~n * ~v) * (~a + ~b * (~F) ^ ExpandToSum(~w - ~v, ~x)) ^ ~n)) * Antiderivative(~u * (~F) ^ (~n * ~v) * (~a + ~b * (~F) ^ ExpandToSum(~w - ~v, ~x)) ^ ~n, ~x) <-- FreeQ([~F, ~a, ~b, ~n], ~x) && (Not(IntegerQ(~n)) && LinearQ([~v, ~w], ~x))
    @apply_utils Antiderivative(~(u') * (~(a') * (~F) ^ ~v + ~(b') * (~G) ^ ~w) ^ ~n, ~x) => ((~a * (~F) ^ ~v + ~b * (~G) ^ ~w) ^ ~n / ((~F) ^ (~n * ~v) * (~a + ~b * ℯ ^ ExpandToSum(log(~G) * ~w - log(~F) * ~v, ~x)) ^ ~n)) * Antiderivative(~u * (~F) ^ (~n * ~v) * (~a + ~b * ℯ ^ ExpandToSum(log(~G) * ~w - log(~F) * ~v, ~x)) ^ ~n, ~x) <-- FreeQ([~F, ~G, ~a, ~b, ~n], ~x) && (Not(IntegerQ(~n)) && LinearQ([~v, ~w], ~x))
    @apply_utils Antiderivative(~(u') * (~F) ^ ~v * (~G) ^ ~w, ~x) => With([z = ~v * log(~F) + ~w * log(~G)], Antiderivative(~u * NormalizeIntegrand(ℯ ^ z, ~x), ~x) <-- BinomialQ(z, ~x) || PolynomialQ(z, ~x) && LeQ(Exponent(z, ~x), 2)) <-- FreeQ([~F, ~G], ~x)
    @apply_utils Antiderivative((~F) ^ ~u * (~v + ~w) * ~(y'), ~x) => With([z = (~v * ~y) / (log(~F) * D(~u, ~x))], (~F) ^ ~u * z <-- EqQ(D(z, ~x), ~w * ~y)) <-- FreeQ(~F, ~x)
    @apply_utils Antiderivative((~F) ^ ~u * (~v) ^ ~(n') * ~w, ~x) => With([z = log(~F) * ~v * D(~u, ~x) + (~n + 1) * D(~v, ~x)], (Coefficient(~w, ~x, Exponent(~w, ~x)) / Coefficient(z, ~x, Exponent(z, ~x))) * (~F) ^ ~u * (~v) ^ (~n + 1) <-- EqQ(Exponent(~w, ~x), Exponent(z, ~x)) && EqQ(~w * Coefficient(z, ~x, Exponent(z, ~x)), z * Coefficient(~w, ~x, Exponent(~w, ~x)))) <-- FreeQ([~F, ~n], ~x) && (PolynomialQ(~u, ~x) && (PolynomialQ(~v, ~x) && PolynomialQ(~w, ~x)))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F) ^ ((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~(n') / (~(A') + ~(B') * ~x + ~(C') * (~x) ^ 2), ~x) => ((2 * ~e * ~g) / (~C * (~e * ~f - ~d * ~g))) * Subst(Antiderivative((~a + ~b * (~F) ^ (~c * ~x)) ^ ~n / ~x, ~x), ~x, sqrt(~d + ~e * ~x) / sqrt(~f + ~g * ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~B, ~C, ~F], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~B * ~e * ~g - ~C * (~e * ~f + ~d * ~g), 0) && IGtQ(~n, 0)))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F) ^ ((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~(n') / (~A + ~(C') * (~x) ^ 2), ~x) => ((2 * ~e * ~g) / (~C * (~e * ~f - ~d * ~g))) * Subst(Antiderivative((~a + ~b * (~F) ^ (~c * ~x)) ^ ~n / ~x, ~x), ~x, sqrt(~d + ~e * ~x) / sqrt(~f + ~g * ~x)) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~C, ~F], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~e * ~f + ~d * ~g, 0) && IGtQ(~n, 0)))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F) ^ ((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~n / (~(A') + ~(B') * ~x + ~(C') * (~x) ^ 2), ~x) => Unintegrable((~a + ~b * (~F) ^ ((~c * sqrt(~d + ~e * ~x)) / sqrt(~f + ~g * ~x))) ^ ~n / (~A + ~B * ~x + ~C * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~B, ~C, ~F, ~n], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~B * ~e * ~g - ~C * (~e * ~f + ~d * ~g), 0) && Not(IGtQ(~n, 0))))
    @apply_utils Antiderivative((~(a') + ~(b') * (~F) ^ ((~(c') * sqrt(~(d') + ~(e') * ~x)) / sqrt(~(f') + ~(g') * ~x))) ^ ~n / (~A + ~(C') * (~x) ^ 2), ~x) => Unintegrable((~a + ~b * (~F) ^ ((~c * sqrt(~d + ~e * ~x)) / sqrt(~f + ~g * ~x))) ^ ~n / (~A + ~C * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~A, ~C, ~F, ~n], ~x) && (EqQ(~C * ~d * ~f - ~A * ~e * ~g, 0) && (EqQ(~e * ~f + ~d * ~g, 0) && Not(IGtQ(~n, 0))))
end
