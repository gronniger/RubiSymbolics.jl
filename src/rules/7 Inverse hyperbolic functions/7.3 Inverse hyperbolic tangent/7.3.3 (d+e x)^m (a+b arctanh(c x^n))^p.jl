int_rules_7_3_3 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 7.3.3*(d+e*x)^m*(a+b*arctanh(c*x^n))^p =#
    @apply_utils Antiderivative((~(a') + ~(b') * atanh(~(c') * ~x)) ^ ~(p') / (~d + ~(e') * ~x), ~x) => (-((~a + ~b * atanh(~c * ~x)) ^ ~p) * log(2 / (1 + (~e * ~x) / ~d))) / ~e + ((~b * ~c * ~p) / ~e) * Antiderivative(((~a + ~b * atanh(~c * ~x)) ^ (~p - 1) * log(2 / (1 + (~e * ~x) / ~d))) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IGtQ(~p, 0) && EqQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0))
    @apply_utils Antiderivative((~(a') + ~(b') * acoth(~(c') * ~x)) ^ ~(p') / (~d + ~(e') * ~x), ~x) => (-((~a + ~b * acoth(~c * ~x)) ^ ~p) * log(2 / (1 + (~e * ~x) / ~d))) / ~e + ((~b * ~c * ~p) / ~e) * Antiderivative(((~a + ~b * acoth(~c * ~x)) ^ (~p - 1) * log(2 / (1 + (~e * ~x) / ~d))) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IGtQ(~p, 0) && EqQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0))
    @apply_utils Antiderivative((~(a') + ~(b') * atanh(~(c') * ~x)) / (~d + ~(e') * ~x), ~x) => ((-((~a + ~b * atanh(~c * ~x))) * log(2 / (1 + ~c * ~x))) / ~e + ((~b * ~c) / ~e) * Antiderivative(log(2 / (1 + ~c * ~x)) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) + ((~a + ~b * atanh(~c * ~x)) * log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - ((~b * ~c) / ~e) * Antiderivative(log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x))) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && NeQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * acoth(~(c') * ~x)) / (~d + ~(e') * ~x), ~x) => ((-((~a + ~b * acoth(~c * ~x))) * log(2 / (1 + ~c * ~x))) / ~e + ((~b * ~c) / ~e) * Antiderivative(log(2 / (1 + ~c * ~x)) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) + ((~a + ~b * acoth(~c * ~x)) * log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - ((~b * ~c) / ~e) * Antiderivative(log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x))) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && NeQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * atanh(~(c') * ~x)) ^ 2 / (~d + ~(e') * ~x), ~x) => (((-((~a + ~b * atanh(~c * ~x)) ^ 2) * log(2 / (1 + ~c * ~x))) / ~e + (~b * (~a + ~b * atanh(~c * ~x)) * PolyLog(2, 1 - 2 / (1 + ~c * ~x))) / ~e + ((~b) ^ 2 * PolyLog(3, 1 - 2 / (1 + ~c * ~x))) / (2 * ~e) + ((~a + ~b * atanh(~c * ~x)) ^ 2 * log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - (~b * (~a + ~b * atanh(~c * ~x)) * PolyLog(2, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - ((~b) ^ 2 * PolyLog(3, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (2 * ~e) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && NeQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * acoth(~(c') * ~x)) ^ 2 / (~d + ~(e') * ~x), ~x) => (((-((~a + ~b * acoth(~c * ~x)) ^ 2) * log(2 / (1 + ~c * ~x))) / ~e + (~b * (~a + ~b * acoth(~c * ~x)) * PolyLog(2, 1 - 2 / (1 + ~c * ~x))) / ~e + ((~b) ^ 2 * PolyLog(3, 1 - 2 / (1 + ~c * ~x))) / (2 * ~e) + ((~a + ~b * acoth(~c * ~x)) ^ 2 * log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - (~b * (~a + ~b * acoth(~c * ~x)) * PolyLog(2, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - ((~b) ^ 2 * PolyLog(3, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (2 * ~e) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && NeQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * atanh(~(c') * ~x)) ^ 3 / (~d + ~(e') * ~x), ~x) => ((((-((~a + ~b * atanh(~c * ~x)) ^ 3) * log(2 / (1 + ~c * ~x))) / ~e + (3 * ~b * (~a + ~b * atanh(~c * ~x)) ^ 2 * PolyLog(2, 1 - 2 / (1 + ~c * ~x))) / (2 * ~e) + (3 * (~b) ^ 2 * (~a + ~b * atanh(~c * ~x)) * PolyLog(3, 1 - 2 / (1 + ~c * ~x))) / (2 * ~e) + (3 * (~b) ^ 3 * PolyLog(4, 1 - 2 / (1 + ~c * ~x))) / (4 * ~e) + ((~a + ~b * atanh(~c * ~x)) ^ 3 * log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - (3 * ~b * (~a + ~b * atanh(~c * ~x)) ^ 2 * PolyLog(2, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (2 * ~e)) - (3 * (~b) ^ 2 * (~a + ~b * atanh(~c * ~x)) * PolyLog(3, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (2 * ~e)) - (3 * (~b) ^ 3 * PolyLog(4, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (4 * ~e) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && NeQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * acoth(~(c') * ~x)) ^ 3 / (~d + ~(e') * ~x), ~x) => ((((-((~a + ~b * acoth(~c * ~x)) ^ 3) * log(2 / (1 + ~c * ~x))) / ~e + (3 * ~b * (~a + ~b * acoth(~c * ~x)) ^ 2 * PolyLog(2, 1 - 2 / (1 + ~c * ~x))) / (2 * ~e) + (3 * (~b) ^ 2 * (~a + ~b * acoth(~c * ~x)) * PolyLog(3, 1 - 2 / (1 + ~c * ~x))) / (2 * ~e) + (3 * (~b) ^ 3 * PolyLog(4, 1 - 2 / (1 + ~c * ~x))) / (4 * ~e) + ((~a + ~b * acoth(~c * ~x)) ^ 3 * log((2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / ~e) - (3 * ~b * (~a + ~b * acoth(~c * ~x)) ^ 2 * PolyLog(2, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (2 * ~e)) - (3 * (~b) ^ 2 * (~a + ~b * acoth(~c * ~x)) * PolyLog(3, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (2 * ~e)) - (3 * (~b) ^ 3 * PolyLog(4, 1 - (2 * ~c * (~d + ~e * ~x)) / ((~c * ~d + ~e) * (1 + ~c * ~x)))) / (4 * ~e) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && NeQ((~c) ^ 2 * (~d) ^ 2 - (~e) ^ 2, 0)
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~(q') * (~(a') + ~(b') * atanh(~(c') * ~x)), ~x) => ((~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * atanh(~c * ~x))) / (~e * (~q + 1)) - ((~b * ~c) / (~e * (~q + 1))) * Antiderivative((~d + ~e * ~x) ^ (~q + 1) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~q], ~x) && NeQ(~q, -1)
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~(q') * (~(a') + ~(b') * acoth(~(c') * ~x)), ~x) => ((~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * acoth(~c * ~x))) / (~e * (~q + 1)) - ((~b * ~c) / (~e * (~q + 1))) * Antiderivative((~d + ~e * ~x) ^ (~q + 1) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~q], ~x) && NeQ(~q, -1)
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~(q') * (~(a') + ~(b') * atanh(~(c') * ~x)) ^ ~p, ~x) => ((~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * atanh(~c * ~x)) ^ ~p) / (~e * (~q + 1)) - ((~b * ~c * ~p) / (~e * (~q + 1))) * Antiderivative(ExpandIntegrand((~a + ~b * atanh(~c * ~x)) ^ (~p - 1), (~d + ~e * ~x) ^ (~q + 1) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IGtQ(~p, 1) && (IntegerQ(~q) && NeQ(~q, -1)))
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~(q') * (~(a') + ~(b') * acoth(~(c') * ~x)) ^ ~p, ~x) => ((~d + ~e * ~x) ^ (~q + 1) * (~a + ~b * acoth(~c * ~x)) ^ ~p) / (~e * (~q + 1)) - ((~b * ~c * ~p) / (~e * (~q + 1))) * Antiderivative(ExpandIntegrand((~a + ~b * acoth(~c * ~x)) ^ (~p - 1), (~d + ~e * ~x) ^ (~q + 1) / (1 - (~c) ^ 2 * (~x) ^ 2), ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IGtQ(~p, 1) && (IntegerQ(~q) && NeQ(~q, -1)))
    @apply_utils Antiderivative((~(a') + ~(b') * atanh(~(c') * (~x) ^ ~n)) / (~(d') + ~(e') * ~x), ~x) => (log(~d + ~e * ~x) * (~a + ~b * atanh(~c * (~x) ^ ~n))) / ~e - ((~b * ~c * ~n) / ~e) * Antiderivative(((~x) ^ (~n - 1) * log(~d + ~e * ~x)) / (1 - (~c) ^ 2 * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && IntegerQ(~n)
    @apply_utils Antiderivative((~(a') + ~(b') * acoth(~(c') * (~x) ^ ~n)) / (~(d') + ~(e') * ~x), ~x) => (log(~d + ~e * ~x) * (~a + ~b * acoth(~c * (~x) ^ ~n))) / ~e - ((~b * ~c * ~n) / ~e) * Antiderivative(((~x) ^ (~n - 1) * log(~d + ~e * ~x)) / (1 - (~c) ^ 2 * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && IntegerQ(~n)
    @apply_utils Antiderivative((~(a') + ~(b') * atanh(~(c') * (~x) ^ ~n)) / (~d + ~(e') * ~x), ~x) => With([k = Denominator(~n)], k * Subst(Antiderivative(((~x) ^ (k - 1) * (~a + ~b * atanh(~c * (~x) ^ (k * ~n)))) / (~d + ~e * (~x) ^ k), ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && FractionQ(~n)
    @apply_utils Antiderivative((~(a') + ~(b') * acoth(~(c') * (~x) ^ ~n)) / (~d + ~(e') * ~x), ~x) => With([k = Denominator(~n)], k * Subst(Antiderivative(((~x) ^ (k - 1) * (~a + ~b * acoth(~c * (~x) ^ (k * ~n)))) / (~d + ~e * (~x) ^ k), ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && FractionQ(~n)
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * atanh(~(c') * (~x) ^ ~n)), ~x) => ((~d + ~e * ~x) ^ (~m + 1) * (~a + ~b * atanh(~c * (~x) ^ ~n))) / (~e * (~m + 1)) - ((~b * ~c * ~n) / (~e * (~m + 1))) * Antiderivative(((~x) ^ (~n - 1) * (~d + ~e * ~x) ^ (~m + 1)) / (1 - (~c) ^ 2 * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && NeQ(~m, -1)
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * acoth(~(c') * (~x) ^ ~n)), ~x) => ((~d + ~e * ~x) ^ (~m + 1) * (~a + ~b * acoth(~c * (~x) ^ ~n))) / (~e * (~m + 1)) - ((~b * ~c * ~n) / (~e * (~m + 1))) * Antiderivative(((~x) ^ (~n - 1) * (~d + ~e * ~x) ^ (~m + 1)) / (1 - (~c) ^ 2 * (~x) ^ (2 * ~n)), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && NeQ(~m, -1)
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * atanh(~(c') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~a + ~b * atanh(~c * (~x) ^ ~n)) ^ ~p, (~d + ~e * ~x) ^ ~m, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (IGtQ(~p, 1) && IGtQ(~m, 0))
    @apply_utils Antiderivative((~d + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * acoth(~(c') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandIntegrand((~a + ~b * acoth(~c * (~x) ^ ~n)) ^ ~p, (~d + ~e * ~x) ^ ~m, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~n], ~x) && (IGtQ(~p, 1) && IGtQ(~m, 0))
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * atanh(~(c') * (~x) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~d + ~e * ~x) ^ ~m * (~a + ~b * atanh(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~(d') + ~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * acoth(~(c') * (~x) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~d + ~e * ~x) ^ ~m * (~a + ~b * acoth(~c * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x)
end
