int_rules_6_7_8 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 6.7.8*u*hyper(a+b*log(c*x^n))^p =#
    @apply_utils Antiderivative(sinh(~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => Antiderivative(((~c * (~x) ^ ~n) ^ ~b / 2 - 1 / (2 * (~c * (~x) ^ ~n) ^ ~b)) ^ ~p, ~x) <-- FreeQ(~c, ~x) && RationalQ(~b, ~n, ~p)
    @apply_utils Antiderivative(cosh(~(b') * log(~(c') * (~x) ^ ~(n'))) ^ ~(p'), ~x) => Antiderivative(((~c * (~x) ^ ~n) ^ ~b / 2 + 1 / (2 * (~c * (~x) ^ ~n) ^ ~b)) ^ ~p, ~x) <-- FreeQ(~c, ~x) && RationalQ(~b, ~n, ~p)
    @apply_utils Antiderivative(sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => (-(~x) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - 1) + (~b * ~d * ~n * ~x * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - 1) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - 1, 0)
    @apply_utils Antiderivative(cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => (-(~x) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - 1) + (~b * ~d * ~n * ~x * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - 1) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - 1, 0)
    @apply_utils Antiderivative(sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~p, ~x) => ((-(~x) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ ~p) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1) + (~b * ~d * ~n * ~p * ~x * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1)) - (((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * ~p * (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1)) * Antiderivative(sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IGtQ(~p, 1) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1, 0))
    @apply_utils Antiderivative(cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~p, ~x) => (-(~x) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ ~p) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1) + (~b * ~d * ~n * ~p * ~x * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 1) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1) + (((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * ~p * (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1)) * Antiderivative(cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IGtQ(~p, 1) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - 1, 0))
    @apply_utils Antiderivative(sinh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => (1 / (2 ^ ~p * (~b) ^ ~p * (~d) ^ ~p * (~p) ^ ~p)) * Antiderivative(ExpandIntegrand((-(ℯ ^ (-(~a) * ~b * (~d) ^ 2 * ~p)) * (~x) ^ (-1 / ~p) + ℯ ^ (~a * ~b * (~d) ^ 2 * ~p) * (~x) ^ (1 / ~p)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~d], ~x) && (IGtQ(~p, 0) && EqQ((~b) ^ 2 * (~d) ^ 2 * (~p) ^ 2 - 1, 0))
    @apply_utils Antiderivative(cosh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => (1 / 2 ^ ~p) * Antiderivative(ExpandIntegrand((ℯ ^ (-(~a) * ~b * (~d) ^ 2 * ~p) * (~x) ^ (-1 / ~p) + ℯ ^ (~a * ~b * (~d) ^ 2 * ~p) * (~x) ^ (1 / ~p)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~d], ~x) && (IGtQ(~p, 0) && EqQ((~b) ^ 2 * (~d) ^ 2 * (~p) ^ 2 - 1, 0))
    #= Antiderivative(sinh((~d')*((~a')+(~b')*log((~x))))^(~p'),~x) :=  ℯ^(a*d*p)/2^p*Antiderivative(x^(b*d*p)*(1-1/(ℯ^(2*a*d)*x^(2*b*d)))^p,x) <--  FreeQ([a,b,d],x) && IntegerQ(p) =#
    #= Antiderivative(cosh((~d')*((~a')+(~b')*log((~x))))^(~p'),~x) :=  ℯ^(a*d*p)/2^p*Antiderivative(x^(b*d*p)*(1+1/(ℯ^(2*a*d)*x^(2*b*d)))^p,x) <--  FreeQ([a,b,d],x) && IntegerQ(p) =#
    @apply_utils Antiderivative(sinh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~p, ~x) => (sinh(~d * (~a + ~b * log(~x))) ^ ~p / ((~x) ^ (~b * ~d * ~p) * (1 - 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p)) * Antiderivative((~x) ^ (~b * ~d * ~p) * (1 - 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative(cosh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~p, ~x) => (cosh(~d * (~a + ~b * log(~x))) ^ ~p / ((~x) ^ (~b * ~d * ~p) * (1 + 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p)) * Antiderivative((~x) ^ (~b * ~d * ~p) * (1 + 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative(sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => (~x / (~n * (~c * (~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * sinh(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative(cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => (~x / (~n * (~c * (~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * cosh(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => (-((~m + 1)) * (~e * ~x) ^ (~m + 1) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 - ~e * (~m + 1) ^ 2) + (~b * ~d * ~n * (~e * ~x) ^ (~m + 1) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 - ~e * (~m + 1) ^ 2) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - (~m + 1) ^ 2, 0)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => (-((~m + 1)) * (~e * ~x) ^ (~m + 1) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 - ~e * (~m + 1) ^ 2) + (~b * ~d * ~n * (~e * ~x) ^ (~m + 1) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n)))) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 - ~e * (~m + 1) ^ 2) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 - (~m + 1) ^ 2, 0)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~p, ~x) => ((-((~m + 1)) * (~e * ~x) ^ (~m + 1) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ ~p) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 * (~p) ^ 2 - ~e * (~m + 1) ^ 2) + (~b * ~d * ~n * ~p * (~e * ~x) ^ (~m + 1) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 * (~p) ^ 2 - ~e * (~m + 1) ^ 2)) - (((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * ~p * (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - (~m + 1) ^ 2)) * Antiderivative((~e * ~x) ^ ~m * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (IGtQ(~p, 1) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - (~m + 1) ^ 2, 0))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~p, ~x) => (-((~m + 1)) * (~e * ~x) ^ (~m + 1) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ ~p) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 * (~p) ^ 2 - ~e * (~m + 1) ^ 2) + (~b * ~d * ~n * ~p * (~e * ~x) ^ (~m + 1) * sinh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * ~e * (~n) ^ 2 * (~p) ^ 2 - ~e * (~m + 1) ^ 2) + (((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * ~p * (~p - 1)) / ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - (~m + 1) ^ 2)) * Antiderivative((~e * ~x) ^ ~m * cosh(~d * (~a + ~b * log(~c * (~x) ^ ~n))) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (IGtQ(~p, 1) && NeQ((~b) ^ 2 * (~d) ^ 2 * (~n) ^ 2 * (~p) ^ 2 - (~m + 1) ^ 2, 0))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => ((~m + 1) ^ ~p / (2 ^ ~p * (~b) ^ ~p * (~d) ^ ~p * (~p) ^ ~p)) * Antiderivative(ExpandIntegrand((~e * ~x) ^ ~m * (-(ℯ ^ ((-(~a) * ~b * (~d) ^ 2 * ~p) / (~m + 1))) * (~x) ^ (-((~m + 1)) / ~p) + ℯ ^ ((~a * ~b * (~d) ^ 2 * ~p) / (~m + 1)) * (~x) ^ ((~m + 1) / ~p)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m], ~x) && (IGtQ(~p, 0) && EqQ((~b) ^ 2 * (~d) ^ 2 * (~p) ^ 2 - (~m + 1) ^ 2, 0))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => (1 / 2 ^ ~p) * Antiderivative(ExpandIntegrand((~e * ~x) ^ ~m * (ℯ ^ ((-(~a) * ~b * (~d) ^ 2 * ~p) / (~m + 1)) * (~x) ^ (-((~m + 1)) / ~p) + ℯ ^ ((~a * ~b * (~d) ^ 2 * ~p) / (~m + 1)) * (~x) ^ ((~m + 1) / ~p)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m], ~x) && (IGtQ(~p, 0) && EqQ((~b) ^ 2 * (~d) ^ 2 * (~p) ^ 2 - (~m + 1) ^ 2, 0))
    #= Antiderivative(((~e')*(~x))^(~m')*sinh((~d')*((~a')+(~b')*log((~x))))^(~p'),~x) :=  ℯ^(a*d*p)/2^p*Antiderivative((e*x)^m*x^(b*d*p)*(1-1/(ℯ^(2*a*d)*x^(2*b*d)))^p,x) <--  FreeQ([a,b,d,e,m],x) && IntegerQ(p) =#
    #= Antiderivative(((~e')*(~x))^(~m')*cosh((~d')*((~a')+(~b')*log((~x))))^(~p'),~x) :=  ℯ^(a*d*p)/2^p*Antiderivative((e*x)^m*x^(b*d*p)*(1+1/(ℯ^(2*a*d)*x^(2*b*d)))^p,x) <--  FreeQ([a,b,d,e,m],x) && IntegerQ(p) =#
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~p, ~x) => (sinh(~d * (~a + ~b * log(~x))) ^ ~p / ((~x) ^ (~b * ~d * ~p) * (1 - 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p)) * Antiderivative((~e * ~x) ^ ~m * (~x) ^ (~b * ~d * ~p) * (1 - 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~p, ~x) => (cosh(~d * (~a + ~b * log(~x))) ^ ~p / ((~x) ^ (~b * ~d * ~p) * (1 + 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p)) * Antiderivative((~e * ~x) ^ ~m * (~x) ^ (~b * ~d * ~p) * (1 + 1 / (ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => ((~e * ~x) ^ (~m + 1) / (~e * ~n * (~c * (~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * sinh(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => ((~e * ~x) ^ (~m + 1) / (~e * ~n * (~c * (~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * cosh(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(h') * (~(e') + ~(f') * log(~(g') * (~x) ^ ~(m')))) ^ ~(q') * sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => ((-(ℯ ^ (-(~a) * ~d)) * (~c * (~x) ^ ~n) ^ (-(~b) * ~d)) / (2 * (~x) ^ (-(~b) * ~d * ~n))) * Antiderivative((~x) ^ (-(~b) * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) + ((ℯ ^ (~a * ~d) * (~c * (~x) ^ ~n) ^ (~b * ~d)) / (2 * (~x) ^ (~b * ~d * ~n))) * Antiderivative((~x) ^ (~b * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n, ~q], ~x)
    @apply_utils Antiderivative((~(h') * (~(e') + ~(f') * log(~(g') * (~x) ^ ~(m')))) ^ ~(q') * cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => ((ℯ ^ (-(~a) * ~d) * (~c * (~x) ^ ~n) ^ (-(~b) * ~d)) / (2 * (~x) ^ (-(~b) * ~d * ~n))) * Antiderivative((~x) ^ (-(~b) * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) + ((ℯ ^ (~a * ~d) * (~c * (~x) ^ ~n) ^ (~b * ~d)) / (2 * (~x) ^ (~b * ~d * ~n))) * Antiderivative((~x) ^ (~b * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~m, ~n, ~q], ~x)
    @apply_utils Antiderivative((~(i') * ~x) ^ ~(r') * (~(h') * (~(e') + ~(f') * log(~(g') * (~x) ^ ~(m')))) ^ ~(q') * sinh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => ((-(ℯ ^ (-(~a) * ~d)) * (~i * ~x) ^ ~r * (~c * (~x) ^ ~n) ^ (-(~b) * ~d)) / (2 * (~x) ^ (~r - ~b * ~d * ~n))) * Antiderivative((~x) ^ (~r - ~b * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) + ((ℯ ^ (~a * ~d) * (~i * ~x) ^ ~r * (~c * (~x) ^ ~n) ^ (~b * ~d)) / (2 * (~x) ^ (~r + ~b * ~d * ~n))) * Antiderivative((~x) ^ (~r + ~b * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~i, ~m, ~n, ~q, ~r], ~x)
    @apply_utils Antiderivative((~(i') * ~x) ^ ~(r') * (~(h') * (~(e') + ~(f') * log(~(g') * (~x) ^ ~(m')))) ^ ~(q') * cosh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))), ~x) => ((ℯ ^ (-(~a) * ~d) * (~i * ~x) ^ ~r * (~c * (~x) ^ ~n) ^ (-(~b) * ~d)) / (2 * (~x) ^ (~r - ~b * ~d * ~n))) * Antiderivative((~x) ^ (~r - ~b * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) + ((ℯ ^ (~a * ~d) * (~i * ~x) ^ ~r * (~c * (~x) ^ ~n) ^ (~b * ~d)) / (2 * (~x) ^ (~r + ~b * ~d * ~n))) * Antiderivative((~x) ^ (~r + ~b * ~d * ~n) * (~h * (~e + ~f * log(~g * (~x) ^ ~m))) ^ ~q, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~f, ~g, ~h, ~i, ~m, ~n, ~q, ~r], ~x)
    @apply_utils Antiderivative(tanh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => Antiderivative((-1 + ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p / (1 + ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~p], ~x)
    @apply_utils Antiderivative(coth(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => Antiderivative((-1 - ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p / (1 - ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~p], ~x)
    @apply_utils Antiderivative(tanh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => (~x / (~n * (~c * (~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * tanh(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative(coth(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => (~x / (~n * (~c * (~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * coth(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * tanh(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => Antiderivative(((~e * ~x) ^ ~m * (-1 + ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p) / (1 + ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m, ~p], ~x)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * coth(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => Antiderivative(((~e * ~x) ^ ~m * (-1 - ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p) / (1 - ℯ ^ (2 * ~a * ~d) * (~x) ^ (2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m, ~p], ~x)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * tanh(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => ((~e * ~x) ^ (~m + 1) / (~e * ~n * (~c * (~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * tanh(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * coth(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => ((~e * ~x) ^ (~m + 1) / (~e * ~n * (~c * (~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * coth(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative(sech(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => 2 ^ ~p * ℯ ^ (-(~a) * ~d * ~p) * Antiderivative((~x) ^ (-(~b) * ~d * ~p) / (1 + ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d], ~x) && IntegerQ(~p)
    @apply_utils Antiderivative(csch(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => 2 ^ ~p * ℯ ^ (-(~a) * ~d * ~p) * Antiderivative((~x) ^ (-(~b) * ~d * ~p) / (1 - ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d], ~x) && IntegerQ(~p)
    @apply_utils Antiderivative(sech(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => ((sech(~d * (~a + ~b * log(~x))) ^ ~p * (1 + ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p) / (~x) ^ (-(~b) * ~d * ~p)) * Antiderivative((~x) ^ (-(~b) * ~d * ~p) / (1 + ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative(csch(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => ((csch(~d * (~a + ~b * log(~x))) ^ ~p * (1 - ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p) / (~x) ^ (-(~b) * ~d * ~p)) * Antiderivative((~x) ^ (-(~b) * ~d * ~p) / (1 - ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative(sech(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => (~x / (~n * (~c * (~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * sech(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative(csch(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => (~x / (~n * (~c * (~x) ^ ~n) ^ (1 / ~n))) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * csch(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sech(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => 2 ^ ~p * ℯ ^ (-(~a) * ~d * ~p) * Antiderivative(((~e * ~x) ^ ~m * (~x) ^ (-(~b) * ~d * ~p)) / (1 + ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m], ~x) && IntegerQ(~p)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * csch(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => 2 ^ ~p * ℯ ^ (-(~a) * ~d * ~p) * Antiderivative(((~e * ~x) ^ ~m * (~x) ^ (-(~b) * ~d * ~p)) / (1 - ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m], ~x) && IntegerQ(~p)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sech(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => ((sech(~d * (~a + ~b * log(~x))) ^ ~p * (1 + ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p) / (~x) ^ (-(~b) * ~d * ~p)) * Antiderivative(((~e * ~x) ^ ~m * (~x) ^ (-(~b) * ~d * ~p)) / (1 + ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * csch(~(d') * (~(a') + ~(b') * log(~x))) ^ ~(p'), ~x) => ((csch(~d * (~a + ~b * log(~x))) ^ ~p * (1 - ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p) / (~x) ^ (-(~b) * ~d * ~p)) * Antiderivative(((~e * ~x) ^ ~m * (~x) ^ (-(~b) * ~d * ~p)) / (1 - ℯ ^ (-2 * ~a * ~d) * (~x) ^ (-2 * ~b * ~d)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~d, ~e, ~m, ~p], ~x) && Not(IntegerQ(~p))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sech(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => ((~e * ~x) ^ (~m + 1) / (~e * ~n * (~c * (~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * sech(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * csch(~(d') * (~(a') + ~(b') * log(~(c') * (~x) ^ ~(n')))) ^ ~(p'), ~x) => ((~e * ~x) ^ (~m + 1) / (~e * ~n * (~c * (~x) ^ ~n) ^ ((~m + 1) / ~n))) * Subst(Antiderivative((~x) ^ ((~m + 1) / ~n - 1) * csch(~d * (~a + ~b * log(~x))) ^ ~p, ~x), ~x, ~c * (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && (NeQ(~c, 1) || NeQ(~n, 1))
    @apply_utils Antiderivative(sinh(~(a') * ~x * log(~(b') * ~x)) * log(~(b') * ~x), ~x) => cosh(~a * ~x * log(~b * ~x)) / ~a - Antiderivative(sinh(~a * ~x * log(~b * ~x)), ~x) <-- FreeQ([~a, ~b], ~x)
    @apply_utils Antiderivative(cosh(~(a') * ~x * log(~(b') * ~x)) * log(~(b') * ~x), ~x) => sinh(~a * ~x * log(~b * ~x)) / ~a - Antiderivative(cosh(~a * ~x * log(~b * ~x)), ~x) <-- FreeQ([~a, ~b], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') * (~x) ^ ~(n') * log(~(b') * ~x)) * log(~(b') * ~x), ~x) => cosh(~a * (~x) ^ ~n * log(~b * ~x)) / (~a * ~n) - (1 / ~n) * Antiderivative((~x) ^ ~m * sinh(~a * (~x) ^ ~n * log(~b * ~x)), ~x) <-- FreeQ([~a, ~b, ~m, ~n], ~x) && EqQ(~m, ~n - 1)
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') * (~x) ^ ~(n') * log(~(b') * ~x)) * log(~(b') * ~x), ~x) => sinh(~a * (~x) ^ ~n * log(~b * ~x)) / (~a * ~n) - (1 / ~n) * Antiderivative((~x) ^ ~m * cosh(~a * (~x) ^ ~n * log(~b * ~x)), ~x) <-- FreeQ([~a, ~b, ~m, ~n], ~x) && EqQ(~m, ~n - 1)
end
