int_rules_6_3_11 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 6.3.11*(e*x)^m*(a+b*tanh(c+d*x^n))^p =#
    @apply_utils Antiderivative((~(a') + ~(b') * tanh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * (~a + ~b * tanh(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~p], ~x) && (IGtQ(1 / ~n, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * coth(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (1 / ~n - 1) * (~a + ~b * coth(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~p], ~x) && (IGtQ(1 / ~n, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * tanh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Integral((~a + ~b * tanh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * coth(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Integral((~a + ~b * coth(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * tanh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * tanh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (LinearQ(~u, ~x) && NeQ(~u, ~x))
    @apply_utils Antiderivative((~(a') + ~(b') * coth(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * coth(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (LinearQ(~u, ~x) && NeQ(~u, ~x))
    @apply_utils Antiderivative((~(a') + ~(b') * tanh(~u)) ^ ~(p'), ~x) => Antiderivative((~a + ~b * tanh(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(a') + ~(b') * coth(~u)) ^ ~(p'), ~x) => Antiderivative((~a + ~b * coth(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * tanh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * tanh(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (IGtQ(Simplify((~m + 1) / ~n), 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * coth(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * coth(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (IGtQ(Simplify((~m + 1) / ~n), 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~x) ^ ~(m') * tanh(~(c') + ~(d') * (~x) ^ ~n) ^ 2, ~x) => (-((~x) ^ ((~m - ~n) + 1)) * tanh(~c + ~d * (~x) ^ ~n)) / (~d * ~n) + Antiderivative((~x) ^ ~m, ~x) + (((~m - ~n) + 1) / (~d * ~n)) * Antiderivative((~x) ^ (~m - ~n) * tanh(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~m, ~n], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * coth(~(c') + ~(d') * (~x) ^ ~n) ^ 2, ~x) => (-((~x) ^ ((~m - ~n) + 1)) * coth(~c + ~d * (~x) ^ ~n)) / (~d * ~n) + Antiderivative((~x) ^ ~m, ~x) + (((~m - ~n) + 1) / (~d * ~n)) * Antiderivative((~x) ^ (~m - ~n) * coth(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~m, ~n], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * tanh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Integral((~x) ^ ~m * (~a + ~b * tanh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * coth(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Integral((~x) ^ ~m * (~a + ~b * coth(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * tanh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * tanh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * coth(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * coth(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * tanh(~u)) ^ ~(p'), ~x) => Antiderivative((~e * ~x) ^ ~m * (~a + ~b * tanh(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * coth(~u)) ^ ~(p'), ~x) => Antiderivative((~e * ~x) ^ ~m * (~a + ~b * coth(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~x) ^ ~(m') * sech(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * tanh(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (-((~x) ^ ((~m - ~n) + 1)) * sech(~a + ~b * (~x) ^ ~n) ^ ~p) / (~b * ~n * ~p) + (((~m - ~n) + 1) / (~b * ~n * ~p)) * Antiderivative((~x) ^ (~m - ~n) * sech(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (RationalQ(~m) && (IntegerQ(~n) && (GeQ(~m - ~n, 0) && EqQ(~q, 1))))
    @apply_utils Antiderivative((~x) ^ ~(m') * csch(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * coth(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(q'), ~x) => (-((~x) ^ ((~m - ~n) + 1)) * csch(~a + ~b * (~x) ^ ~n) ^ ~p) / (~b * ~n * ~p) + (((~m - ~n) + 1) / (~b * ~n * ~p)) * Antiderivative((~x) ^ (~m - ~n) * csch(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (RationalQ(~m) && (IntegerQ(~n) && (GeQ(~m - ~n, 0) && EqQ(~q, 1))))
end
