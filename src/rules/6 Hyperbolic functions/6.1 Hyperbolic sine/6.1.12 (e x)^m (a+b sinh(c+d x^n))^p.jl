int_rules_6_1_12 = @theory begin

    #= ::Subsection::Closed:: =#
    #= 6.1.12*(e*x)^m*(a+b*sinh(c+d*x^n))^p =#
    @apply_utils Antiderivative(sinh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative(ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) - (1 / 2) * Antiderivative(ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d], ~x) && IGtQ(~n, 1)
    @apply_utils Antiderivative(cosh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative(ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) + (1 / 2) * Antiderivative(ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d], ~x) && IGtQ(~n, 1)
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (IGtQ(~n, 1) && IGtQ(~p, 1))
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (IGtQ(~n, 1) && IGtQ(~p, 1))
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => -(Subst(Antiderivative((~a + ~b * sinh(~c + ~d * (~x) ^ -(~n))) ^ ~p / (~x) ^ 2, ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (ILtQ(~n, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => -(Subst(Antiderivative((~a + ~b * cosh(~c + ~d * (~x) ^ -(~n))) ^ ~p / (~x) ^ 2, ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (ILtQ(~n, 0) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Module([k = Denominator(~n)], k * Subst(Antiderivative((~x) ^ (k - 1) * (~a + ~b * sinh(~c + ~d * (~x) ^ (k * ~n))) ^ ~p, ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (FractionQ(~n) && IntegerQ(~p))
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Module([k = Denominator(~n)], k * Subst(Antiderivative((~x) ^ (k - 1) * (~a + ~b * cosh(~c + ~d * (~x) ^ (k * ~n))) ^ ~p, ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (FractionQ(~n) && IntegerQ(~p))
    @apply_utils Antiderivative(sinh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative(ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) - (1 / 2) * Antiderivative(ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~n], ~x)
    @apply_utils Antiderivative(cosh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative(ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) + (1 / 2) * Antiderivative(ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~n], ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && IGtQ(~p, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && IGtQ(~p, 0)
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IntegerQ(~p) && (LinearQ(~u, ~x) && NeQ(~u, ~x)))
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1)) * Subst(Antiderivative((~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n], ~x) && (IntegerQ(~p) && (LinearQ(~u, ~x) && NeQ(~u, ~x)))
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~p, ~x) => Unintegrable((~a + ~b * sinh(~c + ~d * (~u) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && LinearQ(~u, ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~p, ~x) => Unintegrable((~a + ~b * cosh(~c + ~d * (~u) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && LinearQ(~u, ~x)
    @apply_utils Antiderivative((~(a') + ~(b') * sinh(~u)) ^ ~(p'), ~x) => Antiderivative((~a + ~b * sinh(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~(a') + ~(b') * cosh(~u)) ^ ~(p'), ~x) => Antiderivative((~a + ~b * cosh(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative(sinh(~(d') * (~x) ^ ~n) / ~x, ~x) => SinhIntegral(~d * (~x) ^ ~n) / ~n <-- FreeQ([~d, ~n], ~x)
    @apply_utils Antiderivative(cosh(~(d') * (~x) ^ ~n) / ~x, ~x) => CoshIntegral(~d * (~x) ^ ~n) / ~n <-- FreeQ([~d, ~n], ~x)
    @apply_utils Antiderivative(sinh(~c + ~(d') * (~x) ^ ~n) / ~x, ~x) => sinh(~c) * Antiderivative(cosh(~d * (~x) ^ ~n) / ~x, ~x) + cosh(~c) * Antiderivative(sinh(~d * (~x) ^ ~n) / ~x, ~x) <-- FreeQ([~c, ~d, ~n], ~x)
    @apply_utils Antiderivative(cosh(~c + ~(d') * (~x) ^ ~n) / ~x, ~x) => cosh(~c) * Antiderivative(cosh(~d * (~x) ^ ~n) / ~x, ~x) + sinh(~c) * Antiderivative(sinh(~d * (~x) ^ ~n) / ~x, ~x) <-- FreeQ([~c, ~d, ~n], ~x)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * sinh(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (IntegerQ(Simplify((~m + 1) / ~n)) && (EqQ(~p, 1) || (EqQ(~m, ~n - 1) || IntegerQ(~p) && GtQ(Simplify((~m + 1) / ~n), 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / ~n) * Subst(Antiderivative((~x) ^ (Simplify((~m + 1) / ~n) - 1) * (~a + ~b * cosh(~c + ~d * ~x)) ^ ~p, ~x), ~x, (~x) ^ ~n) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n, ~p], ~x) && (IntegerQ(Simplify((~m + 1) / ~n)) && (EqQ(~p, 1) || (EqQ(~m, ~n - 1) || IntegerQ(~p) && GtQ(Simplify((~m + 1) / ~n), 0))))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && IntegerQ(Simplify((~m + 1) / ~n))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && IntegerQ(Simplify((~m + 1) / ~n))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(c') + ~(d') * (~x) ^ ~n), ~x) => ((~e) ^ (~n - 1) * (~e * ~x) ^ ((~m - ~n) + 1) * cosh(~c + ~d * (~x) ^ ~n)) / (~d * ~n) - (((~e) ^ ~n * ((~m - ~n) + 1)) / (~d * ~n)) * Antiderivative((~e * ~x) ^ (~m - ~n) * cosh(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e], ~x) && (IGtQ(~n, 0) && LtQ(0, ~n, ~m + 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(c') + ~(d') * (~x) ^ ~n), ~x) => ((~e) ^ (~n - 1) * (~e * ~x) ^ ((~m - ~n) + 1) * sinh(~c + ~d * (~x) ^ ~n)) / (~d * ~n) - (((~e) ^ ~n * ((~m - ~n) + 1)) / (~d * ~n)) * Antiderivative((~e * ~x) ^ (~m - ~n) * sinh(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e], ~x) && (IGtQ(~n, 0) && LtQ(0, ~n, ~m + 1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * sinh(~(c') + ~(d') * (~x) ^ ~n), ~x) => ((~e * ~x) ^ (~m + 1) * sinh(~c + ~d * (~x) ^ ~n)) / (~e * (~m + 1)) - ((~d * ~n) / ((~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * cosh(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e], ~x) && (IGtQ(~n, 0) && LtQ(~m, -1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * cosh(~(c') + ~(d') * (~x) ^ ~n), ~x) => ((~e * ~x) ^ (~m + 1) * cosh(~c + ~d * (~x) ^ ~n)) / (~e * (~m + 1)) - ((~d * ~n) / ((~e) ^ ~n * (~m + 1))) * Antiderivative((~e * ~x) ^ (~m + ~n) * sinh(~c + ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e], ~x) && (IGtQ(~n, 0) && LtQ(~m, -1))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) - (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e, ~m], ~x) && IGtQ(~n, 0)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) + (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e, ~m], ~x) && IGtQ(~n, 0)
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => -(sinh(~a + ~b * (~x) ^ ~n) ^ ~p) / ((~n - 1) * (~x) ^ (~n - 1)) + ((~b * ~n * ~p) / (~n - 1)) * Antiderivative(sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 1) * cosh(~a + ~b * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~n, ~p) && (EqQ(~m + ~n, 0) && (GtQ(~p, 1) && NeQ(~n, 1))))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => -(cosh(~a + ~b * (~x) ^ ~n) ^ ~p) / ((~n - 1) * (~x) ^ (~n - 1)) + ((~b * ~n * ~p) / (~n - 1)) * Antiderivative(cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 1) * sinh(~a + ~b * (~x) ^ ~n), ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~n, ~p) && (EqQ(~m + ~n, 0) && (GtQ(~p, 1) && NeQ(~n, 1))))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => ((-(~n) * sinh(~a + ~b * (~x) ^ ~n) ^ ~p) / ((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2) + ((~x) ^ ~n * cosh(~a + ~b * (~x) ^ ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / (~b * ~n * ~p)) - ((~p - 1) / ~p) * Antiderivative((~x) ^ ~m * sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~m, ~n], ~x) && (EqQ((~m - 2 * ~n) + 1) && GtQ(~p, 1))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (-(~n) * cosh(~a + ~b * (~x) ^ ~n) ^ ~p) / ((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2) + ((~x) ^ ~n * sinh(~a + ~b * (~x) ^ ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / (~b * ~n * ~p) + ((~p - 1) / ~p) * Antiderivative((~x) ^ ~m * cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b, ~m, ~n], ~x) && (EqQ((~m - 2 * ~n) + 1) && GtQ(~p, 1))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((-(((~m - ~n) + 1)) * (~x) ^ ((~m - 2 * ~n) + 1) * sinh(~a + ~b * (~x) ^ ~n) ^ ~p) / ((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2) + ((~x) ^ ((~m - ~n) + 1) * cosh(~a + ~b * (~x) ^ ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / (~b * ~n * ~p)) - ((~p - 1) / ~p) * Antiderivative((~x) ^ ~m * sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 2), ~x)) + ((((~m - ~n) + 1) * ((~m - 2 * ~n) + 1)) / ((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2)) * Antiderivative((~x) ^ (~m - 2 * ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~m, ~n) && (GtQ(~p, 1) && LtQ(0, 2 * ~n, ~m + 1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (-(((~m - ~n) + 1)) * (~x) ^ ((~m - 2 * ~n) + 1) * cosh(~a + ~b * (~x) ^ ~n) ^ ~p) / ((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2) + ((~x) ^ ((~m - ~n) + 1) * sinh(~a + ~b * (~x) ^ ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / (~b * ~n * ~p) + ((~p - 1) / ~p) * Antiderivative((~x) ^ ~m * cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 2), ~x) + ((((~m - ~n) + 1) * ((~m - 2 * ~n) + 1)) / ((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2)) * Antiderivative((~x) ^ (~m - 2 * ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~m, ~n) && (GtQ(~p, 1) && LtQ(0, 2 * ~n, ~m + 1)))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((~x) ^ (~m + 1) * sinh(~a + ~b * (~x) ^ ~n) ^ ~p) / (~m + 1) - (~b * ~n * ~p * (~x) ^ (~m + ~n + 1) * cosh(~a + ~b * (~x) ^ ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / ((~m + 1) * (~m + ~n + 1))) + (((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2) / ((~m + 1) * (~m + ~n + 1))) * Antiderivative((~x) ^ (~m + 2 * ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ ~p, ~x) + (((~b) ^ 2 * (~n) ^ 2 * ~p * (~p - 1)) / ((~m + 1) * (~m + ~n + 1))) * Antiderivative((~x) ^ (~m + 2 * ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~m, ~n) && (GtQ(~p, 1) && (LtQ(0, 2 * ~n, 1 - ~m) && NeQ(~m + ~n + 1, 0))))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => ((((~x) ^ (~m + 1) * cosh(~a + ~b * (~x) ^ ~n) ^ ~p) / (~m + 1) - (~b * ~n * ~p * (~x) ^ (~m + ~n + 1) * sinh(~a + ~b * (~x) ^ ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 1)) / ((~m + 1) * (~m + ~n + 1))) + (((~b) ^ 2 * (~n) ^ 2 * (~p) ^ 2) / ((~m + 1) * (~m + ~n + 1))) * Antiderivative((~x) ^ (~m + 2 * ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ ~p, ~x)) - (((~b) ^ 2 * (~n) ^ 2 * ~p * (~p - 1)) / ((~m + 1) * (~m + ~n + 1))) * Antiderivative((~x) ^ (~m + 2 * ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p - 2), ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~m, ~n) && (GtQ(~p, 1) && (LtQ(0, 2 * ~n, 1 - ~m) && NeQ(~m + ~n + 1, 0))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => With([k = Denominator(~m)], (k / ~e) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + ~b * sinh(~c + (~d * (~x) ^ (k * ~n)) / (~e) ^ ~n)) ^ ~p, ~x), ~x, (~e * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IntegerQ(~p) && (IGtQ(~n, 0) && FractionQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => With([k = Denominator(~m)], (k / ~e) * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + ~b * cosh(~c + (~d * (~x) ^ (k * ~n)) / (~e) ^ ~n)) ^ ~p, ~x), ~x, (~e * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IntegerQ(~p) && (IGtQ(~n, 0) && FractionQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~e * ~x) ^ ~m, (~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (IGtQ(~p, 1) && IGtQ(~n, 0))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~e * ~x) ^ ~m, (~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (IGtQ(~p, 1) && IGtQ(~n, 0))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (((~x) ^ ~n * cosh(~a + ~b * (~x) ^ ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~n * (~p + 1)) - (~n * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 2)) / ((~b) ^ 2 * (~n) ^ 2 * (~p + 1) * (~p + 2))) - ((~p + 2) / (~p + 1)) * Antiderivative((~x) ^ ~m * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~m, ~n], ~x) && (EqQ((~m - 2 * ~n) + 1, 0) && (LtQ(~p, -1) && NeQ(~p, -2)))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => (-((~x) ^ ~n) * sinh(~a + ~b * (~x) ^ ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~n * (~p + 1)) + (~n * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 2)) / ((~b) ^ 2 * (~n) ^ 2 * (~p + 1) * (~p + 2)) + ((~p + 2) / (~p + 1)) * Antiderivative((~x) ^ ~m * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b, ~m, ~n], ~x) && (EqQ((~m - 2 * ~n) + 1, 0) && (LtQ(~p, -1) && NeQ(~p, -2)))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => ((((~x) ^ ((~m - ~n) + 1) * cosh(~a + ~b * (~x) ^ ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~n * (~p + 1)) - (((~m - ~n) + 1) * (~x) ^ ((~m - 2 * ~n) + 1) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 2)) / ((~b) ^ 2 * (~n) ^ 2 * (~p + 1) * (~p + 2))) - ((~p + 2) / (~p + 1)) * Antiderivative((~x) ^ ~m * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 2), ~x)) + ((((~m - ~n) + 1) * ((~m - 2 * ~n) + 1)) / ((~b) ^ 2 * (~n) ^ 2 * (~p + 1) * (~p + 2))) * Antiderivative((~x) ^ (~m - 2 * ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~m, ~n) && (LtQ(~p, -1) && (NeQ(~p, -2) && LtQ(0, 2 * ~n, ~m + 1))))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~p, ~x) => ((-((~x) ^ ((~m - ~n) + 1)) * sinh(~a + ~b * (~x) ^ ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~n * (~p + 1)) + (((~m - ~n) + 1) * (~x) ^ ((~m - 2 * ~n) + 1) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 2)) / ((~b) ^ 2 * (~n) ^ 2 * (~p + 1) * (~p + 2)) + ((~p + 2) / (~p + 1)) * Antiderivative((~x) ^ ~m * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 2), ~x)) - ((((~m - ~n) + 1) * ((~m - 2 * ~n) + 1)) / ((~b) ^ 2 * (~n) ^ 2 * (~p + 1) * (~p + 2))) * Antiderivative((~x) ^ (~m - 2 * ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 2), ~x) <-- FreeQ([~a, ~b], ~x) && (IntegersQ(~m, ~n) && (LtQ(~p, -1) && (NeQ(~p, -2) && LtQ(0, 2 * ~n, ~m + 1))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => -(Subst(Antiderivative((~a + ~b * sinh(~c + ~d * (~x) ^ -(~n))) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (IntegerQ(~p) && (ILtQ(~n, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => -(Subst(Antiderivative((~a + ~b * cosh(~c + ~d * (~x) ^ -(~n))) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x)) <-- FreeQ([~a, ~b, ~c, ~d], ~x) && (IntegerQ(~p) && (ILtQ(~n, 0) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => With([k = Denominator(~m)], (-k / ~e) * Subst(Antiderivative((~a + ~b * sinh(~c + ~d / ((~e) ^ ~n * (~x) ^ (k * ~n)))) ^ ~p / (~x) ^ (k * (~m + 1) + 1), ~x), ~x, 1 / (~e * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IntegerQ(~p) && (ILtQ(~n, 0) && FractionQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => With([k = Denominator(~m)], (-k / ~e) * Subst(Antiderivative((~a + ~b * cosh(~c + ~d / ((~e) ^ ~n * (~x) ^ (k * ~n)))) ^ ~p / (~x) ^ (k * (~m + 1) + 1), ~x), ~x, 1 / (~e * ~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~e], ~x) && (IntegerQ(~p) && (ILtQ(~n, 0) && FractionQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => -((~e * ~x) ^ ~m) * ((~x) ^ -1) ^ ~m * Subst(Antiderivative((~a + ~b * sinh(~c + ~d * (~x) ^ -(~n))) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (IntegerQ(~p) && (ILtQ(~n, 0) && Not(RationalQ(~m))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~m * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => -((~e * ~x) ^ ~m) * ((~x) ^ -1) ^ ~m * Subst(Antiderivative((~a + ~b * cosh(~c + ~d * (~x) ^ -(~n))) ^ ~p / (~x) ^ (~m + 2), ~x), ~x, 1 / ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (IntegerQ(~p) && (ILtQ(~n, 0) && Not(RationalQ(~m))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Module([k = Denominator(~n)], k * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + ~b * sinh(~c + ~d * (~x) ^ (k * ~n))) ^ ~p, ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && (IntegerQ(~p) && FractionQ(~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => Module([k = Denominator(~n)], k * Subst(Antiderivative((~x) ^ (k * (~m + 1) - 1) * (~a + ~b * cosh(~c + ~d * (~x) ^ (k * ~n))) ^ ~p, ~x), ~x, (~x) ^ (1 / k))) <-- FreeQ([~a, ~b, ~c, ~d, ~m], ~x) && (IntegerQ(~p) && FractionQ(~n))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (IntegerQ(~p) && FractionQ(~n))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m], ~x) && (IntegerQ(~p) && FractionQ(~n))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~a + ~b * sinh(~c + ~d * (~x) ^ Simplify(~n / (~m + 1)))) ^ ~p, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (IntegerQ(~p) && (NeQ(~m, -1) && (IGtQ(Simplify(~n / (~m + 1)), 0) && Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (1 / (~m + 1)) * Subst(Antiderivative((~a + ~b * cosh(~c + ~d * (~x) ^ Simplify(~n / (~m + 1)))) ^ ~p, ~x), ~x, (~x) ^ (~m + 1)) <-- FreeQ([~a, ~b, ~c, ~d, ~m, ~n], ~x) && (IntegerQ(~p) && (NeQ(~m, -1) && (IGtQ(Simplify(~n / (~m + 1)), 0) && Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (IntegerQ(~p) && (NeQ(~m, -1) && (IGtQ(Simplify(~n / (~m + 1)), 0) && Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~e * ~x) ^ ~m * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~(p'), ~x) => (((~e) ^ IntPart(~m) * (~e * ~x) ^ FracPart(~m)) / (~x) ^ FracPart(~m)) * Antiderivative((~x) ^ ~m * (~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && (IntegerQ(~p) && (NeQ(~m, -1) && (IGtQ(Simplify(~n / (~m + 1)), 0) && Not(IntegerQ(~n)))))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * sinh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) - (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e, ~m, ~n], ~x)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * cosh(~(c') + ~(d') * (~x) ^ ~n), ~x) => (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (~c + ~d * (~x) ^ ~n), ~x) + (1 / 2) * Antiderivative((~e * ~x) ^ ~m * ℯ ^ (-(~c) - ~d * (~x) ^ ~n), ~x) <-- FreeQ([~c, ~d, ~e, ~m, ~n], ~x)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~e * ~x) ^ ~m, (~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && IGtQ(~p, 0)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~x) ^ ~n)) ^ ~p, ~x) => Antiderivative(ExpandTrigReduce((~e * ~x) ^ ~m, (~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n], ~x) && IGtQ(~p, 0)
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1) ^ (~m + 1)) * Subst(Antiderivative((~x - Coefficient(~u, ~x, 0)) ^ ~m * (~a + ~b * sinh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (LinearQ(~u, ~x) && (NeQ(~u, ~x) && IntegerQ(~m)))
    @apply_utils Antiderivative((~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => (1 / Coefficient(~u, ~x, 1) ^ (~m + 1)) * Subst(Antiderivative((~x - Coefficient(~u, ~x, 0)) ^ ~m * (~a + ~b * cosh(~c + ~d * (~x) ^ ~n)) ^ ~p, ~x), ~x, ~u) <-- FreeQ([~a, ~b, ~c, ~d, ~n, ~p], ~x) && (LinearQ(~u, ~x) && (NeQ(~u, ~x) && IntegerQ(~m)))
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * sinh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~e * ~x) ^ ~m * (~a + ~b * sinh(~c + ~d * (~u) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && LinearQ(~u, ~x)
    @apply_utils Antiderivative((~(e') * ~x) ^ ~(m') * (~(a') + ~(b') * cosh(~(c') + ~(d') * (~u) ^ ~n)) ^ ~(p'), ~x) => Unintegrable((~e * ~x) ^ ~m * (~a + ~b * cosh(~c + ~d * (~u) ^ ~n)) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~c, ~d, ~e, ~m, ~n, ~p], ~x) && LinearQ(~u, ~x)
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * sinh(~u)) ^ ~(p'), ~x) => Antiderivative((~e * ~x) ^ ~m * (~a + ~b * sinh(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~e * ~x) ^ ~(m') * (~(a') + ~(b') * cosh(~u)) ^ ~(p'), ~x) => Antiderivative((~e * ~x) ^ ~m * (~a + ~b * cosh(ExpandToSum(~u, ~x))) ^ ~p, ~x) <-- FreeQ([~a, ~b, ~e, ~m, ~p], ~x) && (BinomialQ(~u, ~x) && Not(BinomialMatchQ(~u, ~x)))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~n) ^ ~(p') * cosh(~(a') + ~(b') * (~x) ^ ~(n')), ~x) => sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 1) / (~b * ~n * (~p + 1)) <-- FreeQ([~a, ~b, ~m, ~n, ~p], ~x) && (EqQ(~m, ~n - 1) && NeQ(~p, -1))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~n) ^ ~(p') * sinh(~(a') + ~(b') * (~x) ^ ~(n')), ~x) => cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 1) / (~b * ~n * (~p + 1)) <-- FreeQ([~a, ~b, ~m, ~n, ~p], ~x) && (EqQ(~m, ~n - 1) && NeQ(~p, -1))
    @apply_utils Antiderivative((~x) ^ ~(m') * sinh(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * cosh(~(a') + ~(b') * (~x) ^ ~(n')), ~x) => ((~x) ^ ((~m - ~n) + 1) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~n * (~p + 1)) - (((~m - ~n) + 1) / (~b * ~n * (~p + 1))) * Antiderivative((~x) ^ (~m - ~n) * sinh(~a + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (LtQ(0, ~n, ~m + 1) && NeQ(~p, -1))
    @apply_utils Antiderivative((~x) ^ ~(m') * cosh(~(a') + ~(b') * (~x) ^ ~(n')) ^ ~(p') * sinh(~(a') + ~(b') * (~x) ^ ~(n')), ~x) => ((~x) ^ ((~m - ~n) + 1) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 1)) / (~b * ~n * (~p + 1)) - (((~m - ~n) + 1) / (~b * ~n * (~p + 1))) * Antiderivative((~x) ^ (~m - ~n) * cosh(~a + ~b * (~x) ^ ~n) ^ (~p + 1), ~x) <-- FreeQ([~a, ~b, ~p], ~x) && (LtQ(0, ~n, ~m + 1) && NeQ(~p, -1))
end
